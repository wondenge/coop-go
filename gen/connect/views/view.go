// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect views
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AccountBalanceSuccessResponse is the viewed result type that is projected
// based on a view.
type AccountBalanceSuccessResponse struct {
	// Type to project
	Projected *AccountBalanceSuccessResponseView
	// View to render
	View string
}

// AccountFullStatementSuccessResponse is the viewed result type that is
// projected based on a view.
type AccountFullStatementSuccessResponse struct {
	// Type to project
	Projected *AccountFullStatementSuccessResponseView
	// View to render
	View string
}

// AccountMiniStatementSuccessResponse is the viewed result type that is
// projected based on a view.
type AccountMiniStatementSuccessResponse struct {
	// Type to project
	Projected *AccountMiniStatementSuccessResponseView
	// View to render
	View string
}

// AccountTransactionsSuccessResponse is the viewed result type that is
// projected based on a view.
type AccountTransactionsSuccessResponse struct {
	// Type to project
	Projected *AccountTransactionsSuccessResponseView
	// View to render
	View string
}

// AccountValidationSuccessResponse is the viewed result type that is projected
// based on a view.
type AccountValidationSuccessResponse struct {
	// Type to project
	Projected *AccountValidationSuccessResponseView
	// View to render
	View string
}

// ExchangeRateSuccessResponse is the viewed result type that is projected
// based on a view.
type ExchangeRateSuccessResponse struct {
	// Type to project
	Projected *ExchangeRateSuccessResponseView
	// View to render
	View string
}

// SuccessAcknowledgement is the viewed result type that is projected based on
// a view.
type SuccessAcknowledgement struct {
	// Type to project
	Projected *SuccessAcknowledgementView
	// View to render
	View string
}

// SuccessResponse is the viewed result type that is projected based on a view.
type SuccessResponse struct {
	// Type to project
	Projected *SuccessResponseView
	// View to render
	View string
}

// AccountBalanceSuccessResponseView is a type that runs validations on a
// projected type.
type AccountBalanceSuccessResponseView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Message Response Code
	MessageCode *string
	// Message Code description
	MessageDescription *string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName *string
	// Account currency in ISO Currency Code
	Currency *string
	// Posting account number
	ProductName *string
	// Cleared Balance Amount
	ClearedBalance *float64
	// Cleared Balance Amount
	BookedBalance *float64
	// Cleared Balance Amount
	BlockedBalance *float64
	// Cleared Balance Amount
	AvailableBalance *float64
	// Cleared Balance Amount
	ArrearsAmount *float64
	// Posting account number
	BranchName *string
	// Posting account number
	BranchSortCode *string
	// Cleared Balance Amount
	AverageBalance *float64
	// Cleared Balance Amount
	UnclearedBalance *float64
	// Cleared Balance Amount
	ODLimit *float64
	// Cleared Balance Amount
	CreditLimit *float64
}

// AccountFullStatementSuccessResponseView is a type that runs validations on a
// projected type.
type AccountFullStatementSuccessResponseView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Message Response Code
	MessageCode *string
	// Acknowledgement/Response Message Code Description
	MessageDescription *string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName  *string
	Transactions []*AccountTransactionView
}

// AccountTransactionView is a type that runs validations on a projected type.
type AccountTransactionView struct {
	// Unique Transaction Posting Identifier
	TransactionID *string
	// Transaction Date
	TransactionDate *string
	// Transaction Value Date
	ValueDate *string
	// Transaction Narration
	Narration *string
	// Transaction Type, C for Credit or D for Debit
	TransactionType *string
	// Transaction Service Point
	ServicePoint *string
	// Unique Transaction Reference
	TransactionReference *string
	// Transaction Credit Amount
	CreditAmount *float64
	// Transaction Debit Amount
	DebitAmount *float64
	// Account Running Cleared Balance
	RunningClearedBalance *float64
	// Account Running Book Balance
	RunningBookBalance *float64
	// Account Debit Limit
	DebitLimit *float64
	// Account Debit Limit Expiry Date
	LimitExpiryDate *string
}

// AccountMiniStatementSuccessResponseView is a type that runs validations on a
// projected type.
type AccountMiniStatementSuccessResponseView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Message Response Code
	MessageCode *string
	// Acknowledgement/Response Message Code Description
	MessageDescription *string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName  *string
	Transactions []*AccountTransactionView
}

// AccountTransactionsSuccessResponseView is a type that runs validations on a
// projected type.
type AccountTransactionsSuccessResponseView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Message Response Code
	MessageCode *string
	// Acknowledgement/Response Message Code Description
	MessageDescription *string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName *string
	// No Of Latest Transactions To Be Returned
	NoOfTransactions *int
	// Total Credits Amount
	TotalCredits *float64
	// Total Debits Amount
	TotalDebits  *float64
	Transactions []*AccountTransactionView
}

// AccountValidationSuccessResponseView is a type that runs validations on a
// projected type.
type AccountValidationSuccessResponseView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Message Response Code
	MessageCode *string
	// Message Code description
	MessageDescription *string
}

// ExchangeRateSuccessResponseView is a type that runs validations on a
// projected type.
type ExchangeRateSuccessResponseView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Message Response Code
	MessageCode *string
	// Message Code description
	MessageDescription *string
	// From Currency Code in ISO Currency Code
	FromCurrencyCode *string
	// To Currency Code in ISO Currency Code
	ToCurrencyCode *string
	// Exchange rate type
	RateType *string
	// Exchange rate amount
	Rate *float64
	// Exchange rate tolerance
	Tolerance *float64
	// Exchange rate is a multiply or a divide
	MultiplyDivide *string
}

// SuccessAcknowledgementView is a type that runs validations on a projected
// type.
type SuccessAcknowledgementView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Acknowledgement/Response Message Code
	MessageCode *string
	// Message Code description
	MessageDescription *string
}

// SuccessResponseView is a type that runs validations on a projected type.
type SuccessResponseView struct {
	// Your unique transaction request message identifier
	MessageReference *string
	// Acknowledgement message creation timestamp
	MessageDateTime *string
	// Acknowledgement/Response Message Code
	MessageCode *string
	// Message Code description
	MessageDescription *string
	Source             *SourceAccountView
	Destinations       []*DestinationAccountView
}

// SourceAccountView is a type that runs validations on a projected type.
type SourceAccountView struct {
	// Posting account number
	AccountNumber *string
	// Transaction Amount
	Amount              *float64
	TransactionCurrency *string
	// Posting account transaction narration
	Narration *string
	// Posting leg response code
	ResponseCode *string
	// Posting leg response description
	ResponseDescription *string
}

// DestinationAccountView is a type that runs validations on a projected type.
type DestinationAccountView struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber *string
	// Posting account number
	AccountNumber *string
	// Recipient phone number linked to a bank account in an IPSL participating bank
	MobileNumber *string
	// Recipient phone number linked to a bank account in an IPSL participating bank
	PhoneNumber *string
	// Posting account bank code
	BankCode *string
	// Transaction Amount
	Amount *float64
	// Posting account currency in ISO Currency Code
	TransactionCurrency *string
	// Posting account transaction narration
	Narration *string
	// Co-operative Bank's processed transaction number
	TransactionID *string
	// Posting leg response code
	ResponseCode *string
	// Posting leg response description
	ResponseDescription *string
}

var (
	// AccountBalanceSuccessResponseMap is a map of attribute names in result type
	// AccountBalanceSuccessResponse indexed by view name.
	AccountBalanceSuccessResponseMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
			"AccountNumber",
			"AccountName",
			"Currency",
			"ProductName",
			"ClearedBalance",
			"BookedBalance",
			"BlockedBalance",
			"AvailableBalance",
			"ArrearsAmount",
			"BranchName",
			"BranchSortCode",
			"AverageBalance",
			"UnclearedBalance",
			"ODLimit",
			"CreditLimit",
		},
	}
	// AccountFullStatementSuccessResponseMap is a map of attribute names in result
	// type AccountFullStatementSuccessResponse indexed by view name.
	AccountFullStatementSuccessResponseMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
			"AccountNumber",
			"AccountName",
			"Transactions",
		},
	}
	// AccountMiniStatementSuccessResponseMap is a map of attribute names in result
	// type AccountMiniStatementSuccessResponse indexed by view name.
	AccountMiniStatementSuccessResponseMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
			"AccountNumber",
			"AccountName",
			"Transactions",
		},
	}
	// AccountTransactionsSuccessResponseMap is a map of attribute names in result
	// type AccountTransactionsSuccessResponse indexed by view name.
	AccountTransactionsSuccessResponseMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
			"AccountNumber",
			"AccountName",
			"NoOfTransactions",
			"TotalCredits",
			"TotalDebits",
			"Transactions",
		},
	}
	// AccountValidationSuccessResponseMap is a map of attribute names in result
	// type AccountValidationSuccessResponse indexed by view name.
	AccountValidationSuccessResponseMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
		},
	}
	// ExchangeRateSuccessResponseMap is a map of attribute names in result type
	// ExchangeRateSuccessResponse indexed by view name.
	ExchangeRateSuccessResponseMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
			"FromCurrencyCode",
			"ToCurrencyCode",
			"RateType",
			"Rate",
			"Tolerance",
			"MultiplyDivide",
		},
	}
	// SuccessAcknowledgementMap is a map of attribute names in result type
	// SuccessAcknowledgement indexed by view name.
	SuccessAcknowledgementMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
		},
	}
	// SuccessResponseMap is a map of attribute names in result type
	// SuccessResponse indexed by view name.
	SuccessResponseMap = map[string][]string{
		"default": []string{
			"MessageReference",
			"MessageDateTime",
			"MessageCode",
			"MessageDescription",
			"Source",
			"Destinations",
		},
	}
)

// ValidateAccountBalanceSuccessResponse runs the validations defined on the
// viewed result type AccountBalanceSuccessResponse.
func ValidateAccountBalanceSuccessResponse(result *AccountBalanceSuccessResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAccountBalanceSuccessResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAccountFullStatementSuccessResponse runs the validations defined on
// the viewed result type AccountFullStatementSuccessResponse.
func ValidateAccountFullStatementSuccessResponse(result *AccountFullStatementSuccessResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAccountFullStatementSuccessResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAccountMiniStatementSuccessResponse runs the validations defined on
// the viewed result type AccountMiniStatementSuccessResponse.
func ValidateAccountMiniStatementSuccessResponse(result *AccountMiniStatementSuccessResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAccountMiniStatementSuccessResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAccountTransactionsSuccessResponse runs the validations defined on
// the viewed result type AccountTransactionsSuccessResponse.
func ValidateAccountTransactionsSuccessResponse(result *AccountTransactionsSuccessResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAccountTransactionsSuccessResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAccountValidationSuccessResponse runs the validations defined on the
// viewed result type AccountValidationSuccessResponse.
func ValidateAccountValidationSuccessResponse(result *AccountValidationSuccessResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAccountValidationSuccessResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateExchangeRateSuccessResponse runs the validations defined on the
// viewed result type ExchangeRateSuccessResponse.
func ValidateExchangeRateSuccessResponse(result *ExchangeRateSuccessResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateExchangeRateSuccessResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSuccessAcknowledgement runs the validations defined on the viewed
// result type SuccessAcknowledgement.
func ValidateSuccessAcknowledgement(result *SuccessAcknowledgement) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSuccessAcknowledgementView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSuccessResponse runs the validations defined on the viewed result
// type SuccessResponse.
func ValidateSuccessResponse(result *SuccessResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSuccessResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAccountBalanceSuccessResponseView runs the validations defined on
// AccountBalanceSuccessResponseView using the "default" view.
func ValidateAccountBalanceSuccessResponseView(result *AccountBalanceSuccessResponseView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, true))
		}
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, false))
		}
	}
	if result.Currency != nil {
		if !(*result.Currency == "KES" || *result.Currency == "USD" || *result.Currency == "EUR" || *result.Currency == "GBP" || *result.Currency == "AUD" || *result.Currency == "CHF" || *result.Currency == "CAD" || *result.Currency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.Currency", *result.Currency, []interface{}{"KES", "USD", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if result.ProductName != nil {
		if utf8.RuneCountInString(*result.ProductName) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.ProductName", *result.ProductName, utf8.RuneCountInString(*result.ProductName), 14, true))
		}
	}
	if result.ProductName != nil {
		if utf8.RuneCountInString(*result.ProductName) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.ProductName", *result.ProductName, utf8.RuneCountInString(*result.ProductName), 14, false))
		}
	}
	if result.BranchName != nil {
		if utf8.RuneCountInString(*result.BranchName) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.BranchName", *result.BranchName, utf8.RuneCountInString(*result.BranchName), 14, true))
		}
	}
	if result.BranchName != nil {
		if utf8.RuneCountInString(*result.BranchName) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.BranchName", *result.BranchName, utf8.RuneCountInString(*result.BranchName), 14, false))
		}
	}
	if result.BranchSortCode != nil {
		if utf8.RuneCountInString(*result.BranchSortCode) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.BranchSortCode", *result.BranchSortCode, utf8.RuneCountInString(*result.BranchSortCode), 14, true))
		}
	}
	if result.BranchSortCode != nil {
		if utf8.RuneCountInString(*result.BranchSortCode) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.BranchSortCode", *result.BranchSortCode, utf8.RuneCountInString(*result.BranchSortCode), 14, false))
		}
	}
	return
}

// ValidateAccountFullStatementSuccessResponseView runs the validations defined
// on AccountFullStatementSuccessResponseView using the "default" view.
func ValidateAccountFullStatementSuccessResponseView(result *AccountFullStatementSuccessResponseView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, true))
		}
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, false))
		}
	}
	if len(result.Transactions) < 0 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.Transactions", result.Transactions, len(result.Transactions), 0, true))
	}
	for _, e := range result.Transactions {
		if e != nil {
			if err2 := ValidateAccountTransactionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAccountTransactionView runs the validations defined on
// AccountTransactionView.
func ValidateAccountTransactionView(result *AccountTransactionView) (err error) {
	if result.TransactionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.TransactionDate", *result.TransactionDate, goa.FormatDateTime))
	}
	if result.ValueDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.ValueDate", *result.ValueDate, goa.FormatDateTime))
	}
	if result.TransactionType != nil {
		if !(*result.TransactionType == "C" || *result.TransactionType == "D") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.TransactionType", *result.TransactionType, []interface{}{"C", "D"}))
		}
	}
	return
}

// ValidateAccountMiniStatementSuccessResponseView runs the validations defined
// on AccountMiniStatementSuccessResponseView using the "default" view.
func ValidateAccountMiniStatementSuccessResponseView(result *AccountMiniStatementSuccessResponseView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, true))
		}
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, false))
		}
	}
	if len(result.Transactions) < 0 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.Transactions", result.Transactions, len(result.Transactions), 0, true))
	}
	for _, e := range result.Transactions {
		if e != nil {
			if err2 := ValidateAccountTransactionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAccountTransactionsSuccessResponseView runs the validations defined
// on AccountTransactionsSuccessResponseView using the "default" view.
func ValidateAccountTransactionsSuccessResponseView(result *AccountTransactionsSuccessResponseView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, true))
		}
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, false))
		}
	}
	if len(result.Transactions) < 0 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.Transactions", result.Transactions, len(result.Transactions), 0, true))
	}
	for _, e := range result.Transactions {
		if e != nil {
			if err2 := ValidateAccountTransactionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAccountValidationSuccessResponseView runs the validations defined on
// AccountValidationSuccessResponseView using the "default" view.
func ValidateAccountValidationSuccessResponseView(result *AccountValidationSuccessResponseView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateExchangeRateSuccessResponseView runs the validations defined on
// ExchangeRateSuccessResponseView using the "default" view.
func ValidateExchangeRateSuccessResponseView(result *ExchangeRateSuccessResponseView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	if result.FromCurrencyCode != nil {
		if !(*result.FromCurrencyCode == "USD" || *result.FromCurrencyCode == "KES" || *result.FromCurrencyCode == "EUR" || *result.FromCurrencyCode == "GBP" || *result.FromCurrencyCode == "AUD" || *result.FromCurrencyCode == "CHF" || *result.FromCurrencyCode == "CAD" || *result.FromCurrencyCode == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.FromCurrencyCode", *result.FromCurrencyCode, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if result.ToCurrencyCode != nil {
		if !(*result.ToCurrencyCode == "USD" || *result.ToCurrencyCode == "KES" || *result.ToCurrencyCode == "EUR" || *result.ToCurrencyCode == "GBP" || *result.ToCurrencyCode == "AUD" || *result.ToCurrencyCode == "CHF" || *result.ToCurrencyCode == "CAD" || *result.ToCurrencyCode == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.ToCurrencyCode", *result.ToCurrencyCode, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if result.MultiplyDivide != nil {
		if !(*result.MultiplyDivide == "M" || *result.MultiplyDivide == "D") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.MultiplyDivide", *result.MultiplyDivide, []interface{}{"M", "D"}))
		}
	}
	return
}

// ValidateSuccessAcknowledgementView runs the validations defined on
// SuccessAcknowledgementView using the "default" view.
func ValidateSuccessAcknowledgementView(result *SuccessAcknowledgementView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateSuccessResponseView runs the validations defined on
// SuccessResponseView using the "default" view.
func ValidateSuccessResponseView(result *SuccessResponseView) (err error) {
	if result.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "result"))
	}
	if result.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "result"))
	}
	if result.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "result"))
	}
	if result.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "result"))
	}
	if result.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "result"))
	}
	if result.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "result"))
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 1, true))
		}
	}
	if result.MessageReference != nil {
		if utf8.RuneCountInString(*result.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MessageReference", *result.MessageReference, utf8.RuneCountInString(*result.MessageReference), 27, false))
		}
	}
	if result.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.MessageDateTime", *result.MessageDateTime, goa.FormatDateTime))
	}
	if result.Source != nil {
		if err2 := ValidateSourceAccountView(result.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range result.Destinations {
		if e != nil {
			if err2 := ValidateDestinationAccountView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSourceAccountView runs the validations defined on SourceAccountView.
func ValidateSourceAccountView(result *SourceAccountView) (err error) {
	if result.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "result"))
	}
	if result.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "result"))
	}
	if result.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "result"))
	}
	if result.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "result"))
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, true))
		}
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, false))
		}
	}
	return
}

// ValidateDestinationAccountView runs the validations defined on
// DestinationAccountView.
func ValidateDestinationAccountView(result *DestinationAccountView) (err error) {
	if result.ReferenceNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReferenceNumber", "result"))
	}
	if result.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "result"))
	}
	if result.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "result"))
	}
	if result.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "result"))
	}
	if result.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "result"))
	}
	if result.ReferenceNumber != nil {
		if utf8.RuneCountInString(*result.ReferenceNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.ReferenceNumber", *result.ReferenceNumber, utf8.RuneCountInString(*result.ReferenceNumber), 1, true))
		}
	}
	if result.ReferenceNumber != nil {
		if utf8.RuneCountInString(*result.ReferenceNumber) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.ReferenceNumber", *result.ReferenceNumber, utf8.RuneCountInString(*result.ReferenceNumber), 30, false))
		}
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, true))
		}
	}
	if result.AccountNumber != nil {
		if utf8.RuneCountInString(*result.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.AccountNumber", *result.AccountNumber, utf8.RuneCountInString(*result.AccountNumber), 14, false))
		}
	}
	if result.MobileNumber != nil {
		if !(*result.MobileNumber == "07xxxxxxxx" || *result.MobileNumber == "2547xxxxxxxx" || *result.MobileNumber == "+2547xxxxxxxx") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.MobileNumber", *result.MobileNumber, []interface{}{"07xxxxxxxx", "2547xxxxxxxx", "+2547xxxxxxxx"}))
		}
	}
	if result.MobileNumber != nil {
		if utf8.RuneCountInString(*result.MobileNumber) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MobileNumber", *result.MobileNumber, utf8.RuneCountInString(*result.MobileNumber), 10, true))
		}
	}
	if result.MobileNumber != nil {
		if utf8.RuneCountInString(*result.MobileNumber) > 13 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.MobileNumber", *result.MobileNumber, utf8.RuneCountInString(*result.MobileNumber), 13, false))
		}
	}
	if result.PhoneNumber != nil {
		if !(*result.PhoneNumber == "07xxxxxxxx" || *result.PhoneNumber == "2547xxxxxxxx" || *result.PhoneNumber == "+2547xxxxxxxx") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.PhoneNumber", *result.PhoneNumber, []interface{}{"07xxxxxxxx", "2547xxxxxxxx", "+2547xxxxxxxx"}))
		}
	}
	if result.PhoneNumber != nil {
		if utf8.RuneCountInString(*result.PhoneNumber) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.PhoneNumber", *result.PhoneNumber, utf8.RuneCountInString(*result.PhoneNumber), 10, true))
		}
	}
	if result.PhoneNumber != nil {
		if utf8.RuneCountInString(*result.PhoneNumber) > 13 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.PhoneNumber", *result.PhoneNumber, utf8.RuneCountInString(*result.PhoneNumber), 13, false))
		}
	}
	if result.TransactionCurrency != nil {
		if !(*result.TransactionCurrency == "KES" || *result.TransactionCurrency == "USD" || *result.TransactionCurrency == "EUR" || *result.TransactionCurrency == "GBP" || *result.TransactionCurrency == "AUD" || *result.TransactionCurrency == "CHF" || *result.TransactionCurrency == "CAD" || *result.TransactionCurrency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.TransactionCurrency", *result.TransactionCurrency, []interface{}{"KES", "USD", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	return
}
