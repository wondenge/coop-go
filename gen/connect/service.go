// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect service
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package connect

import (
	"context"

	connectviews "github.com/wondenge/coop-go/gen/connect/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the connect service interface.
type Service interface {
	// Post an Account Balance Enquiry Request
	AccountBalance(context.Context, *AccountBalancePayload) (res *AccountBalanceSuccessResponse, err error)
	// Post an Account Full Statement Enquiry Request
	AccountFullStatement(context.Context, *AccountFullStatementPayload) (res *AccountFullStatementSuccessResponse, err error)
	// Post an Account Mini Statement Enquiry Request
	AccountMiniStatement(context.Context, *AccountMiniStatementPayload) (res *AccountMiniStatementSuccessResponse, err error)
	// Post an Account Transactions Enquiry Request
	AccountTransactions(context.Context, *AccountTransactionsPayload) (res *AccountTransactionsSuccessResponse, err error)
	// Post an Account Validation Enquiry Request
	AccountValidation(context.Context, *AccountValidationPayload) (res *AccountValidationSuccessResponse, err error)
	// Post an Exchange Rate Enquiry Request
	ExchangeRate(context.Context, *ExchangeRatePayload) (res *ExchangeRateSuccessResponse, err error)
	// Post an Internal Funds Transfer Account to Account Transaction
	IFTAccountToAccount(context.Context, *IFTAccountToAccountTXNRequest) (res *SuccessAcknowledgement, err error)
	// Post a Debit/Credit Account Transaction Event Type Notification Simulation
	// Request
	INSSimulation(context.Context, *INSTransactionSimulationRequest) (res *SuccessAcknowledgement, err error)
	// Post a PesaLink Funds Transfer Send to Account Transaction
	PesaLinkSendToAccount(context.Context, *PesaLinkSendToAccountTransactionRequest) (res *SuccessAcknowledgement, err error)
	// Post a PesaLink Funds Transfer Send to Phone Transaction
	PesaLinkSendToPhone(context.Context, *PesaLinkSendToPhoneTransactionRequest) (res *SuccessAcknowledgement, err error)
	// Post a Send To M-Pesa Funds Transfer Transaction
	SendToMPesa(context.Context, *SendToMpesaTransactionRequest) (res *SuccessAcknowledgement, err error)
	// Post a Transaction Status Enquiry Request
	TransactionStatus(context.Context, *FTTransactionStatusPayload) (res *SuccessResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "connect"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [12]string{"AccountBalance", "AccountFullStatement", "AccountMiniStatement", "AccountTransactions", "AccountValidation", "ExchangeRate", "IFTAccountToAccount", "INSSimulation", "PesaLinkSendToAccount", "PesaLinkSendToPhone", "SendToMPesa", "TransactionStatus"}

// AccountBalancePayload is the payload type of the connect service
// AccountBalance method.
type AccountBalancePayload struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Posting account number
	AccountNumber string
}

// AccountBalanceSuccessResponse is the result type of the connect service
// AccountBalance method.
type AccountBalanceSuccessResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName *string
	// Account currency in ISO Currency Code
	Currency *string
	// Posting account number
	ProductName *string
	// Cleared Balance Amount
	ClearedBalance *float64
	// Cleared Balance Amount
	BookedBalance *float64
	// Cleared Balance Amount
	BlockedBalance *float64
	// Cleared Balance Amount
	AvailableBalance *float64
	// Cleared Balance Amount
	ArrearsAmount *float64
	// Posting account number
	BranchName *string
	// Posting account number
	BranchSortCode *string
	// Cleared Balance Amount
	AverageBalance *float64
	// Cleared Balance Amount
	UnclearedBalance *float64
	// Cleared Balance Amount
	ODLimit *float64
	// Cleared Balance Amount
	CreditLimit *float64
}

// AccountFullStatementPayload is the payload type of the connect service
// AccountFullStatement method.
type AccountFullStatementPayload struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Posting account number
	AccountNumber string
	// Statement Start Date
	StartDate string
	// Statement End Date
	EndDate string
}

// AccountFullStatementSuccessResponse is the result type of the connect
// service AccountFullStatement method.
type AccountFullStatementSuccessResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Acknowledgement/Response Message Code Description
	MessageDescription string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName  *string
	Transactions []*AccountTransaction
}

// AccountMiniStatementPayload is the payload type of the connect service
// AccountMiniStatement method.
type AccountMiniStatementPayload struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Posting account number
	AccountNumber string
}

// AccountMiniStatementSuccessResponse is the result type of the connect
// service AccountMiniStatement method.
type AccountMiniStatementSuccessResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Acknowledgement/Response Message Code Description
	MessageDescription string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName  *string
	Transactions []*AccountTransaction
}

// AccountTransactionsPayload is the payload type of the connect service
// AccountTransactions method.
type AccountTransactionsPayload struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Posting account number
	AccountNumber string
	// No Of Latest Transactions To Be Returned
	NoOfTransactions int
}

// AccountTransactionsSuccessResponse is the result type of the connect service
// AccountTransactions method.
type AccountTransactionsSuccessResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Acknowledgement/Response Message Code Description
	MessageDescription string
	// Posting account number
	AccountNumber *string
	// Account Name
	AccountName *string
	// No Of Latest Transactions To Be Returned
	NoOfTransactions *int
	// Total Credits Amount
	TotalCredits *float64
	// Total Debits Amount
	TotalDebits  *float64
	Transactions []*AccountTransaction
}

// AccountValidationPayload is the payload type of the connect service
// AccountValidation method.
type AccountValidationPayload struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Posting account number
	AccountNumber string
}

// AccountValidationSuccessResponse is the result type of the connect service
// AccountValidation method.
type AccountValidationSuccessResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
}

// ExchangeRatePayload is the payload type of the connect service ExchangeRate
// method.
type ExchangeRatePayload struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// From Currency Code in ISO Currency Code
	FromCurrencyCode string
	// To Currency Code in ISO Currency Code
	ToCurrencyCode string
}

// ExchangeRateSuccessResponse is the result type of the connect service
// ExchangeRate method.
type ExchangeRateSuccessResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
	// From Currency Code in ISO Currency Code
	FromCurrencyCode *string
	// To Currency Code in ISO Currency Code
	ToCurrencyCode *string
	// Exchange rate type
	RateType *string
	// Exchange rate amount
	Rate *float64
	// Exchange rate tolerance
	Tolerance *float64
	// Exchange rate is a multiply or a divide
	MultiplyDivide *string
}

// IFTAccountToAccountTXNRequest is the payload type of the connect service
// IFTAccountToAccount method.
type IFTAccountToAccountTXNRequest struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Your callback URL that will receive transaction processing results
	CallBackURL  string
	Source       *SourceAccountTXNRequest
	Destinations *DestinationsTXNRequest
}

// SuccessAcknowledgement is the result type of the connect service
// IFTAccountToAccount method.
type SuccessAcknowledgement struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Acknowledgement/Response Message Code
	MessageCode string
	// Message Code description
	MessageDescription string
}

// INSTransactionSimulationRequest is the payload type of the connect service
// INSSimulation method.
type INSTransactionSimulationRequest struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Notification Service Name identifier
	ServiceName *string
	// Notification Code identifier
	NotificationCode *string
	// Transaction Payment Reference
	PaymentRef string
	// Posting account number
	AccountNumber string
	// Transaction Amount
	Amount float64
	// Posting date of the Transaction
	TransactionDate string
	// The event of the transaction
	EventType string
	// Transaction Posting account currency in ISO Currency Code
	Currency string
	// Exchange Rate
	ExchangeRate uint64
	// Transaction Posting account narration
	Narration string
	CustMemo  *CustMemo
	// Transaction Posting Value Date
	ValueDate string
	// Transaction Posting Entry Date
	EntryDate string
	// Co-operative Bank's processed transaction number
	TransactionID string
}

// PesaLinkSendToAccountTransactionRequest is the payload type of the connect
// service PesaLinkSendToAccount method.
type PesaLinkSendToAccountTransactionRequest struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Your callback URL that will receive transaction processing results
	CallBackURL  string
	Source       *SourceAccountTransactionRequest
	Destinations *DestinationsTransactionRequest
}

// PesaLinkSendToPhoneTransactionRequest is the payload type of the connect
// service PesaLinkSendToPhone method.
type PesaLinkSendToPhoneTransactionRequest struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Your callback URL that will receive transaction processing results
	CallBackURL  string
	Source       *SourceAccountTransactionRequest
	Destinations *DestinationsTransactionRequest
}

// SendToMpesaTransactionRequest is the payload type of the connect service
// SendToMPesa method.
type SendToMpesaTransactionRequest struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
	// Your callback URL that will receive transaction processing results
	CallBackURL  string
	Source       *SourceAccountTransactionRequest
	Destinations *DestinationsTransactionRequest
}

// FTTransactionStatusPayload is the payload type of the connect service
// TransactionStatus method.
type FTTransactionStatusPayload struct {
	AccessToken *string
	// Your unique transaction request message identifier
	MessageReference string
}

// SuccessResponse is the result type of the connect service TransactionStatus
// method.
type SuccessResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Acknowledgement/Response Message Code
	MessageCode string
	// Message Code description
	MessageDescription string
	Source             *SourceAccount
	Destinations       []*DestinationAccount
}

// Account Transaction
type AccountTransaction struct {
	// Unique Transaction Posting Identifier
	TransactionID *string
	// Transaction Date
	TransactionDate *string
	// Transaction Value Date
	ValueDate *string
	// Transaction Narration
	Narration *string
	// Transaction Type, C for Credit or D for Debit
	TransactionType *string
	// Transaction Service Point
	ServicePoint *string
	// Unique Transaction Reference
	TransactionReference *string
	// Transaction Credit Amount
	CreditAmount *float64
	// Transaction Debit Amount
	DebitAmount *float64
	// Account Running Cleared Balance
	RunningClearedBalance *float64
	// Account Running Book Balance
	RunningBookBalance *float64
	// Account Debit Limit
	DebitLimit *float64
	// Account Debit Limit Expiry Date
	LimitExpiryDate *string
}

// Source Account Transaction Request
type SourceAccountTXNRequest struct {
	// Posting account number
	AccountNumber string
	// Transaction Amount
	Amount float64
	// Posting account currency in ISO Currency Code
	TransactionCurrency string
	// Posting account transaction narration
	Narration string
}

// Destinations TXN Request
type DestinationsTXNRequest struct {
	DestinationsTXNRequest []*DestinationAccountTXNRequest
}

// Destination Account Transaction Request
type DestinationAccountTXNRequest struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber string
	// Posting account number
	AccountNumber string
	// Transaction Amount
	Amount float64
	// Posting account currency in ISO Currency Code
	TransactionCurrency string
	// Posting account transaction narration
	Narration string
}

// Cust Memo
type CustMemo struct {
	// CustMemo CustMemoLine1
	CustMemoLine1 *string
	// CustMemo CustMemoLine2
	CustMemoLine2 *string
	// CustMemo CustMemoLine2
	CustMemoLine3 *string
}

// Source Account Transaction Request
type SourceAccountTransactionRequest struct {
	// Posting account number
	AccountNumber string
	// Transaction Amount
	Amount float64
	// Posting account currency in ISO Currency Code
	TransactionCurrency string
	// Posting account transaction narration
	Narration string
	// Posting leg response description
	ResponseDescription *string
}

// Destinations Transaction Request
type DestinationsTransactionRequest struct {
	DestinationAccountTransactionRequest []*DestinationAccountTransactionRequest
}

// Destination Account Transaction Request
type DestinationAccountTransactionRequest struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber string
	// Recipient phone number linked to a bank account in an IPSL participating bank
	MobileNumber string
	// Transaction Amount
	Amount float64
	// Posting account transaction narration
	Narration string
}

// Source Account
type SourceAccount struct {
	// Posting account number
	AccountNumber string
	// Transaction Amount
	Amount              float64
	TransactionCurrency string
	// Posting account transaction narration
	Narration string
	// Posting leg response code
	ResponseCode *string
	// Posting leg response description
	ResponseDescription *string
}

// Destination Account
type DestinationAccount struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber string
	// Posting account number
	AccountNumber string
	// Recipient phone number linked to a bank account in an IPSL participating bank
	MobileNumber *string
	// Recipient phone number linked to a bank account in an IPSL participating bank
	PhoneNumber *string
	// Posting account bank code
	BankCode *string
	// Transaction Amount
	Amount float64
	// Posting account currency in ISO Currency Code
	TransactionCurrency string
	// Posting account transaction narration
	Narration string
	// Co-operative Bank's processed transaction number
	TransactionID *string
	// Posting leg response code
	ResponseCode *string
	// Posting leg response description
	ResponseDescription *string
}

// Error Response
type ErrorResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
}

// Missing Credentials
type MissingCredentials struct {
	Fault *MissingCredentialFault
}

type MissingCredentialFault struct {
	Code        *string
	Message     *string
	Description *string
}

// Bad Request Error Response
type AcknowledgementError400 struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
}

// Forbidden Error Response
type AcknowledgementError403 struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
}

// Conflict Error Response
type AcknowledgementError409 struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
}

// Unauthorized Error Response
type ErrorAcknowledgement struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Message Response Code
	MessageCode string
	// Message Code description
	MessageDescription string
}

// Not Found Error Response
type NotFoundErrorResponse struct {
	// Your unique transaction request message identifier
	MessageReference string
	// Acknowledgement message creation timestamp
	MessageDateTime string
	// Transaction request message code
	MessageCode string
	// Transaction request message code description
	MessageDescription string
}

// Error returns an error description.
func (e *ErrorResponse) Error() string {
	return "Error Response"
}

// ErrorName returns "ErrorResponse".
func (e *ErrorResponse) ErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *MissingCredentials) Error() string {
	return "Missing Credentials"
}

// ErrorName returns "MissingCredentials".
func (e *MissingCredentials) ErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e *MissingCredentialFault) Error() string {
	return ""
}

// ErrorName returns "MissingCredentialFault".
func (e *MissingCredentialFault) ErrorName() string {
	return "MissingCredentialFault"
}

// Error returns an error description.
func (e *AcknowledgementError400) Error() string {
	return "Bad Request Error Response"
}

// ErrorName returns "AcknowledgementError400".
func (e *AcknowledgementError400) ErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *AcknowledgementError403) Error() string {
	return "Forbidden Error Response"
}

// ErrorName returns "AcknowledgementError403".
func (e *AcknowledgementError403) ErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *AcknowledgementError409) Error() string {
	return "Conflict Error Response"
}

// ErrorName returns "AcknowledgementError409".
func (e *AcknowledgementError409) ErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ErrorAcknowledgement) Error() string {
	return "Unauthorized Error Response"
}

// ErrorName returns "ErrorAcknowledgement".
func (e *ErrorAcknowledgement) ErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e *NotFoundErrorResponse) Error() string {
	return "Not Found Error Response"
}

// ErrorName returns "NotFoundErrorResponse".
func (e *NotFoundErrorResponse) ErrorName() string {
	return "not_found"
}

// MakeNotAllowed builds a goa.ServiceError from an error.
func MakeNotAllowed(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_allowed",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewAccountBalanceSuccessResponse initializes result type
// AccountBalanceSuccessResponse from viewed result type
// AccountBalanceSuccessResponse.
func NewAccountBalanceSuccessResponse(vres *connectviews.AccountBalanceSuccessResponse) *AccountBalanceSuccessResponse {
	return newAccountBalanceSuccessResponse(vres.Projected)
}

// NewViewedAccountBalanceSuccessResponse initializes viewed result type
// AccountBalanceSuccessResponse from result type AccountBalanceSuccessResponse
// using the given view.
func NewViewedAccountBalanceSuccessResponse(res *AccountBalanceSuccessResponse, view string) *connectviews.AccountBalanceSuccessResponse {
	p := newAccountBalanceSuccessResponseView(res)
	return &connectviews.AccountBalanceSuccessResponse{Projected: p, View: "default"}
}

// NewAccountFullStatementSuccessResponse initializes result type
// AccountFullStatementSuccessResponse from viewed result type
// AccountFullStatementSuccessResponse.
func NewAccountFullStatementSuccessResponse(vres *connectviews.AccountFullStatementSuccessResponse) *AccountFullStatementSuccessResponse {
	return newAccountFullStatementSuccessResponse(vres.Projected)
}

// NewViewedAccountFullStatementSuccessResponse initializes viewed result type
// AccountFullStatementSuccessResponse from result type
// AccountFullStatementSuccessResponse using the given view.
func NewViewedAccountFullStatementSuccessResponse(res *AccountFullStatementSuccessResponse, view string) *connectviews.AccountFullStatementSuccessResponse {
	p := newAccountFullStatementSuccessResponseView(res)
	return &connectviews.AccountFullStatementSuccessResponse{Projected: p, View: "default"}
}

// NewAccountMiniStatementSuccessResponse initializes result type
// AccountMiniStatementSuccessResponse from viewed result type
// AccountMiniStatementSuccessResponse.
func NewAccountMiniStatementSuccessResponse(vres *connectviews.AccountMiniStatementSuccessResponse) *AccountMiniStatementSuccessResponse {
	return newAccountMiniStatementSuccessResponse(vres.Projected)
}

// NewViewedAccountMiniStatementSuccessResponse initializes viewed result type
// AccountMiniStatementSuccessResponse from result type
// AccountMiniStatementSuccessResponse using the given view.
func NewViewedAccountMiniStatementSuccessResponse(res *AccountMiniStatementSuccessResponse, view string) *connectviews.AccountMiniStatementSuccessResponse {
	p := newAccountMiniStatementSuccessResponseView(res)
	return &connectviews.AccountMiniStatementSuccessResponse{Projected: p, View: "default"}
}

// NewAccountTransactionsSuccessResponse initializes result type
// AccountTransactionsSuccessResponse from viewed result type
// AccountTransactionsSuccessResponse.
func NewAccountTransactionsSuccessResponse(vres *connectviews.AccountTransactionsSuccessResponse) *AccountTransactionsSuccessResponse {
	return newAccountTransactionsSuccessResponse(vres.Projected)
}

// NewViewedAccountTransactionsSuccessResponse initializes viewed result type
// AccountTransactionsSuccessResponse from result type
// AccountTransactionsSuccessResponse using the given view.
func NewViewedAccountTransactionsSuccessResponse(res *AccountTransactionsSuccessResponse, view string) *connectviews.AccountTransactionsSuccessResponse {
	p := newAccountTransactionsSuccessResponseView(res)
	return &connectviews.AccountTransactionsSuccessResponse{Projected: p, View: "default"}
}

// NewAccountValidationSuccessResponse initializes result type
// AccountValidationSuccessResponse from viewed result type
// AccountValidationSuccessResponse.
func NewAccountValidationSuccessResponse(vres *connectviews.AccountValidationSuccessResponse) *AccountValidationSuccessResponse {
	return newAccountValidationSuccessResponse(vres.Projected)
}

// NewViewedAccountValidationSuccessResponse initializes viewed result type
// AccountValidationSuccessResponse from result type
// AccountValidationSuccessResponse using the given view.
func NewViewedAccountValidationSuccessResponse(res *AccountValidationSuccessResponse, view string) *connectviews.AccountValidationSuccessResponse {
	p := newAccountValidationSuccessResponseView(res)
	return &connectviews.AccountValidationSuccessResponse{Projected: p, View: "default"}
}

// NewExchangeRateSuccessResponse initializes result type
// ExchangeRateSuccessResponse from viewed result type
// ExchangeRateSuccessResponse.
func NewExchangeRateSuccessResponse(vres *connectviews.ExchangeRateSuccessResponse) *ExchangeRateSuccessResponse {
	return newExchangeRateSuccessResponse(vres.Projected)
}

// NewViewedExchangeRateSuccessResponse initializes viewed result type
// ExchangeRateSuccessResponse from result type ExchangeRateSuccessResponse
// using the given view.
func NewViewedExchangeRateSuccessResponse(res *ExchangeRateSuccessResponse, view string) *connectviews.ExchangeRateSuccessResponse {
	p := newExchangeRateSuccessResponseView(res)
	return &connectviews.ExchangeRateSuccessResponse{Projected: p, View: "default"}
}

// NewSuccessAcknowledgement initializes result type SuccessAcknowledgement
// from viewed result type SuccessAcknowledgement.
func NewSuccessAcknowledgement(vres *connectviews.SuccessAcknowledgement) *SuccessAcknowledgement {
	return newSuccessAcknowledgement(vres.Projected)
}

// NewViewedSuccessAcknowledgement initializes viewed result type
// SuccessAcknowledgement from result type SuccessAcknowledgement using the
// given view.
func NewViewedSuccessAcknowledgement(res *SuccessAcknowledgement, view string) *connectviews.SuccessAcknowledgement {
	p := newSuccessAcknowledgementView(res)
	return &connectviews.SuccessAcknowledgement{Projected: p, View: "default"}
}

// NewSuccessResponse initializes result type SuccessResponse from viewed
// result type SuccessResponse.
func NewSuccessResponse(vres *connectviews.SuccessResponse) *SuccessResponse {
	return newSuccessResponse(vres.Projected)
}

// NewViewedSuccessResponse initializes viewed result type SuccessResponse from
// result type SuccessResponse using the given view.
func NewViewedSuccessResponse(res *SuccessResponse, view string) *connectviews.SuccessResponse {
	p := newSuccessResponseView(res)
	return &connectviews.SuccessResponse{Projected: p, View: "default"}
}

// newAccountBalanceSuccessResponse converts projected type
// AccountBalanceSuccessResponse to service type AccountBalanceSuccessResponse.
func newAccountBalanceSuccessResponse(vres *connectviews.AccountBalanceSuccessResponseView) *AccountBalanceSuccessResponse {
	res := &AccountBalanceSuccessResponse{
		AccountNumber:    vres.AccountNumber,
		AccountName:      vres.AccountName,
		Currency:         vres.Currency,
		ProductName:      vres.ProductName,
		ClearedBalance:   vres.ClearedBalance,
		BookedBalance:    vres.BookedBalance,
		BlockedBalance:   vres.BlockedBalance,
		AvailableBalance: vres.AvailableBalance,
		ArrearsAmount:    vres.ArrearsAmount,
		BranchName:       vres.BranchName,
		BranchSortCode:   vres.BranchSortCode,
		AverageBalance:   vres.AverageBalance,
		UnclearedBalance: vres.UnclearedBalance,
		ODLimit:          vres.ODLimit,
		CreditLimit:      vres.CreditLimit,
	}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	return res
}

// newAccountBalanceSuccessResponseView projects result type
// AccountBalanceSuccessResponse to projected type
// AccountBalanceSuccessResponseView using the "default" view.
func newAccountBalanceSuccessResponseView(res *AccountBalanceSuccessResponse) *connectviews.AccountBalanceSuccessResponseView {
	vres := &connectviews.AccountBalanceSuccessResponseView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
		Currency:           res.Currency,
		ProductName:        res.ProductName,
		ClearedBalance:     res.ClearedBalance,
		BookedBalance:      res.BookedBalance,
		BlockedBalance:     res.BlockedBalance,
		AvailableBalance:   res.AvailableBalance,
		ArrearsAmount:      res.ArrearsAmount,
		BranchName:         res.BranchName,
		BranchSortCode:     res.BranchSortCode,
		AverageBalance:     res.AverageBalance,
		UnclearedBalance:   res.UnclearedBalance,
		ODLimit:            res.ODLimit,
		CreditLimit:        res.CreditLimit,
	}
	return vres
}

// newAccountFullStatementSuccessResponse converts projected type
// AccountFullStatementSuccessResponse to service type
// AccountFullStatementSuccessResponse.
func newAccountFullStatementSuccessResponse(vres *connectviews.AccountFullStatementSuccessResponseView) *AccountFullStatementSuccessResponse {
	res := &AccountFullStatementSuccessResponse{
		AccountNumber: vres.AccountNumber,
		AccountName:   vres.AccountName,
	}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	if vres.Transactions != nil {
		res.Transactions = make([]*AccountTransaction, len(vres.Transactions))
		for i, val := range vres.Transactions {
			res.Transactions[i] = transformConnectviewsAccountTransactionViewToAccountTransaction(val)
		}
	}
	return res
}

// newAccountFullStatementSuccessResponseView projects result type
// AccountFullStatementSuccessResponse to projected type
// AccountFullStatementSuccessResponseView using the "default" view.
func newAccountFullStatementSuccessResponseView(res *AccountFullStatementSuccessResponse) *connectviews.AccountFullStatementSuccessResponseView {
	vres := &connectviews.AccountFullStatementSuccessResponseView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
	}
	if res.Transactions != nil {
		vres.Transactions = make([]*connectviews.AccountTransactionView, len(res.Transactions))
		for i, val := range res.Transactions {
			vres.Transactions[i] = transformAccountTransactionToConnectviewsAccountTransactionView(val)
		}
	}
	return vres
}

// newAccountMiniStatementSuccessResponse converts projected type
// AccountMiniStatementSuccessResponse to service type
// AccountMiniStatementSuccessResponse.
func newAccountMiniStatementSuccessResponse(vres *connectviews.AccountMiniStatementSuccessResponseView) *AccountMiniStatementSuccessResponse {
	res := &AccountMiniStatementSuccessResponse{
		AccountNumber: vres.AccountNumber,
		AccountName:   vres.AccountName,
	}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	if vres.Transactions != nil {
		res.Transactions = make([]*AccountTransaction, len(vres.Transactions))
		for i, val := range vres.Transactions {
			res.Transactions[i] = transformConnectviewsAccountTransactionViewToAccountTransaction(val)
		}
	}
	return res
}

// newAccountMiniStatementSuccessResponseView projects result type
// AccountMiniStatementSuccessResponse to projected type
// AccountMiniStatementSuccessResponseView using the "default" view.
func newAccountMiniStatementSuccessResponseView(res *AccountMiniStatementSuccessResponse) *connectviews.AccountMiniStatementSuccessResponseView {
	vres := &connectviews.AccountMiniStatementSuccessResponseView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
	}
	if res.Transactions != nil {
		vres.Transactions = make([]*connectviews.AccountTransactionView, len(res.Transactions))
		for i, val := range res.Transactions {
			vres.Transactions[i] = transformAccountTransactionToConnectviewsAccountTransactionView(val)
		}
	}
	return vres
}

// newAccountTransactionsSuccessResponse converts projected type
// AccountTransactionsSuccessResponse to service type
// AccountTransactionsSuccessResponse.
func newAccountTransactionsSuccessResponse(vres *connectviews.AccountTransactionsSuccessResponseView) *AccountTransactionsSuccessResponse {
	res := &AccountTransactionsSuccessResponse{
		AccountNumber:    vres.AccountNumber,
		AccountName:      vres.AccountName,
		NoOfTransactions: vres.NoOfTransactions,
		TotalCredits:     vres.TotalCredits,
		TotalDebits:      vres.TotalDebits,
	}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	if vres.Transactions != nil {
		res.Transactions = make([]*AccountTransaction, len(vres.Transactions))
		for i, val := range vres.Transactions {
			res.Transactions[i] = transformConnectviewsAccountTransactionViewToAccountTransaction(val)
		}
	}
	return res
}

// newAccountTransactionsSuccessResponseView projects result type
// AccountTransactionsSuccessResponse to projected type
// AccountTransactionsSuccessResponseView using the "default" view.
func newAccountTransactionsSuccessResponseView(res *AccountTransactionsSuccessResponse) *connectviews.AccountTransactionsSuccessResponseView {
	vres := &connectviews.AccountTransactionsSuccessResponseView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
		NoOfTransactions:   res.NoOfTransactions,
		TotalCredits:       res.TotalCredits,
		TotalDebits:        res.TotalDebits,
	}
	if res.Transactions != nil {
		vres.Transactions = make([]*connectviews.AccountTransactionView, len(res.Transactions))
		for i, val := range res.Transactions {
			vres.Transactions[i] = transformAccountTransactionToConnectviewsAccountTransactionView(val)
		}
	}
	return vres
}

// newAccountValidationSuccessResponse converts projected type
// AccountValidationSuccessResponse to service type
// AccountValidationSuccessResponse.
func newAccountValidationSuccessResponse(vres *connectviews.AccountValidationSuccessResponseView) *AccountValidationSuccessResponse {
	res := &AccountValidationSuccessResponse{}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	return res
}

// newAccountValidationSuccessResponseView projects result type
// AccountValidationSuccessResponse to projected type
// AccountValidationSuccessResponseView using the "default" view.
func newAccountValidationSuccessResponseView(res *AccountValidationSuccessResponse) *connectviews.AccountValidationSuccessResponseView {
	vres := &connectviews.AccountValidationSuccessResponseView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
	}
	return vres
}

// newExchangeRateSuccessResponse converts projected type
// ExchangeRateSuccessResponse to service type ExchangeRateSuccessResponse.
func newExchangeRateSuccessResponse(vres *connectviews.ExchangeRateSuccessResponseView) *ExchangeRateSuccessResponse {
	res := &ExchangeRateSuccessResponse{
		FromCurrencyCode: vres.FromCurrencyCode,
		ToCurrencyCode:   vres.ToCurrencyCode,
		RateType:         vres.RateType,
		Rate:             vres.Rate,
		Tolerance:        vres.Tolerance,
		MultiplyDivide:   vres.MultiplyDivide,
	}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	return res
}

// newExchangeRateSuccessResponseView projects result type
// ExchangeRateSuccessResponse to projected type
// ExchangeRateSuccessResponseView using the "default" view.
func newExchangeRateSuccessResponseView(res *ExchangeRateSuccessResponse) *connectviews.ExchangeRateSuccessResponseView {
	vres := &connectviews.ExchangeRateSuccessResponseView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
		FromCurrencyCode:   res.FromCurrencyCode,
		ToCurrencyCode:     res.ToCurrencyCode,
		RateType:           res.RateType,
		Rate:               res.Rate,
		Tolerance:          res.Tolerance,
		MultiplyDivide:     res.MultiplyDivide,
	}
	return vres
}

// newSuccessAcknowledgement converts projected type SuccessAcknowledgement to
// service type SuccessAcknowledgement.
func newSuccessAcknowledgement(vres *connectviews.SuccessAcknowledgementView) *SuccessAcknowledgement {
	res := &SuccessAcknowledgement{}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	return res
}

// newSuccessAcknowledgementView projects result type SuccessAcknowledgement to
// projected type SuccessAcknowledgementView using the "default" view.
func newSuccessAcknowledgementView(res *SuccessAcknowledgement) *connectviews.SuccessAcknowledgementView {
	vres := &connectviews.SuccessAcknowledgementView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
	}
	return vres
}

// newSuccessResponse converts projected type SuccessResponse to service type
// SuccessResponse.
func newSuccessResponse(vres *connectviews.SuccessResponseView) *SuccessResponse {
	res := &SuccessResponse{}
	if vres.MessageReference != nil {
		res.MessageReference = *vres.MessageReference
	}
	if vres.MessageDateTime != nil {
		res.MessageDateTime = *vres.MessageDateTime
	}
	if vres.MessageCode != nil {
		res.MessageCode = *vres.MessageCode
	}
	if vres.MessageDescription != nil {
		res.MessageDescription = *vres.MessageDescription
	}
	if vres.Source != nil {
		res.Source = transformConnectviewsSourceAccountViewToSourceAccount(vres.Source)
	}
	if vres.Destinations != nil {
		res.Destinations = make([]*DestinationAccount, len(vres.Destinations))
		for i, val := range vres.Destinations {
			res.Destinations[i] = transformConnectviewsDestinationAccountViewToDestinationAccount(val)
		}
	}
	return res
}

// newSuccessResponseView projects result type SuccessResponse to projected
// type SuccessResponseView using the "default" view.
func newSuccessResponseView(res *SuccessResponse) *connectviews.SuccessResponseView {
	vres := &connectviews.SuccessResponseView{
		MessageReference:   &res.MessageReference,
		MessageDateTime:    &res.MessageDateTime,
		MessageCode:        &res.MessageCode,
		MessageDescription: &res.MessageDescription,
	}
	if res.Source != nil {
		vres.Source = transformSourceAccountToConnectviewsSourceAccountView(res.Source)
	}
	if res.Destinations != nil {
		vres.Destinations = make([]*connectviews.DestinationAccountView, len(res.Destinations))
		for i, val := range res.Destinations {
			vres.Destinations[i] = transformDestinationAccountToConnectviewsDestinationAccountView(val)
		}
	}
	return vres
}

// transformConnectviewsAccountTransactionViewToAccountTransaction builds a
// value of type *AccountTransaction from a value of type
// *connectviews.AccountTransactionView.
func transformConnectviewsAccountTransactionViewToAccountTransaction(v *connectviews.AccountTransactionView) *AccountTransaction {
	if v == nil {
		return nil
	}
	res := &AccountTransaction{
		TransactionID:         v.TransactionID,
		TransactionDate:       v.TransactionDate,
		ValueDate:             v.ValueDate,
		Narration:             v.Narration,
		TransactionType:       v.TransactionType,
		ServicePoint:          v.ServicePoint,
		TransactionReference:  v.TransactionReference,
		CreditAmount:          v.CreditAmount,
		DebitAmount:           v.DebitAmount,
		RunningClearedBalance: v.RunningClearedBalance,
		RunningBookBalance:    v.RunningBookBalance,
		DebitLimit:            v.DebitLimit,
		LimitExpiryDate:       v.LimitExpiryDate,
	}

	return res
}

// transformAccountTransactionToConnectviewsAccountTransactionView builds a
// value of type *connectviews.AccountTransactionView from a value of type
// *AccountTransaction.
func transformAccountTransactionToConnectviewsAccountTransactionView(v *AccountTransaction) *connectviews.AccountTransactionView {
	if v == nil {
		return nil
	}
	res := &connectviews.AccountTransactionView{
		TransactionID:         v.TransactionID,
		TransactionDate:       v.TransactionDate,
		ValueDate:             v.ValueDate,
		Narration:             v.Narration,
		TransactionType:       v.TransactionType,
		ServicePoint:          v.ServicePoint,
		TransactionReference:  v.TransactionReference,
		CreditAmount:          v.CreditAmount,
		DebitAmount:           v.DebitAmount,
		RunningClearedBalance: v.RunningClearedBalance,
		RunningBookBalance:    v.RunningBookBalance,
		DebitLimit:            v.DebitLimit,
		LimitExpiryDate:       v.LimitExpiryDate,
	}

	return res
}

// transformConnectviewsSourceAccountViewToSourceAccount builds a value of type
// *SourceAccount from a value of type *connectviews.SourceAccountView.
func transformConnectviewsSourceAccountViewToSourceAccount(v *connectviews.SourceAccountView) *SourceAccount {
	if v == nil {
		return nil
	}
	res := &SourceAccount{
		AccountNumber:       *v.AccountNumber,
		Amount:              *v.Amount,
		TransactionCurrency: *v.TransactionCurrency,
		Narration:           *v.Narration,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}

// transformConnectviewsDestinationAccountViewToDestinationAccount builds a
// value of type *DestinationAccount from a value of type
// *connectviews.DestinationAccountView.
func transformConnectviewsDestinationAccountViewToDestinationAccount(v *connectviews.DestinationAccountView) *DestinationAccount {
	if v == nil {
		return nil
	}
	res := &DestinationAccount{
		ReferenceNumber:     *v.ReferenceNumber,
		AccountNumber:       *v.AccountNumber,
		MobileNumber:        v.MobileNumber,
		PhoneNumber:         v.PhoneNumber,
		BankCode:            v.BankCode,
		Amount:              *v.Amount,
		TransactionCurrency: *v.TransactionCurrency,
		Narration:           *v.Narration,
		TransactionID:       v.TransactionID,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}

// transformSourceAccountToConnectviewsSourceAccountView builds a value of type
// *connectviews.SourceAccountView from a value of type *SourceAccount.
func transformSourceAccountToConnectviewsSourceAccountView(v *SourceAccount) *connectviews.SourceAccountView {
	res := &connectviews.SourceAccountView{
		AccountNumber:       &v.AccountNumber,
		Amount:              &v.Amount,
		TransactionCurrency: &v.TransactionCurrency,
		Narration:           &v.Narration,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}

// transformDestinationAccountToConnectviewsDestinationAccountView builds a
// value of type *connectviews.DestinationAccountView from a value of type
// *DestinationAccount.
func transformDestinationAccountToConnectviewsDestinationAccountView(v *DestinationAccount) *connectviews.DestinationAccountView {
	res := &connectviews.DestinationAccountView{
		ReferenceNumber:     &v.ReferenceNumber,
		AccountNumber:       &v.AccountNumber,
		MobileNumber:        v.MobileNumber,
		PhoneNumber:         v.PhoneNumber,
		BankCode:            v.BankCode,
		Amount:              &v.Amount,
		TransactionCurrency: &v.TransactionCurrency,
		Narration:           &v.Narration,
		TransactionID:       v.TransactionID,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}
