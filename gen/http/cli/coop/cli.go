// Code generated by goa v3.1.3, DO NOT EDIT.
//
// coop HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	connectc "github.com/wondenge/coop-go/gen/http/connect/client"
	healthc "github.com/wondenge/coop-go/gen/http/health/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `health show
connect (account-balance|account-full-statement|account-mini-statement|account-transactions|account-validation|exchange-rate|ift-account-to-account|ins-simulation|pesa-link-send-to-account|pesa-link-send-to-phone|send-to-m-pesa|transaction-status)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` health show` + "\n" +
		os.Args[0] + ` connect account-balance --body '{
      "AccountNumber": "36001873000",
      "MessageReference": "40ca18c6765086089a1"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthShowFlags = flag.NewFlagSet("show", flag.ExitOnError)

		connectFlags = flag.NewFlagSet("connect", flag.ContinueOnError)

		connectAccountBalanceFlags           = flag.NewFlagSet("account-balance", flag.ExitOnError)
		connectAccountBalanceBodyFlag        = connectAccountBalanceFlags.String("body", "REQUIRED", "")
		connectAccountBalanceAccessTokenFlag = connectAccountBalanceFlags.String("access-token", "REQUIRED", "")

		connectAccountFullStatementFlags           = flag.NewFlagSet("account-full-statement", flag.ExitOnError)
		connectAccountFullStatementBodyFlag        = connectAccountFullStatementFlags.String("body", "REQUIRED", "")
		connectAccountFullStatementAccessTokenFlag = connectAccountFullStatementFlags.String("access-token", "REQUIRED", "")

		connectAccountMiniStatementFlags           = flag.NewFlagSet("account-mini-statement", flag.ExitOnError)
		connectAccountMiniStatementBodyFlag        = connectAccountMiniStatementFlags.String("body", "REQUIRED", "")
		connectAccountMiniStatementAccessTokenFlag = connectAccountMiniStatementFlags.String("access-token", "REQUIRED", "")

		connectAccountTransactionsFlags           = flag.NewFlagSet("account-transactions", flag.ExitOnError)
		connectAccountTransactionsBodyFlag        = connectAccountTransactionsFlags.String("body", "REQUIRED", "")
		connectAccountTransactionsAccessTokenFlag = connectAccountTransactionsFlags.String("access-token", "REQUIRED", "")

		connectAccountValidationFlags           = flag.NewFlagSet("account-validation", flag.ExitOnError)
		connectAccountValidationBodyFlag        = connectAccountValidationFlags.String("body", "REQUIRED", "")
		connectAccountValidationAccessTokenFlag = connectAccountValidationFlags.String("access-token", "REQUIRED", "")

		connectExchangeRateFlags           = flag.NewFlagSet("exchange-rate", flag.ExitOnError)
		connectExchangeRateBodyFlag        = connectExchangeRateFlags.String("body", "REQUIRED", "")
		connectExchangeRateAccessTokenFlag = connectExchangeRateFlags.String("access-token", "REQUIRED", "")

		connectIFTAccountToAccountFlags           = flag.NewFlagSet("ift-account-to-account", flag.ExitOnError)
		connectIFTAccountToAccountBodyFlag        = connectIFTAccountToAccountFlags.String("body", "REQUIRED", "")
		connectIFTAccountToAccountAccessTokenFlag = connectIFTAccountToAccountFlags.String("access-token", "REQUIRED", "")

		connectINSSimulationFlags           = flag.NewFlagSet("ins-simulation", flag.ExitOnError)
		connectINSSimulationBodyFlag        = connectINSSimulationFlags.String("body", "REQUIRED", "")
		connectINSSimulationAccessTokenFlag = connectINSSimulationFlags.String("access-token", "REQUIRED", "")

		connectPesaLinkSendToAccountFlags           = flag.NewFlagSet("pesa-link-send-to-account", flag.ExitOnError)
		connectPesaLinkSendToAccountBodyFlag        = connectPesaLinkSendToAccountFlags.String("body", "REQUIRED", "")
		connectPesaLinkSendToAccountAccessTokenFlag = connectPesaLinkSendToAccountFlags.String("access-token", "REQUIRED", "")

		connectPesaLinkSendToPhoneFlags           = flag.NewFlagSet("pesa-link-send-to-phone", flag.ExitOnError)
		connectPesaLinkSendToPhoneBodyFlag        = connectPesaLinkSendToPhoneFlags.String("body", "REQUIRED", "")
		connectPesaLinkSendToPhoneAccessTokenFlag = connectPesaLinkSendToPhoneFlags.String("access-token", "REQUIRED", "")

		connectSendToMPesaFlags           = flag.NewFlagSet("send-to-m-pesa", flag.ExitOnError)
		connectSendToMPesaBodyFlag        = connectSendToMPesaFlags.String("body", "REQUIRED", "")
		connectSendToMPesaAccessTokenFlag = connectSendToMPesaFlags.String("access-token", "REQUIRED", "")

		connectTransactionStatusFlags           = flag.NewFlagSet("transaction-status", flag.ExitOnError)
		connectTransactionStatusBodyFlag        = connectTransactionStatusFlags.String("body", "REQUIRED", "")
		connectTransactionStatusAccessTokenFlag = connectTransactionStatusFlags.String("access-token", "REQUIRED", "")
	)
	healthFlags.Usage = healthUsage
	healthShowFlags.Usage = healthShowUsage

	connectFlags.Usage = connectUsage
	connectAccountBalanceFlags.Usage = connectAccountBalanceUsage
	connectAccountFullStatementFlags.Usage = connectAccountFullStatementUsage
	connectAccountMiniStatementFlags.Usage = connectAccountMiniStatementUsage
	connectAccountTransactionsFlags.Usage = connectAccountTransactionsUsage
	connectAccountValidationFlags.Usage = connectAccountValidationUsage
	connectExchangeRateFlags.Usage = connectExchangeRateUsage
	connectIFTAccountToAccountFlags.Usage = connectIFTAccountToAccountUsage
	connectINSSimulationFlags.Usage = connectINSSimulationUsage
	connectPesaLinkSendToAccountFlags.Usage = connectPesaLinkSendToAccountUsage
	connectPesaLinkSendToPhoneFlags.Usage = connectPesaLinkSendToPhoneUsage
	connectSendToMPesaFlags.Usage = connectSendToMPesaUsage
	connectTransactionStatusFlags.Usage = connectTransactionStatusUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "health":
			svcf = healthFlags
		case "connect":
			svcf = connectFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "health":
			switch epn {
			case "show":
				epf = healthShowFlags

			}

		case "connect":
			switch epn {
			case "account-balance":
				epf = connectAccountBalanceFlags

			case "account-full-statement":
				epf = connectAccountFullStatementFlags

			case "account-mini-statement":
				epf = connectAccountMiniStatementFlags

			case "account-transactions":
				epf = connectAccountTransactionsFlags

			case "account-validation":
				epf = connectAccountValidationFlags

			case "exchange-rate":
				epf = connectExchangeRateFlags

			case "ift-account-to-account":
				epf = connectIFTAccountToAccountFlags

			case "ins-simulation":
				epf = connectINSSimulationFlags

			case "pesa-link-send-to-account":
				epf = connectPesaLinkSendToAccountFlags

			case "pesa-link-send-to-phone":
				epf = connectPesaLinkSendToPhoneFlags

			case "send-to-m-pesa":
				epf = connectSendToMPesaFlags

			case "transaction-status":
				epf = connectTransactionStatusFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data = nil
			}
		case "connect":
			c := connectc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "account-balance":
				endpoint = c.AccountBalance()
				data, err = connectc.BuildAccountBalancePayload(*connectAccountBalanceBodyFlag, *connectAccountBalanceAccessTokenFlag)
			case "account-full-statement":
				endpoint = c.AccountFullStatement()
				data, err = connectc.BuildAccountFullStatementPayload(*connectAccountFullStatementBodyFlag, *connectAccountFullStatementAccessTokenFlag)
			case "account-mini-statement":
				endpoint = c.AccountMiniStatement()
				data, err = connectc.BuildAccountMiniStatementPayload(*connectAccountMiniStatementBodyFlag, *connectAccountMiniStatementAccessTokenFlag)
			case "account-transactions":
				endpoint = c.AccountTransactions()
				data, err = connectc.BuildAccountTransactionsPayload(*connectAccountTransactionsBodyFlag, *connectAccountTransactionsAccessTokenFlag)
			case "account-validation":
				endpoint = c.AccountValidation()
				data, err = connectc.BuildAccountValidationPayload(*connectAccountValidationBodyFlag, *connectAccountValidationAccessTokenFlag)
			case "exchange-rate":
				endpoint = c.ExchangeRate()
				data, err = connectc.BuildExchangeRatePayload(*connectExchangeRateBodyFlag, *connectExchangeRateAccessTokenFlag)
			case "ift-account-to-account":
				endpoint = c.IFTAccountToAccount()
				data, err = connectc.BuildIFTAccountToAccountPayload(*connectIFTAccountToAccountBodyFlag, *connectIFTAccountToAccountAccessTokenFlag)
			case "ins-simulation":
				endpoint = c.INSSimulation()
				data, err = connectc.BuildINSSimulationPayload(*connectINSSimulationBodyFlag, *connectINSSimulationAccessTokenFlag)
			case "pesa-link-send-to-account":
				endpoint = c.PesaLinkSendToAccount()
				data, err = connectc.BuildPesaLinkSendToAccountPayload(*connectPesaLinkSendToAccountBodyFlag, *connectPesaLinkSendToAccountAccessTokenFlag)
			case "pesa-link-send-to-phone":
				endpoint = c.PesaLinkSendToPhone()
				data, err = connectc.BuildPesaLinkSendToPhonePayload(*connectPesaLinkSendToPhoneBodyFlag, *connectPesaLinkSendToPhoneAccessTokenFlag)
			case "send-to-m-pesa":
				endpoint = c.SendToMPesa()
				data, err = connectc.BuildSendToMPesaPayload(*connectSendToMPesaBodyFlag, *connectSendToMPesaAccessTokenFlag)
			case "transaction-status":
				endpoint = c.TransactionStatus()
				data, err = connectc.BuildTransactionStatusPayload(*connectTransactionStatusBodyFlag, *connectTransactionStatusAccessTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Service is the health service interface.
Usage:
    %s [globalflags] health COMMAND [flags]

COMMAND:
    show: Health check endpoint.

Additional help:
    %s health COMMAND --help
`, os.Args[0], os.Args[0])
}
func healthShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] health show

Health check endpoint.

Example:
    `+os.Args[0]+` health show
`, os.Args[0])
}

// connectUsage displays the usage of the connect command and its subcommands.
func connectUsage() {
	fmt.Fprintf(os.Stderr, `Service is the connect service interface.
Usage:
    %s [globalflags] connect COMMAND [flags]

COMMAND:
    account-balance: Post an Account Balance Enquiry Request
    account-full-statement: Post an Account Full Statement Enquiry Request
    account-mini-statement: Post an Account Mini Statement Enquiry Request
    account-transactions: Post an Account Transactions Enquiry Request
    account-validation: Post an Account Validation Enquiry Request
    exchange-rate: Post an Exchange Rate Enquiry Request
    ift-account-to-account: Post an Internal Funds Transfer Account to Account Transaction
    ins-simulation: Post a Debit/Credit Account Transaction Event Type Notification Simulation Request
    pesa-link-send-to-account: Post a PesaLink Funds Transfer Send to Account Transaction
    pesa-link-send-to-phone: Post a PesaLink Funds Transfer Send to Phone Transaction
    send-to-m-pesa: Post a Send To M-Pesa Funds Transfer Transaction
    transaction-status: Post a Transaction Status Enquiry Request

Additional help:
    %s connect COMMAND --help
`, os.Args[0], os.Args[0])
}
func connectAccountBalanceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect account-balance -body JSON -access-token STRING

Post an Account Balance Enquiry Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect account-balance --body '{
      "AccountNumber": "36001873000",
      "MessageReference": "40ca18c6765086089a1"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectAccountFullStatementUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect account-full-statement -body JSON -access-token STRING

Post an Account Full Statement Enquiry Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect account-full-statement --body '{
      "AccountNumber": "36001873000",
      "EndDate": "2019-07-01",
      "MessageReference": "40ca18c6765086089a1",
      "StartDate": "2019-01-01"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectAccountMiniStatementUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect account-mini-statement -body JSON -access-token STRING

Post an Account Mini Statement Enquiry Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect account-mini-statement --body '{
      "AccountNumber": "36001873000",
      "MessageReference": "40ca18c6765086089a1"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectAccountTransactionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect account-transactions -body JSON -access-token STRING

Post an Account Transactions Enquiry Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect account-transactions --body '{
      "AccountNumber": "36001873000",
      "MessageReference": "40ca18c6765086089a1",
      "NoOfTransactions": 1
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectAccountValidationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect account-validation -body JSON -access-token STRING

Post an Account Validation Enquiry Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect account-validation --body '{
      "AccountNumber": "36001873000",
      "MessageReference": "40ca18c6765086089a1"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectExchangeRateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect exchange-rate -body JSON -access-token STRING

Post an Exchange Rate Enquiry Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect exchange-rate --body '{
      "FromCurrencyCode": "KES",
      "MessageReference": "40ca18c6765086089a1",
      "ToCurrencyCode": "USD"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectIFTAccountToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect ift-account-to-account -body JSON -access-token STRING

Post an Internal Funds Transfer Account to Account Transaction
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect ift-account-to-account --body '{
      "CallBackUrl": "https://yourdomain.com/ftresponse",
      "Destinations": {
         "DestinationsTXNRequest": [
            {
               "AccountNumber": "54321987654321",
               "Amount": 777,
               "Narration": "Supplier Payment",
               "ReferenceNumber": "40ca18c6765086089a1_1",
               "TransactionCurrency": "KES"
            }
         ]
      },
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "36001873000",
         "Amount": 777,
         "Narration": "Supplier Payment",
         "TransactionCurrency": "KES"
      }
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectINSSimulationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect ins-simulation -body JSON -access-token STRING

Post a Debit/Credit Account Transaction Event Type Notification Simulation Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect ins-simulation --body '{
      "AccountNumber": "54321987654321",
      "Amount": 120777.45,
      "Currency": "USD",
      "CustMemo": {
         "CustMemoLine1": "728210595 ABD01",
         "CustMemoLine2": "Expedita fuga.",
         "CustMemoLine3": "Temporibus delectus eius."
      },
      "EntryDate": "20190301",
      "EventType": "DEBIT",
      "ExchangeRate": 1,
      "MessageDateTime": "2017-12-04T09:27:00",
      "MessageReference": "40ca18c6765086089a1",
      "Narration": "Supplier Payments",
      "NotificationCode": "Quaerat delectus aut dolore minus est.",
      "PaymentRef": "SFI427E9136D7D3F21C2C89",
      "ServiceName": "Voluptatem voluptas culpa sunt natus libero voluptatem.",
      "TransactionDate": "20190301165420",
      "TransactionId": "1169716b65891lI6",
      "ValueDate": "20190301"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectPesaLinkSendToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect pesa-link-send-to-account -body JSON -access-token STRING

Post a PesaLink Funds Transfer Send to Account Transaction
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect pesa-link-send-to-account --body '{
      "CallBackUrl": "https://yourdomain.com/ft-callback",
      "Destinations": {
         "DestinationAccountTransactionRequest": [
            {
               "Amount": 777,
               "MobileNumber": "07xxxxxxxx",
               "Narration": "Stationary Payment",
               "ReferenceNumber": "40ca18c6765086089a1_1"
            },
            {
               "Amount": 777,
               "MobileNumber": "07xxxxxxxx",
               "Narration": "Stationary Payment",
               "ReferenceNumber": "40ca18c6765086089a1_1"
            }
         ]
      },
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "36001873000",
         "Amount": 777,
         "Narration": "Supplier Payment",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectPesaLinkSendToPhoneUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect pesa-link-send-to-phone -body JSON -access-token STRING

Post a PesaLink Funds Transfer Send to Phone Transaction
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect pesa-link-send-to-phone --body '{
      "CallBackUrl": "https://yourdomain.com/ft-callback",
      "Destinations": {
         "DestinationAccountTransactionRequest": [
            {
               "Amount": 777,
               "MobileNumber": "07xxxxxxxx",
               "Narration": "Stationary Payment",
               "ReferenceNumber": "40ca18c6765086089a1_1"
            },
            {
               "Amount": 777,
               "MobileNumber": "07xxxxxxxx",
               "Narration": "Stationary Payment",
               "ReferenceNumber": "40ca18c6765086089a1_1"
            }
         ]
      },
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "36001873000",
         "Amount": 777,
         "Narration": "Supplier Payment",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectSendToMPesaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect send-to-m-pesa -body JSON -access-token STRING

Post a Send To M-Pesa Funds Transfer Transaction
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect send-to-m-pesa --body '{
      "CallBackUrl": "https://yourdomain.com/ft-callback",
      "Destinations": {
         "DestinationAccountTransactionRequest": [
            {
               "Amount": 777,
               "MobileNumber": "07xxxxxxxx",
               "Narration": "Stationary Payment",
               "ReferenceNumber": "40ca18c6765086089a1_1"
            },
            {
               "Amount": 777,
               "MobileNumber": "07xxxxxxxx",
               "Narration": "Stationary Payment",
               "ReferenceNumber": "40ca18c6765086089a1_1"
            }
         ]
      },
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "36001873000",
         "Amount": 777,
         "Narration": "Supplier Payment",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}

func connectTransactionStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect transaction-status -body JSON -access-token STRING

Post a Transaction Status Enquiry Request
    -body JSON: 
    -access-token STRING: 

Example:
    `+os.Args[0]+` connect transaction-status --body '{
      "MessageReference": "40ca18c6765086089a1"
   }' --access-token "1c9f6c4b-625c-3255-ba1a-026df12ab648"
`, os.Args[0])
}
