// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP client types
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package client

import (
	"unicode/utf8"

	connect "github.com/wondenge/coop-go/gen/connect"
	connectviews "github.com/wondenge/coop-go/gen/connect/views"
	goa "goa.design/goa/v3/pkg"
)

// AccountBalanceRequestBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP request body.
type AccountBalanceRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
}

// AccountFullStatementRequestBody is the type of the "connect" service
// "AccountFullStatement" endpoint HTTP request body.
type AccountFullStatementRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// Statement Start Date
	StartDate string `form:"StartDate" json:"StartDate" xml:"StartDate"`
	// Statement End Date
	EndDate string `form:"EndDate" json:"EndDate" xml:"EndDate"`
}

// AccountMiniStatementRequestBody is the type of the "connect" service
// "AccountMiniStatement" endpoint HTTP request body.
type AccountMiniStatementRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
}

// AccountTransactionsRequestBody is the type of the "connect" service
// "AccountTransactions" endpoint HTTP request body.
type AccountTransactionsRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// No Of Latest Transactions To Be Returned
	NoOfTransactions int `form:"NoOfTransactions" json:"NoOfTransactions" xml:"NoOfTransactions"`
}

// AccountValidationRequestBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP request body.
type AccountValidationRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
}

// ExchangeRateRequestBody is the type of the "connect" service "ExchangeRate"
// endpoint HTTP request body.
type ExchangeRateRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// From Currency Code in ISO Currency Code
	FromCurrencyCode string `form:"FromCurrencyCode" json:"FromCurrencyCode" xml:"FromCurrencyCode"`
	// To Currency Code in ISO Currency Code
	ToCurrencyCode string `form:"ToCurrencyCode" json:"ToCurrencyCode" xml:"ToCurrencyCode"`
}

// IFTAccountToAccountRequestBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP request body.
type IFTAccountToAccountRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  string                              `form:"CallBackUrl" json:"CallBackUrl" xml:"CallBackUrl"`
	Source       *SourceAccountTXNRequestRequestBody `form:"Source" json:"Source" xml:"Source"`
	Destinations *DestinationsTXNRequestRequestBody  `form:"Destinations" json:"Destinations" xml:"Destinations"`
}

// INSSimulationRequestBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP request body.
type INSSimulationRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Notification Service Name identifier
	ServiceName *string `form:"ServiceName,omitempty" json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// Notification Code identifier
	NotificationCode *string `form:"NotificationCode,omitempty" json:"NotificationCode,omitempty" xml:"NotificationCode,omitempty"`
	// Transaction Payment Reference
	PaymentRef string `form:"PaymentRef" json:"PaymentRef" xml:"PaymentRef"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// Transaction Amount
	Amount float64 `form:"Amount" json:"Amount" xml:"Amount"`
	// Posting date of the Transaction
	TransactionDate string `form:"TransactionDate" json:"TransactionDate" xml:"TransactionDate"`
	// The event of the transaction
	EventType string `form:"EventType" json:"EventType" xml:"EventType"`
	// Transaction Posting account currency in ISO Currency Code
	Currency string `form:"Currency" json:"Currency" xml:"Currency"`
	// Exchange Rate
	ExchangeRate uint64 `form:"ExchangeRate" json:"ExchangeRate" xml:"ExchangeRate"`
	// Transaction Posting account narration
	Narration string               `form:"Narration" json:"Narration" xml:"Narration"`
	CustMemo  *CustMemoRequestBody `form:"CustMemo" json:"CustMemo" xml:"CustMemo"`
	// Transaction Posting Value Date
	ValueDate string `form:"ValueDate" json:"ValueDate" xml:"ValueDate"`
	// Transaction Posting Entry Date
	EntryDate string `form:"EntryDate" json:"EntryDate" xml:"EntryDate"`
	// Co-operative Bank's processed transaction number
	TransactionID string `form:"TransactionId" json:"TransactionId" xml:"TransactionId"`
}

// PesaLinkSendToAccountRequestBody is the type of the "connect" service
// "PesaLinkSendToAccount" endpoint HTTP request body.
type PesaLinkSendToAccountRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  string                                      `form:"CallBackUrl" json:"CallBackUrl" xml:"CallBackUrl"`
	Source       *SourceAccountTransactionRequestRequestBody `form:"Source" json:"Source" xml:"Source"`
	Destinations *DestinationsTransactionRequestRequestBody  `form:"Destinations" json:"Destinations" xml:"Destinations"`
}

// PesaLinkSendToPhoneRequestBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP request body.
type PesaLinkSendToPhoneRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  string                                      `form:"CallBackUrl" json:"CallBackUrl" xml:"CallBackUrl"`
	Source       *SourceAccountTransactionRequestRequestBody `form:"Source" json:"Source" xml:"Source"`
	Destinations *DestinationsTransactionRequestRequestBody  `form:"Destinations" json:"Destinations" xml:"Destinations"`
}

// SendToMPesaRequestBody is the type of the "connect" service "SendToMPesa"
// endpoint HTTP request body.
type SendToMPesaRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  string                                      `form:"CallBackUrl" json:"CallBackUrl" xml:"CallBackUrl"`
	Source       *SourceAccountTransactionRequestRequestBody `form:"Source" json:"Source" xml:"Source"`
	Destinations *DestinationsTransactionRequestRequestBody  `form:"Destinations" json:"Destinations" xml:"Destinations"`
}

// TransactionStatusRequestBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP request body.
type TransactionStatusRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
}

// AccountBalanceResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body.
type AccountBalanceResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName *string `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// Account currency in ISO Currency Code
	Currency *string `form:"Currency,omitempty" json:"Currency,omitempty" xml:"Currency,omitempty"`
	// Posting account number
	ProductName *string `form:"ProductName,omitempty" json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// Cleared Balance Amount
	ClearedBalance *float64 `form:"ClearedBalance,omitempty" json:"ClearedBalance,omitempty" xml:"ClearedBalance,omitempty"`
	// Cleared Balance Amount
	BookedBalance *float64 `form:"BookedBalance,omitempty" json:"BookedBalance,omitempty" xml:"BookedBalance,omitempty"`
	// Cleared Balance Amount
	BlockedBalance *float64 `form:"BlockedBalance,omitempty" json:"BlockedBalance,omitempty" xml:"BlockedBalance,omitempty"`
	// Cleared Balance Amount
	AvailableBalance *float64 `form:"AvailableBalance,omitempty" json:"AvailableBalance,omitempty" xml:"AvailableBalance,omitempty"`
	// Cleared Balance Amount
	ArrearsAmount *float64 `form:"ArrearsAmount,omitempty" json:"ArrearsAmount,omitempty" xml:"ArrearsAmount,omitempty"`
	// Posting account number
	BranchName *string `form:"BranchName,omitempty" json:"BranchName,omitempty" xml:"BranchName,omitempty"`
	// Posting account number
	BranchSortCode *string `form:"BranchSortCode,omitempty" json:"BranchSortCode,omitempty" xml:"BranchSortCode,omitempty"`
	// Cleared Balance Amount
	AverageBalance *float64 `form:"AverageBalance,omitempty" json:"AverageBalance,omitempty" xml:"AverageBalance,omitempty"`
	// Cleared Balance Amount
	UnclearedBalance *float64 `form:"UnclearedBalance,omitempty" json:"UnclearedBalance,omitempty" xml:"UnclearedBalance,omitempty"`
	// Cleared Balance Amount
	ODLimit *float64 `form:"ODLimit,omitempty" json:"ODLimit,omitempty" xml:"ODLimit,omitempty"`
	// Cleared Balance Amount
	CreditLimit *float64 `form:"CreditLimit,omitempty" json:"CreditLimit,omitempty" xml:"CreditLimit,omitempty"`
}

// AccountFullStatementResponseBody is the type of the "connect" service
// "AccountFullStatement" endpoint HTTP response body.
type AccountFullStatementResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Acknowledgement/Response Message Code Description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName  *string                           `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Transactions []*AccountTransactionResponseBody `form:"Transactions,omitempty" json:"Transactions,omitempty" xml:"Transactions,omitempty"`
}

// AccountMiniStatementResponseBody is the type of the "connect" service
// "AccountMiniStatement" endpoint HTTP response body.
type AccountMiniStatementResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Acknowledgement/Response Message Code Description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName  *string                           `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Transactions []*AccountTransactionResponseBody `form:"Transactions,omitempty" json:"Transactions,omitempty" xml:"Transactions,omitempty"`
}

// AccountTransactionsResponseBody is the type of the "connect" service
// "AccountTransactions" endpoint HTTP response body.
type AccountTransactionsResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Acknowledgement/Response Message Code Description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName *string `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// No Of Latest Transactions To Be Returned
	NoOfTransactions *int `form:"NoOfTransactions,omitempty" json:"NoOfTransactions,omitempty" xml:"NoOfTransactions,omitempty"`
	// Total Credits Amount
	TotalCredits *float64 `form:"TotalCredits,omitempty" json:"TotalCredits,omitempty" xml:"TotalCredits,omitempty"`
	// Total Debits Amount
	TotalDebits  *float64                          `form:"TotalDebits,omitempty" json:"TotalDebits,omitempty" xml:"TotalDebits,omitempty"`
	Transactions []*AccountTransactionResponseBody `form:"Transactions,omitempty" json:"Transactions,omitempty" xml:"Transactions,omitempty"`
}

// AccountValidationResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body.
type AccountValidationResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// ExchangeRateResponseBody is the type of the "connect" service "ExchangeRate"
// endpoint HTTP response body.
type ExchangeRateResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	// From Currency Code in ISO Currency Code
	FromCurrencyCode *string `form:"FromCurrencyCode,omitempty" json:"FromCurrencyCode,omitempty" xml:"FromCurrencyCode,omitempty"`
	// To Currency Code in ISO Currency Code
	ToCurrencyCode *string `form:"ToCurrencyCode,omitempty" json:"ToCurrencyCode,omitempty" xml:"ToCurrencyCode,omitempty"`
	// Exchange rate type
	RateType *string `form:"RateType,omitempty" json:"RateType,omitempty" xml:"RateType,omitempty"`
	// Exchange rate amount
	Rate *float64 `form:"Rate,omitempty" json:"Rate,omitempty" xml:"Rate,omitempty"`
	// Exchange rate tolerance
	Tolerance *float64 `form:"Tolerance,omitempty" json:"Tolerance,omitempty" xml:"Tolerance,omitempty"`
	// Exchange rate is a multiply or a divide
	MultiplyDivide *string `form:"MultiplyDivide,omitempty" json:"MultiplyDivide,omitempty" xml:"MultiplyDivide,omitempty"`
}

// IFTAccountToAccountResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body.
type IFTAccountToAccountResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Acknowledgement/Response Message Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// INSSimulationResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body.
type INSSimulationResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Acknowledgement/Response Message Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToAccountResponseBody is the type of the "connect" service
// "PesaLinkSendToAccount" endpoint HTTP response body.
type PesaLinkSendToAccountResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Acknowledgement/Response Message Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToPhoneResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body.
type PesaLinkSendToPhoneResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Acknowledgement/Response Message Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// SendToMPesaResponseBody is the type of the "connect" service "SendToMPesa"
// endpoint HTTP response body.
type SendToMPesaResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Acknowledgement/Response Message Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// TransactionStatusOKResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body.
type TransactionStatusOKResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Acknowledgement/Response Message Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string                           `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	Source             *SourceAccountResponseBody        `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations       []*DestinationAccountResponseBody `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// TokenResponseBody is the type of the "connect" service "token" endpoint HTTP
// response body.
type TokenResponseBody struct {
	// JWT token
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
}

// AccountBalanceBadRequestResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "bad_request" error.
type AccountBalanceBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// AccountBalanceUnauthorizedResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "unauthorized" error.
type AccountBalanceUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountBalanceNotAllowedResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "not_allowed" error.
type AccountBalanceNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountBalanceTimeoutResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "timeout" error.
type AccountBalanceTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountFullStatementBadRequestResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "bad_request" error.
type AccountFullStatementBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// AccountFullStatementUnauthorizedResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "unauthorized" error.
type AccountFullStatementUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountFullStatementNotFoundResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "not_found" error.
type AccountFullStatementNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountFullStatementNotAllowedResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "not_allowed" error.
type AccountFullStatementNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountFullStatementTimeoutResponseBody is the type of the "connect" service
// "AccountFullStatement" endpoint HTTP response body for the "timeout" error.
type AccountFullStatementTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountMiniStatementBadRequestResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "bad_request" error.
type AccountMiniStatementBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// AccountMiniStatementUnauthorizedResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "unauthorized" error.
type AccountMiniStatementUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountMiniStatementNotFoundResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "not_found" error.
type AccountMiniStatementNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountMiniStatementNotAllowedResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "not_allowed" error.
type AccountMiniStatementNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountMiniStatementTimeoutResponseBody is the type of the "connect" service
// "AccountMiniStatement" endpoint HTTP response body for the "timeout" error.
type AccountMiniStatementTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountTransactionsBadRequestResponseBody is the type of the "connect"
// service "AccountTransactions" endpoint HTTP response body for the
// "bad_request" error.
type AccountTransactionsBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// AccountTransactionsUnauthorizedResponseBody is the type of the "connect"
// service "AccountTransactions" endpoint HTTP response body for the
// "unauthorized" error.
type AccountTransactionsUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountTransactionsNotAllowedResponseBody is the type of the "connect"
// service "AccountTransactions" endpoint HTTP response body for the
// "not_allowed" error.
type AccountTransactionsNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountTransactionsTimeoutResponseBody is the type of the "connect" service
// "AccountTransactions" endpoint HTTP response body for the "timeout" error.
type AccountTransactionsTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountValidationBadRequestResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "bad_request" error.
type AccountValidationBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// AccountValidationUnauthorizedResponseBody is the type of the "connect"
// service "AccountValidation" endpoint HTTP response body for the
// "unauthorized" error.
type AccountValidationUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountValidationNotFoundResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "not_found" error.
type AccountValidationNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountValidationNotAllowedResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "not_allowed" error.
type AccountValidationNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountValidationTimeoutResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "timeout" error.
type AccountValidationTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ExchangeRateBadRequestResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "bad_request" error.
type ExchangeRateBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// ExchangeRateUnauthorizedResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "unauthorized" error.
type ExchangeRateUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// ExchangeRateNotFoundResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "not_found" error.
type ExchangeRateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ExchangeRateNotAllowedResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "not_allowed" error.
type ExchangeRateNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ExchangeRateTimeoutResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "timeout" error.
type ExchangeRateTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IFTAccountToAccountBadRequestResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "bad_request" error.
type IFTAccountToAccountBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// IFTAccountToAccountForbiddenResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "forbidden" error.
type IFTAccountToAccountForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// IFTAccountToAccountConflictResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body for the "conflict" error.
type IFTAccountToAccountConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// IFTAccountToAccountUnauthorizedResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "unauthorized" error.
type IFTAccountToAccountUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// IFTAccountToAccountNotFoundResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body for the "not_found" error.
type IFTAccountToAccountNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IFTAccountToAccountNotAllowedResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "not_allowed" error.
type IFTAccountToAccountNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IFTAccountToAccountTimeoutResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body for the "timeout" error.
type IFTAccountToAccountTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// INSSimulationUnauthorizedResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "unauthorized" error.
type INSSimulationUnauthorizedResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// INSSimulationBadRequestResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "bad_request" error.
type INSSimulationBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// INSSimulationNotAllowedResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "not_allowed" error.
type INSSimulationNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// INSSimulationTimeoutResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "timeout" error.
type INSSimulationTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PesaLinkSendToAccountBadRequestResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "bad_request" error.
type PesaLinkSendToAccountBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToAccountForbiddenResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "forbidden" error.
type PesaLinkSendToAccountForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToAccountConflictResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "conflict" error.
type PesaLinkSendToAccountConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToAccountUnauthorizedResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "unauthorized" error.
type PesaLinkSendToAccountUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// PesaLinkSendToAccountNotFoundResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "not_found" error.
type PesaLinkSendToAccountNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PesaLinkSendToAccountNotAllowedResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "not_allowed" error.
type PesaLinkSendToAccountNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PesaLinkSendToAccountTimeoutResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "timeout" error.
type PesaLinkSendToAccountTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PesaLinkSendToPhoneBadRequestResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "bad_request" error.
type PesaLinkSendToPhoneBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToPhoneForbiddenResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "forbidden" error.
type PesaLinkSendToPhoneForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToPhoneConflictResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body for the "conflict" error.
type PesaLinkSendToPhoneConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// PesaLinkSendToPhoneUnauthorizedResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "unauthorized" error.
type PesaLinkSendToPhoneUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// PesaLinkSendToPhoneNotFoundResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body for the "not_found" error.
type PesaLinkSendToPhoneNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PesaLinkSendToPhoneNotAllowedResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "not_allowed" error.
type PesaLinkSendToPhoneNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PesaLinkSendToPhoneTimeoutResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body for the "timeout" error.
type PesaLinkSendToPhoneTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SendToMPesaBadRequestResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "bad_request" error.
type SendToMPesaBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// SendToMPesaForbiddenResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "forbidden" error.
type SendToMPesaForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// SendToMPesaConflictResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "conflict" error.
type SendToMPesaConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// SendToMPesaUnauthorizedResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "unauthorized" error.
type SendToMPesaUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// SendToMPesaNotFoundResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "not_found" error.
type SendToMPesaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SendToMPesaNotAllowedResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "not_allowed" error.
type SendToMPesaNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SendToMPesaTimeoutResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "timeout" error.
type SendToMPesaTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TransactionStatusBadRequestResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "bad_request" error.
type TransactionStatusBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// TransactionStatusUnauthorizedResponseBody is the type of the "connect"
// service "TransactionStatus" endpoint HTTP response body for the
// "unauthorized" error.
type TransactionStatusUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// TransactionStatusNotFoundResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "not_found" error.
type TransactionStatusNotFoundResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Transaction request message code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Transaction request message code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
}

// TransactionStatusNotAllowedResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "not_allowed" error.
type TransactionStatusNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TransactionStatusTimeoutResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "timeout" error.
type TransactionStatusTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MissingCredentialFaultResponseBody is used to define fields on response body
// types.
type MissingCredentialFaultResponseBody struct {
	Code        *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message     *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// AccountTransactionResponseBody is used to define fields on response body
// types.
type AccountTransactionResponseBody struct {
	// Unique Transaction Posting Identifier
	TransactionID *string `form:"TransactionId,omitempty" json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
	// Transaction Date
	TransactionDate *string `form:"TransactionDate,omitempty" json:"TransactionDate,omitempty" xml:"TransactionDate,omitempty"`
	// Transaction Value Date
	ValueDate *string `form:"ValueDate,omitempty" json:"ValueDate,omitempty" xml:"ValueDate,omitempty"`
	// Transaction Narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	// Transaction Type, C for Credit or D for Debit
	TransactionType *string `form:"TransactionType,omitempty" json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
	// Transaction Service Point
	ServicePoint *string `form:"ServicePoint,omitempty" json:"ServicePoint,omitempty" xml:"ServicePoint,omitempty"`
	// Unique Transaction Reference
	TransactionReference *string `form:"TransactionReference,omitempty" json:"TransactionReference,omitempty" xml:"TransactionReference,omitempty"`
	// Transaction Credit Amount
	CreditAmount *float64 `form:"CreditAmount,omitempty" json:"CreditAmount,omitempty" xml:"CreditAmount,omitempty"`
	// Transaction Debit Amount
	DebitAmount *float64 `form:"DebitAmount,omitempty" json:"DebitAmount,omitempty" xml:"DebitAmount,omitempty"`
	// Account Running Cleared Balance
	RunningClearedBalance *float64 `form:"RunningClearedBalance,omitempty" json:"RunningClearedBalance,omitempty" xml:"RunningClearedBalance,omitempty"`
	// Account Running Book Balance
	RunningBookBalance *float64 `form:"RunningBookBalance,omitempty" json:"RunningBookBalance,omitempty" xml:"RunningBookBalance,omitempty"`
	// Account Debit Limit
	DebitLimit *float64 `form:"DebitLimit,omitempty" json:"DebitLimit,omitempty" xml:"DebitLimit,omitempty"`
	// Account Debit Limit Expiry Date
	LimitExpiryDate *string `form:"LimitExpiryDate,omitempty" json:"LimitExpiryDate,omitempty" xml:"LimitExpiryDate,omitempty"`
}

// SourceAccountTXNRequestRequestBody is used to define fields on request body
// types.
type SourceAccountTXNRequestRequestBody struct {
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// Transaction Amount
	Amount float64 `form:"Amount" json:"Amount" xml:"Amount"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency string `form:"TransactionCurrency" json:"TransactionCurrency" xml:"TransactionCurrency"`
	// Posting account transaction narration
	Narration string `form:"Narration" json:"Narration" xml:"Narration"`
}

// DestinationsTXNRequestRequestBody is used to define fields on request body
// types.
type DestinationsTXNRequestRequestBody struct {
	DestinationsTXNRequest []*DestinationAccountTXNRequestRequestBody `form:"DestinationsTXNRequest,omitempty" json:"DestinationsTXNRequest,omitempty" xml:"DestinationsTXNRequest,omitempty"`
}

// DestinationAccountTXNRequestRequestBody is used to define fields on request
// body types.
type DestinationAccountTXNRequestRequestBody struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber string `form:"ReferenceNumber" json:"ReferenceNumber" xml:"ReferenceNumber"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// Transaction Amount
	Amount float64 `form:"Amount" json:"Amount" xml:"Amount"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency string `form:"TransactionCurrency" json:"TransactionCurrency" xml:"TransactionCurrency"`
	// Posting account transaction narration
	Narration string `form:"Narration" json:"Narration" xml:"Narration"`
}

// CustMemoRequestBody is used to define fields on request body types.
type CustMemoRequestBody struct {
	// CustMemo CustMemoLine1
	CustMemoLine1 *string `form:"CustMemoLine1,omitempty" json:"CustMemoLine1,omitempty" xml:"CustMemoLine1,omitempty"`
	// CustMemo CustMemoLine2
	CustMemoLine2 *string `form:"CustMemoLine2,omitempty" json:"CustMemoLine2,omitempty" xml:"CustMemoLine2,omitempty"`
	// CustMemo CustMemoLine2
	CustMemoLine3 *string `form:"CustMemoLine3,omitempty" json:"CustMemoLine3,omitempty" xml:"CustMemoLine3,omitempty"`
}

// SourceAccountTransactionRequestRequestBody is used to define fields on
// request body types.
type SourceAccountTransactionRequestRequestBody struct {
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// Transaction Amount
	Amount float64 `form:"Amount" json:"Amount" xml:"Amount"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency string `form:"TransactionCurrency" json:"TransactionCurrency" xml:"TransactionCurrency"`
	// Posting account transaction narration
	Narration string `form:"Narration" json:"Narration" xml:"Narration"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// DestinationsTransactionRequestRequestBody is used to define fields on
// request body types.
type DestinationsTransactionRequestRequestBody struct {
	DestinationAccountTransactionRequest []*DestinationAccountTransactionRequestRequestBody `form:"DestinationAccountTransactionRequest,omitempty" json:"DestinationAccountTransactionRequest,omitempty" xml:"DestinationAccountTransactionRequest,omitempty"`
}

// DestinationAccountTransactionRequestRequestBody is used to define fields on
// request body types.
type DestinationAccountTransactionRequestRequestBody struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber string `form:"ReferenceNumber" json:"ReferenceNumber" xml:"ReferenceNumber"`
	// Recipient phone number linked to a bank account in an IPSL participating bank
	MobileNumber string `form:"MobileNumber" json:"MobileNumber" xml:"MobileNumber"`
	// Transaction Amount
	Amount float64 `form:"Amount" json:"Amount" xml:"Amount"`
	// Posting account transaction narration
	Narration string `form:"Narration" json:"Narration" xml:"Narration"`
}

// SourceAccountResponseBody is used to define fields on response body types.
type SourceAccountResponseBody struct {
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Transaction Amount
	Amount              *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	TransactionCurrency *string  `form:"TransactionCurrency,omitempty" json:"TransactionCurrency,omitempty" xml:"TransactionCurrency,omitempty"`
	// Posting account transaction narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	// Posting leg response code
	ResponseCode *string `form:"ResponseCode,omitempty" json:"ResponseCode,omitempty" xml:"ResponseCode,omitempty"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// DestinationAccountResponseBody is used to define fields on response body
// types.
type DestinationAccountResponseBody struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber *string `form:"ReferenceNumber,omitempty" json:"ReferenceNumber,omitempty" xml:"ReferenceNumber,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Recipient phone number linked to a bank account in an IPSL participating bank
	MobileNumber *string `form:"MobileNumber,omitempty" json:"MobileNumber,omitempty" xml:"MobileNumber,omitempty"`
	// Recipient phone number linked to a bank account in an IPSL participating bank
	PhoneNumber *string `form:"PhoneNumber,omitempty" json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	// Posting account bank code
	BankCode *string `form:"BankCode,omitempty" json:"BankCode,omitempty" xml:"BankCode,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency *string `form:"TransactionCurrency,omitempty" json:"TransactionCurrency,omitempty" xml:"TransactionCurrency,omitempty"`
	// Posting account transaction narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	// Co-operative Bank's processed transaction number
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Posting leg response code
	ResponseCode *string `form:"ResponseCode,omitempty" json:"ResponseCode,omitempty" xml:"ResponseCode,omitempty"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// TransactionStatusMultiStatusResponseBody is used to define fields on
// response body types.
type TransactionStatusMultiStatusResponseBody MultiStatusResponseResponseBody

// MultiStatusResponseResponseBody is used to define fields on response body
// types.
type MultiStatusResponseResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Acknowledgement/Response Message Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string                           `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	Source             *SourceAccountResponseBody        `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations       []*DestinationAccountResponseBody `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// NewAccountBalanceRequestBody builds the HTTP request body from the payload
// of the "AccountBalance" endpoint of the "connect" service.
func NewAccountBalanceRequestBody(p *connect.AccountBalancePayload) *AccountBalanceRequestBody {
	body := &AccountBalanceRequestBody{
		MessageReference: p.MessageReference,
		AccountNumber:    p.AccountNumber,
	}
	return body
}

// NewAccountFullStatementRequestBody builds the HTTP request body from the
// payload of the "AccountFullStatement" endpoint of the "connect" service.
func NewAccountFullStatementRequestBody(p *connect.AccountFullStatementPayload) *AccountFullStatementRequestBody {
	body := &AccountFullStatementRequestBody{
		MessageReference: p.MessageReference,
		AccountNumber:    p.AccountNumber,
		StartDate:        p.StartDate,
		EndDate:          p.EndDate,
	}
	return body
}

// NewAccountMiniStatementRequestBody builds the HTTP request body from the
// payload of the "AccountMiniStatement" endpoint of the "connect" service.
func NewAccountMiniStatementRequestBody(p *connect.AccountMiniStatementPayload) *AccountMiniStatementRequestBody {
	body := &AccountMiniStatementRequestBody{
		MessageReference: p.MessageReference,
		AccountNumber:    p.AccountNumber,
	}
	return body
}

// NewAccountTransactionsRequestBody builds the HTTP request body from the
// payload of the "AccountTransactions" endpoint of the "connect" service.
func NewAccountTransactionsRequestBody(p *connect.AccountTransactionsPayload) *AccountTransactionsRequestBody {
	body := &AccountTransactionsRequestBody{
		MessageReference: p.MessageReference,
		AccountNumber:    p.AccountNumber,
		NoOfTransactions: p.NoOfTransactions,
	}
	return body
}

// NewAccountValidationRequestBody builds the HTTP request body from the
// payload of the "AccountValidation" endpoint of the "connect" service.
func NewAccountValidationRequestBody(p *connect.AccountValidationPayload) *AccountValidationRequestBody {
	body := &AccountValidationRequestBody{
		MessageReference: p.MessageReference,
		AccountNumber:    p.AccountNumber,
	}
	return body
}

// NewExchangeRateRequestBody builds the HTTP request body from the payload of
// the "ExchangeRate" endpoint of the "connect" service.
func NewExchangeRateRequestBody(p *connect.ExchangeRatePayload) *ExchangeRateRequestBody {
	body := &ExchangeRateRequestBody{
		MessageReference: p.MessageReference,
		FromCurrencyCode: p.FromCurrencyCode,
		ToCurrencyCode:   p.ToCurrencyCode,
	}
	return body
}

// NewIFTAccountToAccountRequestBody builds the HTTP request body from the
// payload of the "IFTAccountToAccount" endpoint of the "connect" service.
func NewIFTAccountToAccountRequestBody(p *connect.IFTAccountToAccountTXNRequest) *IFTAccountToAccountRequestBody {
	body := &IFTAccountToAccountRequestBody{
		MessageReference: p.MessageReference,
		CallBackURL:      p.CallBackURL,
	}
	if p.Source != nil {
		body.Source = marshalConnectSourceAccountTXNRequestToSourceAccountTXNRequestRequestBody(p.Source)
	}
	if p.Destinations != nil {
		body.Destinations = marshalConnectDestinationsTXNRequestToDestinationsTXNRequestRequestBody(p.Destinations)
	}
	return body
}

// NewINSSimulationRequestBody builds the HTTP request body from the payload of
// the "INSSimulation" endpoint of the "connect" service.
func NewINSSimulationRequestBody(p *connect.INSTransactionSimulationRequest) *INSSimulationRequestBody {
	body := &INSSimulationRequestBody{
		MessageReference: p.MessageReference,
		MessageDateTime:  p.MessageDateTime,
		ServiceName:      p.ServiceName,
		NotificationCode: p.NotificationCode,
		PaymentRef:       p.PaymentRef,
		AccountNumber:    p.AccountNumber,
		Amount:           p.Amount,
		TransactionDate:  p.TransactionDate,
		EventType:        p.EventType,
		Currency:         p.Currency,
		ExchangeRate:     p.ExchangeRate,
		Narration:        p.Narration,
		ValueDate:        p.ValueDate,
		EntryDate:        p.EntryDate,
		TransactionID:    p.TransactionID,
	}
	if p.CustMemo != nil {
		body.CustMemo = marshalConnectCustMemoToCustMemoRequestBody(p.CustMemo)
	}
	return body
}

// NewPesaLinkSendToAccountRequestBody builds the HTTP request body from the
// payload of the "PesaLinkSendToAccount" endpoint of the "connect" service.
func NewPesaLinkSendToAccountRequestBody(p *connect.PesaLinkSendToAccountTransactionRequest) *PesaLinkSendToAccountRequestBody {
	body := &PesaLinkSendToAccountRequestBody{
		MessageReference: p.MessageReference,
		CallBackURL:      p.CallBackURL,
	}
	if p.Source != nil {
		body.Source = marshalConnectSourceAccountTransactionRequestToSourceAccountTransactionRequestRequestBody(p.Source)
	}
	if p.Destinations != nil {
		body.Destinations = marshalConnectDestinationsTransactionRequestToDestinationsTransactionRequestRequestBody(p.Destinations)
	}
	return body
}

// NewPesaLinkSendToPhoneRequestBody builds the HTTP request body from the
// payload of the "PesaLinkSendToPhone" endpoint of the "connect" service.
func NewPesaLinkSendToPhoneRequestBody(p *connect.PesaLinkSendToPhoneTransactionRequest) *PesaLinkSendToPhoneRequestBody {
	body := &PesaLinkSendToPhoneRequestBody{
		MessageReference: p.MessageReference,
		CallBackURL:      p.CallBackURL,
	}
	if p.Source != nil {
		body.Source = marshalConnectSourceAccountTransactionRequestToSourceAccountTransactionRequestRequestBody(p.Source)
	}
	if p.Destinations != nil {
		body.Destinations = marshalConnectDestinationsTransactionRequestToDestinationsTransactionRequestRequestBody(p.Destinations)
	}
	return body
}

// NewSendToMPesaRequestBody builds the HTTP request body from the payload of
// the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaRequestBody(p *connect.SendToMpesaTransactionRequest) *SendToMPesaRequestBody {
	body := &SendToMPesaRequestBody{
		MessageReference: p.MessageReference,
		CallBackURL:      p.CallBackURL,
	}
	if p.Source != nil {
		body.Source = marshalConnectSourceAccountTransactionRequestToSourceAccountTransactionRequestRequestBody(p.Source)
	}
	if p.Destinations != nil {
		body.Destinations = marshalConnectDestinationsTransactionRequestToDestinationsTransactionRequestRequestBody(p.Destinations)
	}
	return body
}

// NewTransactionStatusRequestBody builds the HTTP request body from the
// payload of the "TransactionStatus" endpoint of the "connect" service.
func NewTransactionStatusRequestBody(p *connect.FTTransactionStatusPayload) *TransactionStatusRequestBody {
	body := &TransactionStatusRequestBody{
		MessageReference: p.MessageReference,
	}
	return body
}

// NewAccountBalanceSuccessResponseViewOK builds a "connect" service
// "AccountBalance" endpoint result from a HTTP "OK" response.
func NewAccountBalanceSuccessResponseViewOK(body *AccountBalanceResponseBody) *connectviews.AccountBalanceSuccessResponseView {
	v := &connectviews.AccountBalanceSuccessResponseView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
		AccountNumber:      body.AccountNumber,
		AccountName:        body.AccountName,
		Currency:           body.Currency,
		ProductName:        body.ProductName,
		ClearedBalance:     body.ClearedBalance,
		BookedBalance:      body.BookedBalance,
		BlockedBalance:     body.BlockedBalance,
		AvailableBalance:   body.AvailableBalance,
		ArrearsAmount:      body.ArrearsAmount,
		BranchName:         body.BranchName,
		BranchSortCode:     body.BranchSortCode,
		AverageBalance:     body.AverageBalance,
		UnclearedBalance:   body.UnclearedBalance,
		ODLimit:            body.ODLimit,
		CreditLimit:        body.CreditLimit,
	}

	return v
}

// NewAccountBalanceBadRequest builds a connect service AccountBalance endpoint
// bad_request error.
func NewAccountBalanceBadRequest(body *AccountBalanceBadRequestResponseBody) *connect.ErrorResponse {
	v := &connect.ErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewAccountBalanceUnauthorized builds a connect service AccountBalance
// endpoint unauthorized error.
func NewAccountBalanceUnauthorized(body *AccountBalanceUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewAccountBalanceNotAllowed builds a connect service AccountBalance endpoint
// not_allowed error.
func NewAccountBalanceNotAllowed(body *AccountBalanceNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountBalanceTimeout builds a connect service AccountBalance endpoint
// timeout error.
func NewAccountBalanceTimeout(body *AccountBalanceTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountFullStatementSuccessResponseViewOK builds a "connect" service
// "AccountFullStatement" endpoint result from a HTTP "OK" response.
func NewAccountFullStatementSuccessResponseViewOK(body *AccountFullStatementResponseBody) *connectviews.AccountFullStatementSuccessResponseView {
	v := &connectviews.AccountFullStatementSuccessResponseView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
		AccountNumber:      body.AccountNumber,
		AccountName:        body.AccountName,
	}
	if body.Transactions != nil {
		v.Transactions = make([]*connectviews.AccountTransactionView, len(body.Transactions))
		for i, val := range body.Transactions {
			v.Transactions[i] = unmarshalAccountTransactionResponseBodyToConnectviewsAccountTransactionView(val)
		}
	}

	return v
}

// NewAccountFullStatementBadRequest builds a connect service
// AccountFullStatement endpoint bad_request error.
func NewAccountFullStatementBadRequest(body *AccountFullStatementBadRequestResponseBody) *connect.ErrorResponse {
	v := &connect.ErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewAccountFullStatementUnauthorized builds a connect service
// AccountFullStatement endpoint unauthorized error.
func NewAccountFullStatementUnauthorized(body *AccountFullStatementUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewAccountFullStatementNotFound builds a connect service
// AccountFullStatement endpoint not_found error.
func NewAccountFullStatementNotFound(body *AccountFullStatementNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountFullStatementNotAllowed builds a connect service
// AccountFullStatement endpoint not_allowed error.
func NewAccountFullStatementNotAllowed(body *AccountFullStatementNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountFullStatementTimeout builds a connect service AccountFullStatement
// endpoint timeout error.
func NewAccountFullStatementTimeout(body *AccountFullStatementTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountMiniStatementSuccessResponseViewOK builds a "connect" service
// "AccountMiniStatement" endpoint result from a HTTP "OK" response.
func NewAccountMiniStatementSuccessResponseViewOK(body *AccountMiniStatementResponseBody) *connectviews.AccountMiniStatementSuccessResponseView {
	v := &connectviews.AccountMiniStatementSuccessResponseView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
		AccountNumber:      body.AccountNumber,
		AccountName:        body.AccountName,
	}
	if body.Transactions != nil {
		v.Transactions = make([]*connectviews.AccountTransactionView, len(body.Transactions))
		for i, val := range body.Transactions {
			v.Transactions[i] = unmarshalAccountTransactionResponseBodyToConnectviewsAccountTransactionView(val)
		}
	}

	return v
}

// NewAccountMiniStatementBadRequest builds a connect service
// AccountMiniStatement endpoint bad_request error.
func NewAccountMiniStatementBadRequest(body *AccountMiniStatementBadRequestResponseBody) *connect.ErrorResponse {
	v := &connect.ErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewAccountMiniStatementUnauthorized builds a connect service
// AccountMiniStatement endpoint unauthorized error.
func NewAccountMiniStatementUnauthorized(body *AccountMiniStatementUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewAccountMiniStatementNotFound builds a connect service
// AccountMiniStatement endpoint not_found error.
func NewAccountMiniStatementNotFound(body *AccountMiniStatementNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountMiniStatementNotAllowed builds a connect service
// AccountMiniStatement endpoint not_allowed error.
func NewAccountMiniStatementNotAllowed(body *AccountMiniStatementNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountMiniStatementTimeout builds a connect service AccountMiniStatement
// endpoint timeout error.
func NewAccountMiniStatementTimeout(body *AccountMiniStatementTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountTransactionsSuccessResponseViewOK builds a "connect" service
// "AccountTransactions" endpoint result from a HTTP "OK" response.
func NewAccountTransactionsSuccessResponseViewOK(body *AccountTransactionsResponseBody) *connectviews.AccountTransactionsSuccessResponseView {
	v := &connectviews.AccountTransactionsSuccessResponseView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
		AccountNumber:      body.AccountNumber,
		AccountName:        body.AccountName,
		NoOfTransactions:   body.NoOfTransactions,
		TotalCredits:       body.TotalCredits,
		TotalDebits:        body.TotalDebits,
	}
	if body.Transactions != nil {
		v.Transactions = make([]*connectviews.AccountTransactionView, len(body.Transactions))
		for i, val := range body.Transactions {
			v.Transactions[i] = unmarshalAccountTransactionResponseBodyToConnectviewsAccountTransactionView(val)
		}
	}

	return v
}

// NewAccountTransactionsBadRequest builds a connect service
// AccountTransactions endpoint bad_request error.
func NewAccountTransactionsBadRequest(body *AccountTransactionsBadRequestResponseBody) *connect.ErrorResponse {
	v := &connect.ErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewAccountTransactionsUnauthorized builds a connect service
// AccountTransactions endpoint unauthorized error.
func NewAccountTransactionsUnauthorized(body *AccountTransactionsUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewAccountTransactionsNotAllowed builds a connect service
// AccountTransactions endpoint not_allowed error.
func NewAccountTransactionsNotAllowed(body *AccountTransactionsNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountTransactionsTimeout builds a connect service AccountTransactions
// endpoint timeout error.
func NewAccountTransactionsTimeout(body *AccountTransactionsTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountValidationSuccessResponseViewOK builds a "connect" service
// "AccountValidation" endpoint result from a HTTP "OK" response.
func NewAccountValidationSuccessResponseViewOK(body *AccountValidationResponseBody) *connectviews.AccountValidationSuccessResponseView {
	v := &connectviews.AccountValidationSuccessResponseView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}

	return v
}

// NewAccountValidationBadRequest builds a connect service AccountValidation
// endpoint bad_request error.
func NewAccountValidationBadRequest(body *AccountValidationBadRequestResponseBody) *connect.ErrorResponse {
	v := &connect.ErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewAccountValidationUnauthorized builds a connect service AccountValidation
// endpoint unauthorized error.
func NewAccountValidationUnauthorized(body *AccountValidationUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewAccountValidationNotFound builds a connect service AccountValidation
// endpoint not_found error.
func NewAccountValidationNotFound(body *AccountValidationNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountValidationNotAllowed builds a connect service AccountValidation
// endpoint not_allowed error.
func NewAccountValidationNotAllowed(body *AccountValidationNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAccountValidationTimeout builds a connect service AccountValidation
// endpoint timeout error.
func NewAccountValidationTimeout(body *AccountValidationTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewExchangeRateSuccessResponseViewOK builds a "connect" service
// "ExchangeRate" endpoint result from a HTTP "OK" response.
func NewExchangeRateSuccessResponseViewOK(body *ExchangeRateResponseBody) *connectviews.ExchangeRateSuccessResponseView {
	v := &connectviews.ExchangeRateSuccessResponseView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
		FromCurrencyCode:   body.FromCurrencyCode,
		ToCurrencyCode:     body.ToCurrencyCode,
		RateType:           body.RateType,
		Rate:               body.Rate,
		Tolerance:          body.Tolerance,
		MultiplyDivide:     body.MultiplyDivide,
	}

	return v
}

// NewExchangeRateBadRequest builds a connect service ExchangeRate endpoint
// bad_request error.
func NewExchangeRateBadRequest(body *ExchangeRateBadRequestResponseBody) *connect.ErrorResponse {
	v := &connect.ErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewExchangeRateUnauthorized builds a connect service ExchangeRate endpoint
// unauthorized error.
func NewExchangeRateUnauthorized(body *ExchangeRateUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewExchangeRateNotFound builds a connect service ExchangeRate endpoint
// not_found error.
func NewExchangeRateNotFound(body *ExchangeRateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewExchangeRateNotAllowed builds a connect service ExchangeRate endpoint
// not_allowed error.
func NewExchangeRateNotAllowed(body *ExchangeRateNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewExchangeRateTimeout builds a connect service ExchangeRate endpoint
// timeout error.
func NewExchangeRateTimeout(body *ExchangeRateTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIFTAccountToAccountSuccessAcknowledgementOK builds a "connect" service
// "IFTAccountToAccount" endpoint result from a HTTP "OK" response.
func NewIFTAccountToAccountSuccessAcknowledgementOK(body *IFTAccountToAccountResponseBody) *connectviews.SuccessAcknowledgementView {
	v := &connectviews.SuccessAcknowledgementView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}

	return v
}

// NewIFTAccountToAccountBadRequest builds a connect service
// IFTAccountToAccount endpoint bad_request error.
func NewIFTAccountToAccountBadRequest(body *IFTAccountToAccountBadRequestResponseBody) *connect.AcknowledgementError400 {
	v := &connect.AcknowledgementError400{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewIFTAccountToAccountForbidden builds a connect service IFTAccountToAccount
// endpoint forbidden error.
func NewIFTAccountToAccountForbidden(body *IFTAccountToAccountForbiddenResponseBody) *connect.AcknowledgementError403 {
	v := &connect.AcknowledgementError403{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewIFTAccountToAccountConflict builds a connect service IFTAccountToAccount
// endpoint conflict error.
func NewIFTAccountToAccountConflict(body *IFTAccountToAccountConflictResponseBody) *connect.AcknowledgementError409 {
	v := &connect.AcknowledgementError409{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewIFTAccountToAccountUnauthorized builds a connect service
// IFTAccountToAccount endpoint unauthorized error.
func NewIFTAccountToAccountUnauthorized(body *IFTAccountToAccountUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewIFTAccountToAccountNotFound builds a connect service IFTAccountToAccount
// endpoint not_found error.
func NewIFTAccountToAccountNotFound(body *IFTAccountToAccountNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIFTAccountToAccountNotAllowed builds a connect service
// IFTAccountToAccount endpoint not_allowed error.
func NewIFTAccountToAccountNotAllowed(body *IFTAccountToAccountNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIFTAccountToAccountTimeout builds a connect service IFTAccountToAccount
// endpoint timeout error.
func NewIFTAccountToAccountTimeout(body *IFTAccountToAccountTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewINSSimulationSuccessAcknowledgementOK builds a "connect" service
// "INSSimulation" endpoint result from a HTTP "OK" response.
func NewINSSimulationSuccessAcknowledgementOK(body *INSSimulationResponseBody) *connectviews.SuccessAcknowledgementView {
	v := &connectviews.SuccessAcknowledgementView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}

	return v
}

// NewINSSimulationUnauthorized builds a connect service INSSimulation endpoint
// unauthorized error.
func NewINSSimulationUnauthorized(body *INSSimulationUnauthorizedResponseBody) *connect.ErrorAcknowledgement {
	v := &connect.ErrorAcknowledgement{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewINSSimulationBadRequest builds a connect service INSSimulation endpoint
// bad_request error.
func NewINSSimulationBadRequest(body *INSSimulationBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewINSSimulationNotAllowed builds a connect service INSSimulation endpoint
// not_allowed error.
func NewINSSimulationNotAllowed(body *INSSimulationNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewINSSimulationTimeout builds a connect service INSSimulation endpoint
// timeout error.
func NewINSSimulationTimeout(body *INSSimulationTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPesaLinkSendToAccountSuccessAcknowledgementOK builds a "connect" service
// "PesaLinkSendToAccount" endpoint result from a HTTP "OK" response.
func NewPesaLinkSendToAccountSuccessAcknowledgementOK(body *PesaLinkSendToAccountResponseBody) *connectviews.SuccessAcknowledgementView {
	v := &connectviews.SuccessAcknowledgementView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToAccountBadRequest builds a connect service
// PesaLinkSendToAccount endpoint bad_request error.
func NewPesaLinkSendToAccountBadRequest(body *PesaLinkSendToAccountBadRequestResponseBody) *connect.AcknowledgementError400 {
	v := &connect.AcknowledgementError400{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToAccountForbidden builds a connect service
// PesaLinkSendToAccount endpoint forbidden error.
func NewPesaLinkSendToAccountForbidden(body *PesaLinkSendToAccountForbiddenResponseBody) *connect.AcknowledgementError403 {
	v := &connect.AcknowledgementError403{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToAccountConflict builds a connect service
// PesaLinkSendToAccount endpoint conflict error.
func NewPesaLinkSendToAccountConflict(body *PesaLinkSendToAccountConflictResponseBody) *connect.AcknowledgementError409 {
	v := &connect.AcknowledgementError409{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToAccountUnauthorized builds a connect service
// PesaLinkSendToAccount endpoint unauthorized error.
func NewPesaLinkSendToAccountUnauthorized(body *PesaLinkSendToAccountUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewPesaLinkSendToAccountNotFound builds a connect service
// PesaLinkSendToAccount endpoint not_found error.
func NewPesaLinkSendToAccountNotFound(body *PesaLinkSendToAccountNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPesaLinkSendToAccountNotAllowed builds a connect service
// PesaLinkSendToAccount endpoint not_allowed error.
func NewPesaLinkSendToAccountNotAllowed(body *PesaLinkSendToAccountNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPesaLinkSendToAccountTimeout builds a connect service
// PesaLinkSendToAccount endpoint timeout error.
func NewPesaLinkSendToAccountTimeout(body *PesaLinkSendToAccountTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPesaLinkSendToPhoneSuccessAcknowledgementOK builds a "connect" service
// "PesaLinkSendToPhone" endpoint result from a HTTP "OK" response.
func NewPesaLinkSendToPhoneSuccessAcknowledgementOK(body *PesaLinkSendToPhoneResponseBody) *connectviews.SuccessAcknowledgementView {
	v := &connectviews.SuccessAcknowledgementView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToPhoneBadRequest builds a connect service
// PesaLinkSendToPhone endpoint bad_request error.
func NewPesaLinkSendToPhoneBadRequest(body *PesaLinkSendToPhoneBadRequestResponseBody) *connect.AcknowledgementError400 {
	v := &connect.AcknowledgementError400{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToPhoneForbidden builds a connect service PesaLinkSendToPhone
// endpoint forbidden error.
func NewPesaLinkSendToPhoneForbidden(body *PesaLinkSendToPhoneForbiddenResponseBody) *connect.AcknowledgementError403 {
	v := &connect.AcknowledgementError403{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToPhoneConflict builds a connect service PesaLinkSendToPhone
// endpoint conflict error.
func NewPesaLinkSendToPhoneConflict(body *PesaLinkSendToPhoneConflictResponseBody) *connect.AcknowledgementError409 {
	v := &connect.AcknowledgementError409{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewPesaLinkSendToPhoneUnauthorized builds a connect service
// PesaLinkSendToPhone endpoint unauthorized error.
func NewPesaLinkSendToPhoneUnauthorized(body *PesaLinkSendToPhoneUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewPesaLinkSendToPhoneNotFound builds a connect service PesaLinkSendToPhone
// endpoint not_found error.
func NewPesaLinkSendToPhoneNotFound(body *PesaLinkSendToPhoneNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPesaLinkSendToPhoneNotAllowed builds a connect service
// PesaLinkSendToPhone endpoint not_allowed error.
func NewPesaLinkSendToPhoneNotAllowed(body *PesaLinkSendToPhoneNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPesaLinkSendToPhoneTimeout builds a connect service PesaLinkSendToPhone
// endpoint timeout error.
func NewPesaLinkSendToPhoneTimeout(body *PesaLinkSendToPhoneTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSendToMPesaSuccessAcknowledgementOK builds a "connect" service
// "SendToMPesa" endpoint result from a HTTP "OK" response.
func NewSendToMPesaSuccessAcknowledgementOK(body *SendToMPesaResponseBody) *connectviews.SuccessAcknowledgementView {
	v := &connectviews.SuccessAcknowledgementView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}

	return v
}

// NewSendToMPesaBadRequest builds a connect service SendToMPesa endpoint
// bad_request error.
func NewSendToMPesaBadRequest(body *SendToMPesaBadRequestResponseBody) *connect.AcknowledgementError400 {
	v := &connect.AcknowledgementError400{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewSendToMPesaForbidden builds a connect service SendToMPesa endpoint
// forbidden error.
func NewSendToMPesaForbidden(body *SendToMPesaForbiddenResponseBody) *connect.AcknowledgementError403 {
	v := &connect.AcknowledgementError403{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewSendToMPesaConflict builds a connect service SendToMPesa endpoint
// conflict error.
func NewSendToMPesaConflict(body *SendToMPesaConflictResponseBody) *connect.AcknowledgementError409 {
	v := &connect.AcknowledgementError409{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewSendToMPesaUnauthorized builds a connect service SendToMPesa endpoint
// unauthorized error.
func NewSendToMPesaUnauthorized(body *SendToMPesaUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewSendToMPesaNotFound builds a connect service SendToMPesa endpoint
// not_found error.
func NewSendToMPesaNotFound(body *SendToMPesaNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSendToMPesaNotAllowed builds a connect service SendToMPesa endpoint
// not_allowed error.
func NewSendToMPesaNotAllowed(body *SendToMPesaNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSendToMPesaTimeout builds a connect service SendToMPesa endpoint timeout
// error.
func NewSendToMPesaTimeout(body *SendToMPesaTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewTransactionStatusSuccessResponseOK builds a "connect" service
// "TransactionStatus" endpoint result from a HTTP "OK" response.
func NewTransactionStatusSuccessResponseOK(body *TransactionStatusOKResponseBody) *connectviews.SuccessResponseView {
	v := &connectviews.SuccessResponseView{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}
	v.Source = unmarshalSourceAccountResponseBodyToConnectviewsSourceAccountView(body.Source)
	v.Destinations = make([]*connectviews.DestinationAccountView, len(body.Destinations))
	for i, val := range body.Destinations {
		v.Destinations[i] = unmarshalDestinationAccountResponseBodyToConnectviewsDestinationAccountView(val)
	}

	return v
}

// NewTransactionStatusBadRequest builds a connect service TransactionStatus
// endpoint bad_request error.
func NewTransactionStatusBadRequest(body *TransactionStatusBadRequestResponseBody) *connect.ErrorResponse {
	v := &connect.ErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewTransactionStatusUnauthorized builds a connect service TransactionStatus
// endpoint unauthorized error.
func NewTransactionStatusUnauthorized(body *TransactionStatusUnauthorizedResponseBody) *connect.MissingCredentials {
	v := &connect.MissingCredentials{}
	if body.Fault != nil {
		v.Fault = unmarshalMissingCredentialFaultResponseBodyToConnectMissingCredentialFault(body.Fault)
	}

	return v
}

// NewTransactionStatusNotFound builds a connect service TransactionStatus
// endpoint not_found error.
func NewTransactionStatusNotFound(body *TransactionStatusNotFoundResponseBody) *connect.NotFoundErrorResponse {
	v := &connect.NotFoundErrorResponse{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}

	return v
}

// NewTransactionStatusNotAllowed builds a connect service TransactionStatus
// endpoint not_allowed error.
func NewTransactionStatusNotAllowed(body *TransactionStatusNotAllowedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewTransactionStatusTimeout builds a connect service TransactionStatus
// endpoint timeout error.
func NewTransactionStatusTimeout(body *TransactionStatusTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewTokenCredsOK builds a "connect" service "token" endpoint result from a
// HTTP "OK" response.
func NewTokenCredsOK(body *TokenResponseBody) *connect.Creds {
	v := &connect.Creds{
		JWT: *body.JWT,
	}

	return v
}

// ValidateTokenResponseBody runs the validations defined on TokenResponseBody
func ValidateTokenResponseBody(body *TokenResponseBody) (err error) {
	if body.JWT == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwt", "body"))
	}
	return
}

// ValidateAccountBalanceBadRequestResponseBody runs the validations defined on
// AccountBalance_bad_request_Response_Body
func ValidateAccountBalanceBadRequestResponseBody(body *AccountBalanceBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateAccountBalanceNotAllowedResponseBody runs the validations defined on
// AccountBalance_not_allowed_Response_Body
func ValidateAccountBalanceNotAllowedResponseBody(body *AccountBalanceNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountBalanceTimeoutResponseBody runs the validations defined on
// AccountBalance_timeout_Response_Body
func ValidateAccountBalanceTimeoutResponseBody(body *AccountBalanceTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountFullStatementBadRequestResponseBody runs the validations
// defined on AccountFullStatement_bad_request_Response_Body
func ValidateAccountFullStatementBadRequestResponseBody(body *AccountFullStatementBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateAccountFullStatementNotFoundResponseBody runs the validations
// defined on AccountFullStatement_not_found_Response_Body
func ValidateAccountFullStatementNotFoundResponseBody(body *AccountFullStatementNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountFullStatementNotAllowedResponseBody runs the validations
// defined on AccountFullStatement_not_allowed_Response_Body
func ValidateAccountFullStatementNotAllowedResponseBody(body *AccountFullStatementNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountFullStatementTimeoutResponseBody runs the validations defined
// on AccountFullStatement_timeout_Response_Body
func ValidateAccountFullStatementTimeoutResponseBody(body *AccountFullStatementTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountMiniStatementBadRequestResponseBody runs the validations
// defined on AccountMiniStatement_bad_request_Response_Body
func ValidateAccountMiniStatementBadRequestResponseBody(body *AccountMiniStatementBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateAccountMiniStatementNotFoundResponseBody runs the validations
// defined on AccountMiniStatement_not_found_Response_Body
func ValidateAccountMiniStatementNotFoundResponseBody(body *AccountMiniStatementNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountMiniStatementNotAllowedResponseBody runs the validations
// defined on AccountMiniStatement_not_allowed_Response_Body
func ValidateAccountMiniStatementNotAllowedResponseBody(body *AccountMiniStatementNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountMiniStatementTimeoutResponseBody runs the validations defined
// on AccountMiniStatement_timeout_Response_Body
func ValidateAccountMiniStatementTimeoutResponseBody(body *AccountMiniStatementTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountTransactionsBadRequestResponseBody runs the validations
// defined on AccountTransactions_bad_request_Response_Body
func ValidateAccountTransactionsBadRequestResponseBody(body *AccountTransactionsBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateAccountTransactionsNotAllowedResponseBody runs the validations
// defined on AccountTransactions_not_allowed_Response_Body
func ValidateAccountTransactionsNotAllowedResponseBody(body *AccountTransactionsNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountTransactionsTimeoutResponseBody runs the validations defined
// on AccountTransactions_timeout_Response_Body
func ValidateAccountTransactionsTimeoutResponseBody(body *AccountTransactionsTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountValidationBadRequestResponseBody runs the validations defined
// on AccountValidation_bad_request_Response_Body
func ValidateAccountValidationBadRequestResponseBody(body *AccountValidationBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateAccountValidationNotFoundResponseBody runs the validations defined
// on AccountValidation_not_found_Response_Body
func ValidateAccountValidationNotFoundResponseBody(body *AccountValidationNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountValidationNotAllowedResponseBody runs the validations defined
// on AccountValidation_not_allowed_Response_Body
func ValidateAccountValidationNotAllowedResponseBody(body *AccountValidationNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountValidationTimeoutResponseBody runs the validations defined on
// AccountValidation_timeout_Response_Body
func ValidateAccountValidationTimeoutResponseBody(body *AccountValidationTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateExchangeRateBadRequestResponseBody runs the validations defined on
// ExchangeRate_bad_request_Response_Body
func ValidateExchangeRateBadRequestResponseBody(body *ExchangeRateBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateExchangeRateNotFoundResponseBody runs the validations defined on
// ExchangeRate_not_found_Response_Body
func ValidateExchangeRateNotFoundResponseBody(body *ExchangeRateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateExchangeRateNotAllowedResponseBody runs the validations defined on
// ExchangeRate_not_allowed_Response_Body
func ValidateExchangeRateNotAllowedResponseBody(body *ExchangeRateNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateExchangeRateTimeoutResponseBody runs the validations defined on
// ExchangeRate_timeout_Response_Body
func ValidateExchangeRateTimeoutResponseBody(body *ExchangeRateTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIFTAccountToAccountBadRequestResponseBody runs the validations
// defined on IFTAccountToAccount_bad_request_Response_Body
func ValidateIFTAccountToAccountBadRequestResponseBody(body *IFTAccountToAccountBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateIFTAccountToAccountForbiddenResponseBody runs the validations
// defined on IFTAccountToAccount_forbidden_Response_Body
func ValidateIFTAccountToAccountForbiddenResponseBody(body *IFTAccountToAccountForbiddenResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateIFTAccountToAccountConflictResponseBody runs the validations defined
// on IFTAccountToAccount_conflict_Response_Body
func ValidateIFTAccountToAccountConflictResponseBody(body *IFTAccountToAccountConflictResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateIFTAccountToAccountNotFoundResponseBody runs the validations defined
// on IFTAccountToAccount_not_found_Response_Body
func ValidateIFTAccountToAccountNotFoundResponseBody(body *IFTAccountToAccountNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIFTAccountToAccountNotAllowedResponseBody runs the validations
// defined on IFTAccountToAccount_not_allowed_Response_Body
func ValidateIFTAccountToAccountNotAllowedResponseBody(body *IFTAccountToAccountNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIFTAccountToAccountTimeoutResponseBody runs the validations defined
// on IFTAccountToAccount_timeout_Response_Body
func ValidateIFTAccountToAccountTimeoutResponseBody(body *IFTAccountToAccountTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateINSSimulationUnauthorizedResponseBody runs the validations defined
// on INSSimulation_unauthorized_Response_Body
func ValidateINSSimulationUnauthorizedResponseBody(body *INSSimulationUnauthorizedResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateINSSimulationBadRequestResponseBody runs the validations defined on
// INSSimulation_bad_request_Response_Body
func ValidateINSSimulationBadRequestResponseBody(body *INSSimulationBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateINSSimulationNotAllowedResponseBody runs the validations defined on
// INSSimulation_not_allowed_Response_Body
func ValidateINSSimulationNotAllowedResponseBody(body *INSSimulationNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateINSSimulationTimeoutResponseBody runs the validations defined on
// INSSimulation_timeout_Response_Body
func ValidateINSSimulationTimeoutResponseBody(body *INSSimulationTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePesaLinkSendToAccountBadRequestResponseBody runs the validations
// defined on PesaLinkSendToAccount_bad_request_Response_Body
func ValidatePesaLinkSendToAccountBadRequestResponseBody(body *PesaLinkSendToAccountBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidatePesaLinkSendToAccountForbiddenResponseBody runs the validations
// defined on PesaLinkSendToAccount_forbidden_Response_Body
func ValidatePesaLinkSendToAccountForbiddenResponseBody(body *PesaLinkSendToAccountForbiddenResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidatePesaLinkSendToAccountConflictResponseBody runs the validations
// defined on PesaLinkSendToAccount_conflict_Response_Body
func ValidatePesaLinkSendToAccountConflictResponseBody(body *PesaLinkSendToAccountConflictResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidatePesaLinkSendToAccountNotFoundResponseBody runs the validations
// defined on PesaLinkSendToAccount_not_found_Response_Body
func ValidatePesaLinkSendToAccountNotFoundResponseBody(body *PesaLinkSendToAccountNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePesaLinkSendToAccountNotAllowedResponseBody runs the validations
// defined on PesaLinkSendToAccount_not_allowed_Response_Body
func ValidatePesaLinkSendToAccountNotAllowedResponseBody(body *PesaLinkSendToAccountNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePesaLinkSendToAccountTimeoutResponseBody runs the validations
// defined on PesaLinkSendToAccount_timeout_Response_Body
func ValidatePesaLinkSendToAccountTimeoutResponseBody(body *PesaLinkSendToAccountTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePesaLinkSendToPhoneBadRequestResponseBody runs the validations
// defined on PesaLinkSendToPhone_bad_request_Response_Body
func ValidatePesaLinkSendToPhoneBadRequestResponseBody(body *PesaLinkSendToPhoneBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidatePesaLinkSendToPhoneForbiddenResponseBody runs the validations
// defined on PesaLinkSendToPhone_forbidden_Response_Body
func ValidatePesaLinkSendToPhoneForbiddenResponseBody(body *PesaLinkSendToPhoneForbiddenResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidatePesaLinkSendToPhoneConflictResponseBody runs the validations defined
// on PesaLinkSendToPhone_conflict_Response_Body
func ValidatePesaLinkSendToPhoneConflictResponseBody(body *PesaLinkSendToPhoneConflictResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidatePesaLinkSendToPhoneNotFoundResponseBody runs the validations defined
// on PesaLinkSendToPhone_not_found_Response_Body
func ValidatePesaLinkSendToPhoneNotFoundResponseBody(body *PesaLinkSendToPhoneNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePesaLinkSendToPhoneNotAllowedResponseBody runs the validations
// defined on PesaLinkSendToPhone_not_allowed_Response_Body
func ValidatePesaLinkSendToPhoneNotAllowedResponseBody(body *PesaLinkSendToPhoneNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePesaLinkSendToPhoneTimeoutResponseBody runs the validations defined
// on PesaLinkSendToPhone_timeout_Response_Body
func ValidatePesaLinkSendToPhoneTimeoutResponseBody(body *PesaLinkSendToPhoneTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSendToMPesaBadRequestResponseBody runs the validations defined on
// SendToMPesa_bad_request_Response_Body
func ValidateSendToMPesaBadRequestResponseBody(body *SendToMPesaBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateSendToMPesaForbiddenResponseBody runs the validations defined on
// SendToMPesa_forbidden_Response_Body
func ValidateSendToMPesaForbiddenResponseBody(body *SendToMPesaForbiddenResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateSendToMPesaConflictResponseBody runs the validations defined on
// SendToMPesa_conflict_Response_Body
func ValidateSendToMPesaConflictResponseBody(body *SendToMPesaConflictResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateSendToMPesaNotFoundResponseBody runs the validations defined on
// SendToMPesa_not_found_Response_Body
func ValidateSendToMPesaNotFoundResponseBody(body *SendToMPesaNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSendToMPesaNotAllowedResponseBody runs the validations defined on
// SendToMPesa_not_allowed_Response_Body
func ValidateSendToMPesaNotAllowedResponseBody(body *SendToMPesaNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSendToMPesaTimeoutResponseBody runs the validations defined on
// SendToMPesa_timeout_Response_Body
func ValidateSendToMPesaTimeoutResponseBody(body *SendToMPesaTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTransactionStatusBadRequestResponseBody runs the validations defined
// on TransactionStatus_bad_request_Response_Body
func ValidateTransactionStatusBadRequestResponseBody(body *TransactionStatusBadRequestResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateTransactionStatusNotFoundResponseBody runs the validations defined
// on TransactionStatus_not_found_Response_Body
func ValidateTransactionStatusNotFoundResponseBody(body *TransactionStatusNotFoundResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateTransactionStatusNotAllowedResponseBody runs the validations defined
// on TransactionStatus_not_allowed_Response_Body
func ValidateTransactionStatusNotAllowedResponseBody(body *TransactionStatusNotAllowedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTransactionStatusTimeoutResponseBody runs the validations defined on
// TransactionStatus_timeout_Response_Body
func ValidateTransactionStatusTimeoutResponseBody(body *TransactionStatusTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountTransactionResponseBody runs the validations defined on
// AccountTransactionResponseBody
func ValidateAccountTransactionResponseBody(body *AccountTransactionResponseBody) (err error) {
	if body.TransactionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.TransactionDate", *body.TransactionDate, goa.FormatDateTime))
	}
	if body.ValueDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ValueDate", *body.ValueDate, goa.FormatDateTime))
	}
	if body.TransactionType != nil {
		if !(*body.TransactionType == "C" || *body.TransactionType == "D") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionType", *body.TransactionType, []interface{}{"C", "D"}))
		}
	}
	return
}

// ValidateSourceAccountTXNRequestRequestBody runs the validations defined on
// SourceAccountTXNRequestRequestBody
func ValidateSourceAccountTXNRequestRequestBody(body *SourceAccountTXNRequestRequestBody) (err error) {
	if utf8.RuneCountInString(body.AccountNumber) < 14 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", body.AccountNumber, utf8.RuneCountInString(body.AccountNumber), 14, true))
	}
	if utf8.RuneCountInString(body.AccountNumber) > 14 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", body.AccountNumber, utf8.RuneCountInString(body.AccountNumber), 14, false))
	}
	if body.Amount < 0.01 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 0.01, true))
	}
	if body.Amount > 999999.99 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 999999.99, false))
	}
	if !(body.TransactionCurrency == "USD" || body.TransactionCurrency == "KES" || body.TransactionCurrency == "EUR" || body.TransactionCurrency == "GBP" || body.TransactionCurrency == "AUD" || body.TransactionCurrency == "CHF" || body.TransactionCurrency == "CAD" || body.TransactionCurrency == "ZAR") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", body.TransactionCurrency, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
	}
	if utf8.RuneCountInString(body.Narration) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 1, true))
	}
	if utf8.RuneCountInString(body.Narration) > 25 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 25, false))
	}
	return
}

// ValidateDestinationsTXNRequestRequestBody runs the validations defined on
// DestinationsTXNRequestRequestBody
func ValidateDestinationsTXNRequestRequestBody(body *DestinationsTXNRequestRequestBody) (err error) {
	if len(body.DestinationsTXNRequest) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.DestinationsTXNRequest", body.DestinationsTXNRequest, len(body.DestinationsTXNRequest), 1, true))
	}
	for _, e := range body.DestinationsTXNRequest {
		if e != nil {
			if err2 := ValidateDestinationAccountTXNRequestRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDestinationAccountTXNRequestRequestBody runs the validations defined
// on DestinationAccountTXNRequestRequestBody
func ValidateDestinationAccountTXNRequestRequestBody(body *DestinationAccountTXNRequestRequestBody) (err error) {
	if utf8.RuneCountInString(body.ReferenceNumber) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", body.ReferenceNumber, utf8.RuneCountInString(body.ReferenceNumber), 1, true))
	}
	if utf8.RuneCountInString(body.ReferenceNumber) > 30 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", body.ReferenceNumber, utf8.RuneCountInString(body.ReferenceNumber), 30, false))
	}
	if utf8.RuneCountInString(body.AccountNumber) < 14 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", body.AccountNumber, utf8.RuneCountInString(body.AccountNumber), 14, true))
	}
	if utf8.RuneCountInString(body.AccountNumber) > 14 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", body.AccountNumber, utf8.RuneCountInString(body.AccountNumber), 14, false))
	}
	if body.Amount < 0.01 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 0.01, true))
	}
	if body.Amount > 999999.99 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 999999.99, false))
	}
	if !(body.TransactionCurrency == "USD" || body.TransactionCurrency == "KES" || body.TransactionCurrency == "EUR" || body.TransactionCurrency == "GBP" || body.TransactionCurrency == "AUD" || body.TransactionCurrency == "CHF" || body.TransactionCurrency == "CAD" || body.TransactionCurrency == "ZAR") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", body.TransactionCurrency, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
	}
	if utf8.RuneCountInString(body.Narration) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 1, true))
	}
	if utf8.RuneCountInString(body.Narration) > 25 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 25, false))
	}
	return
}

// ValidateSourceAccountTransactionRequestRequestBody runs the validations
// defined on SourceAccountTransactionRequestRequestBody
func ValidateSourceAccountTransactionRequestRequestBody(body *SourceAccountTransactionRequestRequestBody) (err error) {
	if utf8.RuneCountInString(body.AccountNumber) < 14 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", body.AccountNumber, utf8.RuneCountInString(body.AccountNumber), 14, true))
	}
	if utf8.RuneCountInString(body.AccountNumber) > 14 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", body.AccountNumber, utf8.RuneCountInString(body.AccountNumber), 14, false))
	}
	if body.Amount < 0.01 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 0.01, true))
	}
	if body.Amount > 999999.99 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 999999.99, false))
	}
	if !(body.TransactionCurrency == "USD" || body.TransactionCurrency == "KES" || body.TransactionCurrency == "EUR" || body.TransactionCurrency == "GBP" || body.TransactionCurrency == "AUD" || body.TransactionCurrency == "CHF" || body.TransactionCurrency == "CAD" || body.TransactionCurrency == "ZAR") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", body.TransactionCurrency, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
	}
	if utf8.RuneCountInString(body.Narration) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 1, true))
	}
	if utf8.RuneCountInString(body.Narration) > 25 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 25, false))
	}
	return
}

// ValidateDestinationsTransactionRequestRequestBody runs the validations
// defined on DestinationsTransactionRequestRequestBody
func ValidateDestinationsTransactionRequestRequestBody(body *DestinationsTransactionRequestRequestBody) (err error) {
	if len(body.DestinationAccountTransactionRequest) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.DestinationAccountTransactionRequest", body.DestinationAccountTransactionRequest, len(body.DestinationAccountTransactionRequest), 1, true))
	}
	for _, e := range body.DestinationAccountTransactionRequest {
		if e != nil {
			if err2 := ValidateDestinationAccountTransactionRequestRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDestinationAccountTransactionRequestRequestBody runs the validations
// defined on DestinationAccountTransactionRequestRequestBody
func ValidateDestinationAccountTransactionRequestRequestBody(body *DestinationAccountTransactionRequestRequestBody) (err error) {
	if utf8.RuneCountInString(body.ReferenceNumber) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", body.ReferenceNumber, utf8.RuneCountInString(body.ReferenceNumber), 1, true))
	}
	if utf8.RuneCountInString(body.ReferenceNumber) > 30 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", body.ReferenceNumber, utf8.RuneCountInString(body.ReferenceNumber), 30, false))
	}
	if utf8.RuneCountInString(body.MobileNumber) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", body.MobileNumber, utf8.RuneCountInString(body.MobileNumber), 10, true))
	}
	if utf8.RuneCountInString(body.MobileNumber) > 13 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", body.MobileNumber, utf8.RuneCountInString(body.MobileNumber), 13, false))
	}
	if body.Amount < 0.01 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 0.01, true))
	}
	if body.Amount > 999999.99 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", body.Amount, 999999.99, false))
	}
	if utf8.RuneCountInString(body.Narration) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 1, true))
	}
	if utf8.RuneCountInString(body.Narration) > 25 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", body.Narration, utf8.RuneCountInString(body.Narration), 25, false))
	}
	return
}

// ValidateSourceAccountResponseBody runs the validations defined on
// SourceAccountResponseBody
func ValidateSourceAccountResponseBody(body *SourceAccountResponseBody) (err error) {
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	return
}

// ValidateDestinationAccountResponseBody runs the validations defined on
// DestinationAccountResponseBody
func ValidateDestinationAccountResponseBody(body *DestinationAccountResponseBody) (err error) {
	if body.ReferenceNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReferenceNumber", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 1, true))
		}
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 30, false))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	if body.MobileNumber != nil {
		if !(*body.MobileNumber == "07xxxxxxxx" || *body.MobileNumber == "2547xxxxxxxx" || *body.MobileNumber == "+2547xxxxxxxx") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.MobileNumber", *body.MobileNumber, []interface{}{"07xxxxxxxx", "2547xxxxxxxx", "+2547xxxxxxxx"}))
		}
	}
	if body.MobileNumber != nil {
		if utf8.RuneCountInString(*body.MobileNumber) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", *body.MobileNumber, utf8.RuneCountInString(*body.MobileNumber), 10, true))
		}
	}
	if body.MobileNumber != nil {
		if utf8.RuneCountInString(*body.MobileNumber) > 13 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", *body.MobileNumber, utf8.RuneCountInString(*body.MobileNumber), 13, false))
		}
	}
	if body.PhoneNumber != nil {
		if !(*body.PhoneNumber == "07xxxxxxxx" || *body.PhoneNumber == "2547xxxxxxxx" || *body.PhoneNumber == "+2547xxxxxxxx") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.PhoneNumber", *body.PhoneNumber, []interface{}{"07xxxxxxxx", "2547xxxxxxxx", "+2547xxxxxxxx"}))
		}
	}
	if body.PhoneNumber != nil {
		if utf8.RuneCountInString(*body.PhoneNumber) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.PhoneNumber", *body.PhoneNumber, utf8.RuneCountInString(*body.PhoneNumber), 10, true))
		}
	}
	if body.PhoneNumber != nil {
		if utf8.RuneCountInString(*body.PhoneNumber) > 13 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.PhoneNumber", *body.PhoneNumber, utf8.RuneCountInString(*body.PhoneNumber), 13, false))
		}
	}
	if body.TransactionCurrency != nil {
		if !(*body.TransactionCurrency == "KES" || *body.TransactionCurrency == "USD" || *body.TransactionCurrency == "EUR" || *body.TransactionCurrency == "GBP" || *body.TransactionCurrency == "AUD" || *body.TransactionCurrency == "CHF" || *body.TransactionCurrency == "CAD" || *body.TransactionCurrency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", *body.TransactionCurrency, []interface{}{"KES", "USD", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	return
}

// ValidateTransactionStatusMultiStatusResponseBody runs the validations
// defined on TransactionStatusMulti-StatusResponseBody
func ValidateTransactionStatusMultiStatusResponseBody(body *TransactionStatusMultiStatusResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountResponseBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Destinations {
		if e != nil {
			if err2 := ValidateDestinationAccountResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateMultiStatusResponseResponseBody runs the validations defined on
// MultiStatusResponseResponseBody
func ValidateMultiStatusResponseResponseBody(body *MultiStatusResponseResponseBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountResponseBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Destinations {
		if e != nil {
			if err2 := ValidateDestinationAccountResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
