// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect client HTTP transport
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package client

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	goahttp "goa.design/goa/v3/http"
)

// Client lists the connect service endpoint HTTP clients.
type Client struct {
	// AccountBalance Doer is the HTTP client used to make requests to the
	// AccountBalance endpoint.
	AccountBalanceDoer goahttp.Doer

	// AccountFullStatement Doer is the HTTP client used to make requests to the
	// AccountFullStatement endpoint.
	AccountFullStatementDoer goahttp.Doer

	// AccountMiniStatement Doer is the HTTP client used to make requests to the
	// AccountMiniStatement endpoint.
	AccountMiniStatementDoer goahttp.Doer

	// AccountTransactions Doer is the HTTP client used to make requests to the
	// AccountTransactions endpoint.
	AccountTransactionsDoer goahttp.Doer

	// AccountValidation Doer is the HTTP client used to make requests to the
	// AccountValidation endpoint.
	AccountValidationDoer goahttp.Doer

	// ExchangeRate Doer is the HTTP client used to make requests to the
	// ExchangeRate endpoint.
	ExchangeRateDoer goahttp.Doer

	// IFTAccountToAccount Doer is the HTTP client used to make requests to the
	// IFTAccountToAccount endpoint.
	IFTAccountToAccountDoer goahttp.Doer

	// INSSimulation Doer is the HTTP client used to make requests to the
	// INSSimulation endpoint.
	INSSimulationDoer goahttp.Doer

	// PesaLinkSendToAccount Doer is the HTTP client used to make requests to the
	// PesaLinkSendToAccount endpoint.
	PesaLinkSendToAccountDoer goahttp.Doer

	// PesaLinkSendToPhone Doer is the HTTP client used to make requests to the
	// PesaLinkSendToPhone endpoint.
	PesaLinkSendToPhoneDoer goahttp.Doer

	// SendToMPesa Doer is the HTTP client used to make requests to the SendToMPesa
	// endpoint.
	SendToMPesaDoer goahttp.Doer

	// TransactionStatus Doer is the HTTP client used to make requests to the
	// TransactionStatus endpoint.
	TransactionStatusDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the connect service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AccountBalanceDoer:        doer,
		AccountFullStatementDoer:  doer,
		AccountMiniStatementDoer:  doer,
		AccountTransactionsDoer:   doer,
		AccountValidationDoer:     doer,
		ExchangeRateDoer:          doer,
		IFTAccountToAccountDoer:   doer,
		INSSimulationDoer:         doer,
		PesaLinkSendToAccountDoer: doer,
		PesaLinkSendToPhoneDoer:   doer,
		SendToMPesaDoer:           doer,
		TransactionStatusDoer:     doer,
		RestoreResponseBody:       restoreBody,
		scheme:                    scheme,
		host:                      host,
		decoder:                   dec,
		encoder:                   enc,
	}
}

// AccountBalance returns an endpoint that makes HTTP requests to the connect
// service AccountBalance server.
func (c *Client) AccountBalance() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeAccountBalanceRequest(c.encoder)
		decodeResponse = DecodeAccountBalanceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAccountBalanceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AccountBalanceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "AccountBalance", err)
		}
		return decodeResponse(resp)
	}
}

// AccountFullStatement returns an endpoint that makes HTTP requests to the
// connect service AccountFullStatement server.
func (c *Client) AccountFullStatement() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeAccountFullStatementRequest(c.encoder)
		decodeResponse = DecodeAccountFullStatementResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAccountFullStatementRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AccountFullStatementDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "AccountFullStatement", err)
		}
		return decodeResponse(resp)
	}
}

// AccountMiniStatement returns an endpoint that makes HTTP requests to the
// connect service AccountMiniStatement server.
func (c *Client) AccountMiniStatement() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeAccountMiniStatementRequest(c.encoder)
		decodeResponse = DecodeAccountMiniStatementResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAccountMiniStatementRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AccountMiniStatementDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "AccountMiniStatement", err)
		}
		return decodeResponse(resp)
	}
}

// AccountTransactions returns an endpoint that makes HTTP requests to the
// connect service AccountTransactions server.
func (c *Client) AccountTransactions() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeAccountTransactionsRequest(c.encoder)
		decodeResponse = DecodeAccountTransactionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAccountTransactionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AccountTransactionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "AccountTransactions", err)
		}
		return decodeResponse(resp)
	}
}

// AccountValidation returns an endpoint that makes HTTP requests to the
// connect service AccountValidation server.
func (c *Client) AccountValidation() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeAccountValidationRequest(c.encoder)
		decodeResponse = DecodeAccountValidationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAccountValidationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AccountValidationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "AccountValidation", err)
		}
		return decodeResponse(resp)
	}
}

// ExchangeRate returns an endpoint that makes HTTP requests to the connect
// service ExchangeRate server.
func (c *Client) ExchangeRate() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeExchangeRateRequest(c.encoder)
		decodeResponse = DecodeExchangeRateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildExchangeRateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ExchangeRateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "ExchangeRate", err)
		}
		return decodeResponse(resp)
	}
}

// IFTAccountToAccount returns an endpoint that makes HTTP requests to the
// connect service IFTAccountToAccount server.
func (c *Client) IFTAccountToAccount() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeIFTAccountToAccountRequest(c.encoder)
		decodeResponse = DecodeIFTAccountToAccountResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIFTAccountToAccountRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IFTAccountToAccountDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "IFTAccountToAccount", err)
		}
		return decodeResponse(resp)
	}
}

// INSSimulation returns an endpoint that makes HTTP requests to the connect
// service INSSimulation server.
func (c *Client) INSSimulation() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeINSSimulationRequest(c.encoder)
		decodeResponse = DecodeINSSimulationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildINSSimulationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.INSSimulationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "INSSimulation", err)
		}
		return decodeResponse(resp)
	}
}

// PesaLinkSendToAccount returns an endpoint that makes HTTP requests to the
// connect service PesaLinkSendToAccount server.
func (c *Client) PesaLinkSendToAccount() endpoint.Endpoint {
	var (
		encodeRequest  = EncodePesaLinkSendToAccountRequest(c.encoder)
		decodeResponse = DecodePesaLinkSendToAccountResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPesaLinkSendToAccountRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PesaLinkSendToAccountDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "PesaLinkSendToAccount", err)
		}
		return decodeResponse(resp)
	}
}

// PesaLinkSendToPhone returns an endpoint that makes HTTP requests to the
// connect service PesaLinkSendToPhone server.
func (c *Client) PesaLinkSendToPhone() endpoint.Endpoint {
	var (
		encodeRequest  = EncodePesaLinkSendToPhoneRequest(c.encoder)
		decodeResponse = DecodePesaLinkSendToPhoneResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPesaLinkSendToPhoneRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PesaLinkSendToPhoneDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "PesaLinkSendToPhone", err)
		}
		return decodeResponse(resp)
	}
}

// SendToMPesa returns an endpoint that makes HTTP requests to the connect
// service SendToMPesa server.
func (c *Client) SendToMPesa() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeSendToMPesaRequest(c.encoder)
		decodeResponse = DecodeSendToMPesaResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSendToMPesaRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendToMPesaDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "SendToMPesa", err)
		}
		return decodeResponse(resp)
	}
}

// TransactionStatus returns an endpoint that makes HTTP requests to the
// connect service TransactionStatus server.
func (c *Client) TransactionStatus() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeTransactionStatusRequest(c.encoder)
		decodeResponse = DecodeTransactionStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTransactionStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TransactionStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("connect", "TransactionStatus", err)
		}
		return decodeResponse(resp)
	}
}
