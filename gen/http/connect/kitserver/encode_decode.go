// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package server

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/coop-go/gen/http/connect/server"
	goahttp "goa.design/goa/v3/http"
)

// EncodeAccountBalanceResponse returns a go-kit EncodeResponseFunc suitable
// for encoding connect AccountBalance responses.
func EncodeAccountBalanceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAccountBalanceResponse(encoder)
}

// DecodeAccountBalanceRequest returns a go-kit DecodeRequestFunc suitable for
// decoding connect AccountBalance requests.
func DecodeAccountBalanceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAccountBalanceRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeAccountBalanceError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the connect AccountBalance endpoint.
func EncodeAccountBalanceError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeAccountBalanceError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeAccountFullStatementResponse returns a go-kit EncodeResponseFunc
// suitable for encoding connect AccountFullStatement responses.
func EncodeAccountFullStatementResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAccountFullStatementResponse(encoder)
}

// DecodeAccountFullStatementRequest returns a go-kit DecodeRequestFunc
// suitable for decoding connect AccountFullStatement requests.
func DecodeAccountFullStatementRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAccountFullStatementRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeAccountFullStatementError returns a go-kit EncodeResponseFunc suitable
// for encoding errors returned by the connect AccountFullStatement endpoint.
func EncodeAccountFullStatementError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeAccountFullStatementError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeAccountMiniStatementResponse returns a go-kit EncodeResponseFunc
// suitable for encoding connect AccountMiniStatement responses.
func EncodeAccountMiniStatementResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAccountMiniStatementResponse(encoder)
}

// DecodeAccountMiniStatementRequest returns a go-kit DecodeRequestFunc
// suitable for decoding connect AccountMiniStatement requests.
func DecodeAccountMiniStatementRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAccountMiniStatementRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeAccountMiniStatementError returns a go-kit EncodeResponseFunc suitable
// for encoding errors returned by the connect AccountMiniStatement endpoint.
func EncodeAccountMiniStatementError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeAccountMiniStatementError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeAccountTransactionsResponse returns a go-kit EncodeResponseFunc
// suitable for encoding connect AccountTransactions responses.
func EncodeAccountTransactionsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAccountTransactionsResponse(encoder)
}

// DecodeAccountTransactionsRequest returns a go-kit DecodeRequestFunc suitable
// for decoding connect AccountTransactions requests.
func DecodeAccountTransactionsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAccountTransactionsRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeAccountTransactionsError returns a go-kit EncodeResponseFunc suitable
// for encoding errors returned by the connect AccountTransactions endpoint.
func EncodeAccountTransactionsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeAccountTransactionsError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeAccountValidationResponse returns a go-kit EncodeResponseFunc suitable
// for encoding connect AccountValidation responses.
func EncodeAccountValidationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAccountValidationResponse(encoder)
}

// DecodeAccountValidationRequest returns a go-kit DecodeRequestFunc suitable
// for decoding connect AccountValidation requests.
func DecodeAccountValidationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAccountValidationRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeAccountValidationError returns a go-kit EncodeResponseFunc suitable
// for encoding errors returned by the connect AccountValidation endpoint.
func EncodeAccountValidationError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeAccountValidationError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeExchangeRateResponse returns a go-kit EncodeResponseFunc suitable for
// encoding connect ExchangeRate responses.
func EncodeExchangeRateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeExchangeRateResponse(encoder)
}

// DecodeExchangeRateRequest returns a go-kit DecodeRequestFunc suitable for
// decoding connect ExchangeRate requests.
func DecodeExchangeRateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeExchangeRateRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeExchangeRateError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the connect ExchangeRate endpoint.
func EncodeExchangeRateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeExchangeRateError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeIFTAccountToAccountResponse returns a go-kit EncodeResponseFunc
// suitable for encoding connect IFTAccountToAccount responses.
func EncodeIFTAccountToAccountResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeIFTAccountToAccountResponse(encoder)
}

// DecodeIFTAccountToAccountRequest returns a go-kit DecodeRequestFunc suitable
// for decoding connect IFTAccountToAccount requests.
func DecodeIFTAccountToAccountRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeIFTAccountToAccountRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeIFTAccountToAccountError returns a go-kit EncodeResponseFunc suitable
// for encoding errors returned by the connect IFTAccountToAccount endpoint.
func EncodeIFTAccountToAccountError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeIFTAccountToAccountError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeINSSimulationResponse returns a go-kit EncodeResponseFunc suitable for
// encoding connect INSSimulation responses.
func EncodeINSSimulationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeINSSimulationResponse(encoder)
}

// DecodeINSSimulationRequest returns a go-kit DecodeRequestFunc suitable for
// decoding connect INSSimulation requests.
func DecodeINSSimulationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeINSSimulationRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeINSSimulationError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the connect INSSimulation endpoint.
func EncodeINSSimulationError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeINSSimulationError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodePesaLinkSendToAccountResponse returns a go-kit EncodeResponseFunc
// suitable for encoding connect PesaLinkSendToAccount responses.
func EncodePesaLinkSendToAccountResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodePesaLinkSendToAccountResponse(encoder)
}

// DecodePesaLinkSendToAccountRequest returns a go-kit DecodeRequestFunc
// suitable for decoding connect PesaLinkSendToAccount requests.
func DecodePesaLinkSendToAccountRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodePesaLinkSendToAccountRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodePesaLinkSendToAccountError returns a go-kit EncodeResponseFunc
// suitable for encoding errors returned by the connect PesaLinkSendToAccount
// endpoint.
func EncodePesaLinkSendToAccountError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodePesaLinkSendToAccountError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodePesaLinkSendToPhoneResponse returns a go-kit EncodeResponseFunc
// suitable for encoding connect PesaLinkSendToPhone responses.
func EncodePesaLinkSendToPhoneResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodePesaLinkSendToPhoneResponse(encoder)
}

// DecodePesaLinkSendToPhoneRequest returns a go-kit DecodeRequestFunc suitable
// for decoding connect PesaLinkSendToPhone requests.
func DecodePesaLinkSendToPhoneRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodePesaLinkSendToPhoneRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodePesaLinkSendToPhoneError returns a go-kit EncodeResponseFunc suitable
// for encoding errors returned by the connect PesaLinkSendToPhone endpoint.
func EncodePesaLinkSendToPhoneError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodePesaLinkSendToPhoneError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeSendToMPesaResponse returns a go-kit EncodeResponseFunc suitable for
// encoding connect SendToMPesa responses.
func EncodeSendToMPesaResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeSendToMPesaResponse(encoder)
}

// DecodeSendToMPesaRequest returns a go-kit DecodeRequestFunc suitable for
// decoding connect SendToMPesa requests.
func DecodeSendToMPesaRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeSendToMPesaRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeSendToMPesaError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the connect SendToMPesa endpoint.
func EncodeSendToMPesaError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeSendToMPesaError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeTransactionStatusResponse returns a go-kit EncodeResponseFunc suitable
// for encoding connect TransactionStatus responses.
func EncodeTransactionStatusResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeTransactionStatusResponse(encoder)
}

// DecodeTransactionStatusRequest returns a go-kit DecodeRequestFunc suitable
// for decoding connect TransactionStatus requests.
func DecodeTransactionStatusRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeTransactionStatusRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeTransactionStatusError returns a go-kit EncodeResponseFunc suitable
// for encoding errors returned by the connect TransactionStatus endpoint.
func EncodeTransactionStatusError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeTransactionStatusError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}
