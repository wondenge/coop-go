// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package server

import (
	"unicode/utf8"

	connect "github.com/wondenge/coop-go/gen/connect"
	connectviews "github.com/wondenge/coop-go/gen/connect/views"
	goa "goa.design/goa/v3/pkg"
)

// AccountBalanceRequestBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP request body.
type AccountBalanceRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
}

// AccountFullStatementRequestBody is the type of the "connect" service
// "AccountFullStatement" endpoint HTTP request body.
type AccountFullStatementRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Statement Start Date
	StartDate *string `form:"StartDate,omitempty" json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	// Statement End Date
	EndDate *string `form:"EndDate,omitempty" json:"EndDate,omitempty" xml:"EndDate,omitempty"`
}

// AccountMiniStatementRequestBody is the type of the "connect" service
// "AccountMiniStatement" endpoint HTTP request body.
type AccountMiniStatementRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
}

// AccountTransactionsRequestBody is the type of the "connect" service
// "AccountTransactions" endpoint HTTP request body.
type AccountTransactionsRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// No Of Latest Transactions To Be Returned
	NoOfTransactions *int `form:"NoOfTransactions,omitempty" json:"NoOfTransactions,omitempty" xml:"NoOfTransactions,omitempty"`
}

// AccountValidationRequestBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP request body.
type AccountValidationRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
}

// ExchangeRateRequestBody is the type of the "connect" service "ExchangeRate"
// endpoint HTTP request body.
type ExchangeRateRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// From Currency Code in ISO Currency Code
	FromCurrencyCode *string `form:"FromCurrencyCode,omitempty" json:"FromCurrencyCode,omitempty" xml:"FromCurrencyCode,omitempty"`
	// To Currency Code in ISO Currency Code
	ToCurrencyCode *string `form:"ToCurrencyCode,omitempty" json:"ToCurrencyCode,omitempty" xml:"ToCurrencyCode,omitempty"`
}

// IFTAccountToAccountRequestBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP request body.
type IFTAccountToAccountRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  *string                             `form:"CallBackUrl,omitempty" json:"CallBackUrl,omitempty" xml:"CallBackUrl,omitempty"`
	Source       *SourceAccountTXNRequestRequestBody `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations *DestinationsTXNRequestRequestBody  `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// INSSimulationRequestBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP request body.
type INSSimulationRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Notification Service Name identifier
	ServiceName *string `form:"ServiceName,omitempty" json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// Notification Code identifier
	NotificationCode *string `form:"NotificationCode,omitempty" json:"NotificationCode,omitempty" xml:"NotificationCode,omitempty"`
	// Transaction Payment Reference
	PaymentRef *string `form:"PaymentRef,omitempty" json:"PaymentRef,omitempty" xml:"PaymentRef,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Posting date of the Transaction
	TransactionDate *string `form:"TransactionDate,omitempty" json:"TransactionDate,omitempty" xml:"TransactionDate,omitempty"`
	// The event of the transaction
	EventType *string `form:"EventType,omitempty" json:"EventType,omitempty" xml:"EventType,omitempty"`
	// Transaction Posting account currency in ISO Currency Code
	Currency *string `form:"Currency,omitempty" json:"Currency,omitempty" xml:"Currency,omitempty"`
	// Exchange Rate
	ExchangeRate *uint64 `form:"ExchangeRate,omitempty" json:"ExchangeRate,omitempty" xml:"ExchangeRate,omitempty"`
	// Transaction Posting account narration
	Narration *string              `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	CustMemo  *CustMemoRequestBody `form:"CustMemo,omitempty" json:"CustMemo,omitempty" xml:"CustMemo,omitempty"`
	// Transaction Posting Value Date
	ValueDate *string `form:"ValueDate,omitempty" json:"ValueDate,omitempty" xml:"ValueDate,omitempty"`
	// Transaction Posting Entry Date
	EntryDate *string `form:"EntryDate,omitempty" json:"EntryDate,omitempty" xml:"EntryDate,omitempty"`
	// Co-operative Bank's processed transaction number
	TransactionID *string `form:"TransactionId,omitempty" json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
}

// PesaLinkSendToAccountRequestBody is the type of the "connect" service
// "PesaLinkSendToAccount" endpoint HTTP request body.
type PesaLinkSendToAccountRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  *string                                     `form:"CallBackUrl,omitempty" json:"CallBackUrl,omitempty" xml:"CallBackUrl,omitempty"`
	Source       *SourceAccountTransactionRequestRequestBody `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations *DestinationsTransactionRequestRequestBody  `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// PesaLinkSendToPhoneRequestBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP request body.
type PesaLinkSendToPhoneRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  *string                                     `form:"CallBackUrl,omitempty" json:"CallBackUrl,omitempty" xml:"CallBackUrl,omitempty"`
	Source       *SourceAccountTransactionRequestRequestBody `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations *DestinationsTransactionRequestRequestBody  `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// SendToMPesaRequestBody is the type of the "connect" service "SendToMPesa"
// endpoint HTTP request body.
type SendToMPesaRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  *string                                     `form:"CallBackUrl,omitempty" json:"CallBackUrl,omitempty" xml:"CallBackUrl,omitempty"`
	Source       *SourceAccountTransactionRequestRequestBody `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations *DestinationsTransactionRequestRequestBody  `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// TransactionStatusRequestBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP request body.
type TransactionStatusRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
}

// AccountBalanceResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body.
type AccountBalanceResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName *string `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// Account currency in ISO Currency Code
	Currency *string `form:"Currency,omitempty" json:"Currency,omitempty" xml:"Currency,omitempty"`
	// Posting account number
	ProductName *string `form:"ProductName,omitempty" json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// Cleared Balance Amount
	ClearedBalance *float64 `form:"ClearedBalance,omitempty" json:"ClearedBalance,omitempty" xml:"ClearedBalance,omitempty"`
	// Cleared Balance Amount
	BookedBalance *float64 `form:"BookedBalance,omitempty" json:"BookedBalance,omitempty" xml:"BookedBalance,omitempty"`
	// Cleared Balance Amount
	BlockedBalance *float64 `form:"BlockedBalance,omitempty" json:"BlockedBalance,omitempty" xml:"BlockedBalance,omitempty"`
	// Cleared Balance Amount
	AvailableBalance *float64 `form:"AvailableBalance,omitempty" json:"AvailableBalance,omitempty" xml:"AvailableBalance,omitempty"`
	// Cleared Balance Amount
	ArrearsAmount *float64 `form:"ArrearsAmount,omitempty" json:"ArrearsAmount,omitempty" xml:"ArrearsAmount,omitempty"`
	// Posting account number
	BranchName *string `form:"BranchName,omitempty" json:"BranchName,omitempty" xml:"BranchName,omitempty"`
	// Posting account number
	BranchSortCode *string `form:"BranchSortCode,omitempty" json:"BranchSortCode,omitempty" xml:"BranchSortCode,omitempty"`
	// Cleared Balance Amount
	AverageBalance *float64 `form:"AverageBalance,omitempty" json:"AverageBalance,omitempty" xml:"AverageBalance,omitempty"`
	// Cleared Balance Amount
	UnclearedBalance *float64 `form:"UnclearedBalance,omitempty" json:"UnclearedBalance,omitempty" xml:"UnclearedBalance,omitempty"`
	// Cleared Balance Amount
	ODLimit *float64 `form:"ODLimit,omitempty" json:"ODLimit,omitempty" xml:"ODLimit,omitempty"`
	// Cleared Balance Amount
	CreditLimit *float64 `form:"CreditLimit,omitempty" json:"CreditLimit,omitempty" xml:"CreditLimit,omitempty"`
}

// AccountFullStatementResponseBody is the type of the "connect" service
// "AccountFullStatement" endpoint HTTP response body.
type AccountFullStatementResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Acknowledgement/Response Message Code Description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName  *string                           `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Transactions []*AccountTransactionResponseBody `form:"Transactions,omitempty" json:"Transactions,omitempty" xml:"Transactions,omitempty"`
}

// AccountMiniStatementResponseBody is the type of the "connect" service
// "AccountMiniStatement" endpoint HTTP response body.
type AccountMiniStatementResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Acknowledgement/Response Message Code Description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName  *string                           `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Transactions []*AccountTransactionResponseBody `form:"Transactions,omitempty" json:"Transactions,omitempty" xml:"Transactions,omitempty"`
}

// AccountTransactionsResponseBody is the type of the "connect" service
// "AccountTransactions" endpoint HTTP response body.
type AccountTransactionsResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Acknowledgement/Response Message Code Description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Account Name
	AccountName *string `form:"AccountName,omitempty" json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// No Of Latest Transactions To Be Returned
	NoOfTransactions *int `form:"NoOfTransactions,omitempty" json:"NoOfTransactions,omitempty" xml:"NoOfTransactions,omitempty"`
	// Total Credits Amount
	TotalCredits *float64 `form:"TotalCredits,omitempty" json:"TotalCredits,omitempty" xml:"TotalCredits,omitempty"`
	// Total Debits Amount
	TotalDebits  *float64                          `form:"TotalDebits,omitempty" json:"TotalDebits,omitempty" xml:"TotalDebits,omitempty"`
	Transactions []*AccountTransactionResponseBody `form:"Transactions,omitempty" json:"Transactions,omitempty" xml:"Transactions,omitempty"`
}

// AccountValidationResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body.
type AccountValidationResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// ExchangeRateResponseBody is the type of the "connect" service "ExchangeRate"
// endpoint HTTP response body.
type ExchangeRateResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
	// From Currency Code in ISO Currency Code
	FromCurrencyCode *string `form:"FromCurrencyCode,omitempty" json:"FromCurrencyCode,omitempty" xml:"FromCurrencyCode,omitempty"`
	// To Currency Code in ISO Currency Code
	ToCurrencyCode *string `form:"ToCurrencyCode,omitempty" json:"ToCurrencyCode,omitempty" xml:"ToCurrencyCode,omitempty"`
	// Exchange rate type
	RateType *string `form:"RateType,omitempty" json:"RateType,omitempty" xml:"RateType,omitempty"`
	// Exchange rate amount
	Rate *float64 `form:"Rate,omitempty" json:"Rate,omitempty" xml:"Rate,omitempty"`
	// Exchange rate tolerance
	Tolerance *float64 `form:"Tolerance,omitempty" json:"Tolerance,omitempty" xml:"Tolerance,omitempty"`
	// Exchange rate is a multiply or a divide
	MultiplyDivide *string `form:"MultiplyDivide,omitempty" json:"MultiplyDivide,omitempty" xml:"MultiplyDivide,omitempty"`
}

// IFTAccountToAccountResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body.
type IFTAccountToAccountResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Acknowledgement/Response Message Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// INSSimulationResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body.
type INSSimulationResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Acknowledgement/Response Message Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToAccountResponseBody is the type of the "connect" service
// "PesaLinkSendToAccount" endpoint HTTP response body.
type PesaLinkSendToAccountResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Acknowledgement/Response Message Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToPhoneResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body.
type PesaLinkSendToPhoneResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Acknowledgement/Response Message Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// SendToMPesaResponseBody is the type of the "connect" service "SendToMPesa"
// endpoint HTTP response body.
type SendToMPesaResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Acknowledgement/Response Message Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// TransactionStatusOKResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body.
type TransactionStatusOKResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Acknowledgement/Response Message Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string                            `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
	Source             *SourceAccountResponseBody        `form:"Source" json:"Source" xml:"Source"`
	Destinations       []*DestinationAccountResponseBody `form:"Destinations" json:"Destinations" xml:"Destinations"`
}

// AccountBalanceBadRequestResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "bad_request" error.
type AccountBalanceBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// AccountBalanceUnauthorizedResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "unauthorized" error.
type AccountBalanceUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountBalanceNotAllowedResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "not_allowed" error.
type AccountBalanceNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountBalanceTimeoutResponseBody is the type of the "connect" service
// "AccountBalance" endpoint HTTP response body for the "timeout" error.
type AccountBalanceTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountFullStatementBadRequestResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "bad_request" error.
type AccountFullStatementBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// AccountFullStatementUnauthorizedResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "unauthorized" error.
type AccountFullStatementUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountFullStatementNotFoundResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "not_found" error.
type AccountFullStatementNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountFullStatementNotAllowedResponseBody is the type of the "connect"
// service "AccountFullStatement" endpoint HTTP response body for the
// "not_allowed" error.
type AccountFullStatementNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountFullStatementTimeoutResponseBody is the type of the "connect" service
// "AccountFullStatement" endpoint HTTP response body for the "timeout" error.
type AccountFullStatementTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountMiniStatementBadRequestResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "bad_request" error.
type AccountMiniStatementBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// AccountMiniStatementUnauthorizedResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "unauthorized" error.
type AccountMiniStatementUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountMiniStatementNotFoundResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "not_found" error.
type AccountMiniStatementNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountMiniStatementNotAllowedResponseBody is the type of the "connect"
// service "AccountMiniStatement" endpoint HTTP response body for the
// "not_allowed" error.
type AccountMiniStatementNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountMiniStatementTimeoutResponseBody is the type of the "connect" service
// "AccountMiniStatement" endpoint HTTP response body for the "timeout" error.
type AccountMiniStatementTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountTransactionsBadRequestResponseBody is the type of the "connect"
// service "AccountTransactions" endpoint HTTP response body for the
// "bad_request" error.
type AccountTransactionsBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// AccountTransactionsUnauthorizedResponseBody is the type of the "connect"
// service "AccountTransactions" endpoint HTTP response body for the
// "unauthorized" error.
type AccountTransactionsUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountTransactionsNotAllowedResponseBody is the type of the "connect"
// service "AccountTransactions" endpoint HTTP response body for the
// "not_allowed" error.
type AccountTransactionsNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountTransactionsTimeoutResponseBody is the type of the "connect" service
// "AccountTransactions" endpoint HTTP response body for the "timeout" error.
type AccountTransactionsTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountValidationBadRequestResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "bad_request" error.
type AccountValidationBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// AccountValidationUnauthorizedResponseBody is the type of the "connect"
// service "AccountValidation" endpoint HTTP response body for the
// "unauthorized" error.
type AccountValidationUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// AccountValidationNotFoundResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "not_found" error.
type AccountValidationNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountValidationNotAllowedResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "not_allowed" error.
type AccountValidationNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountValidationTimeoutResponseBody is the type of the "connect" service
// "AccountValidation" endpoint HTTP response body for the "timeout" error.
type AccountValidationTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeRateBadRequestResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "bad_request" error.
type ExchangeRateBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// ExchangeRateUnauthorizedResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "unauthorized" error.
type ExchangeRateUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// ExchangeRateNotFoundResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "not_found" error.
type ExchangeRateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeRateNotAllowedResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "not_allowed" error.
type ExchangeRateNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeRateTimeoutResponseBody is the type of the "connect" service
// "ExchangeRate" endpoint HTTP response body for the "timeout" error.
type ExchangeRateTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IFTAccountToAccountBadRequestResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "bad_request" error.
type IFTAccountToAccountBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// IFTAccountToAccountForbiddenResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "forbidden" error.
type IFTAccountToAccountForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// IFTAccountToAccountConflictResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body for the "conflict" error.
type IFTAccountToAccountConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// IFTAccountToAccountUnauthorizedResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "unauthorized" error.
type IFTAccountToAccountUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// IFTAccountToAccountNotFoundResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body for the "not_found" error.
type IFTAccountToAccountNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IFTAccountToAccountNotAllowedResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "not_allowed" error.
type IFTAccountToAccountNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IFTAccountToAccountTimeoutResponseBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP response body for the "timeout" error.
type IFTAccountToAccountTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// INSSimulationUnauthorizedResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "unauthorized" error.
type INSSimulationUnauthorizedResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// INSSimulationBadRequestResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "bad_request" error.
type INSSimulationBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// INSSimulationNotAllowedResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "not_allowed" error.
type INSSimulationNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// INSSimulationTimeoutResponseBody is the type of the "connect" service
// "INSSimulation" endpoint HTTP response body for the "timeout" error.
type INSSimulationTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToAccountBadRequestResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "bad_request" error.
type PesaLinkSendToAccountBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToAccountForbiddenResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "forbidden" error.
type PesaLinkSendToAccountForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToAccountConflictResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "conflict" error.
type PesaLinkSendToAccountConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToAccountUnauthorizedResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "unauthorized" error.
type PesaLinkSendToAccountUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// PesaLinkSendToAccountNotFoundResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "not_found" error.
type PesaLinkSendToAccountNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToAccountNotAllowedResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "not_allowed" error.
type PesaLinkSendToAccountNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToAccountTimeoutResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "timeout" error.
type PesaLinkSendToAccountTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToPhoneBadRequestResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "bad_request" error.
type PesaLinkSendToPhoneBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToPhoneForbiddenResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "forbidden" error.
type PesaLinkSendToPhoneForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToPhoneConflictResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body for the "conflict" error.
type PesaLinkSendToPhoneConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// PesaLinkSendToPhoneUnauthorizedResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "unauthorized" error.
type PesaLinkSendToPhoneUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// PesaLinkSendToPhoneNotFoundResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body for the "not_found" error.
type PesaLinkSendToPhoneNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToPhoneNotAllowedResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "not_allowed" error.
type PesaLinkSendToPhoneNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToPhoneTimeoutResponseBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP response body for the "timeout" error.
type PesaLinkSendToPhoneTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendToMPesaBadRequestResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "bad_request" error.
type SendToMPesaBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// SendToMPesaForbiddenResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "forbidden" error.
type SendToMPesaForbiddenResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// SendToMPesaConflictResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "conflict" error.
type SendToMPesaConflictResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// SendToMPesaUnauthorizedResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "unauthorized" error.
type SendToMPesaUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// SendToMPesaNotFoundResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "not_found" error.
type SendToMPesaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendToMPesaNotAllowedResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "not_allowed" error.
type SendToMPesaNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendToMPesaTimeoutResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "timeout" error.
type SendToMPesaTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TransactionStatusBadRequestResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "bad_request" error.
type TransactionStatusBadRequestResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Message Response Code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Message Code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// TransactionStatusUnauthorizedResponseBody is the type of the "connect"
// service "TransactionStatus" endpoint HTTP response body for the
// "unauthorized" error.
type TransactionStatusUnauthorizedResponseBody struct {
	Fault *MissingCredentialFaultResponseBody `form:"Fault,omitempty" json:"Fault,omitempty" xml:"Fault,omitempty"`
}

// TransactionStatusNotFoundResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "not_found" error.
type TransactionStatusNotFoundResponseBody struct {
	// Your unique transaction request message identifier
	MessageReference string `form:"MessageReference" json:"MessageReference" xml:"MessageReference"`
	// Acknowledgement message creation timestamp
	MessageDateTime string `form:"MessageDateTime" json:"MessageDateTime" xml:"MessageDateTime"`
	// Transaction request message code
	MessageCode string `form:"MessageCode" json:"MessageCode" xml:"MessageCode"`
	// Transaction request message code description
	MessageDescription string `form:"MessageDescription" json:"MessageDescription" xml:"MessageDescription"`
}

// TransactionStatusNotAllowedResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "not_allowed" error.
type TransactionStatusNotAllowedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TransactionStatusTimeoutResponseBody is the type of the "connect" service
// "TransactionStatus" endpoint HTTP response body for the "timeout" error.
type TransactionStatusTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MissingCredentialFaultResponseBody is used to define fields on response body
// types.
type MissingCredentialFaultResponseBody struct {
	Code        *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message     *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// AccountTransactionResponseBody is used to define fields on response body
// types.
type AccountTransactionResponseBody struct {
	// Unique Transaction Posting Identifier
	TransactionID *string `form:"TransactionId,omitempty" json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
	// Transaction Date
	TransactionDate *string `form:"TransactionDate,omitempty" json:"TransactionDate,omitempty" xml:"TransactionDate,omitempty"`
	// Transaction Value Date
	ValueDate *string `form:"ValueDate,omitempty" json:"ValueDate,omitempty" xml:"ValueDate,omitempty"`
	// Transaction Narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	// Transaction Type, C for Credit or D for Debit
	TransactionType *string `form:"TransactionType,omitempty" json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
	// Transaction Service Point
	ServicePoint *string `form:"ServicePoint,omitempty" json:"ServicePoint,omitempty" xml:"ServicePoint,omitempty"`
	// Unique Transaction Reference
	TransactionReference *string `form:"TransactionReference,omitempty" json:"TransactionReference,omitempty" xml:"TransactionReference,omitempty"`
	// Transaction Credit Amount
	CreditAmount *float64 `form:"CreditAmount,omitempty" json:"CreditAmount,omitempty" xml:"CreditAmount,omitempty"`
	// Transaction Debit Amount
	DebitAmount *float64 `form:"DebitAmount,omitempty" json:"DebitAmount,omitempty" xml:"DebitAmount,omitempty"`
	// Account Running Cleared Balance
	RunningClearedBalance *float64 `form:"RunningClearedBalance,omitempty" json:"RunningClearedBalance,omitempty" xml:"RunningClearedBalance,omitempty"`
	// Account Running Book Balance
	RunningBookBalance *float64 `form:"RunningBookBalance,omitempty" json:"RunningBookBalance,omitempty" xml:"RunningBookBalance,omitempty"`
	// Account Debit Limit
	DebitLimit *float64 `form:"DebitLimit,omitempty" json:"DebitLimit,omitempty" xml:"DebitLimit,omitempty"`
	// Account Debit Limit Expiry Date
	LimitExpiryDate *string `form:"LimitExpiryDate,omitempty" json:"LimitExpiryDate,omitempty" xml:"LimitExpiryDate,omitempty"`
}

// SourceAccountResponseBody is used to define fields on response body types.
type SourceAccountResponseBody struct {
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// Transaction Amount
	Amount              float64 `form:"Amount" json:"Amount" xml:"Amount"`
	TransactionCurrency string  `form:"TransactionCurrency" json:"TransactionCurrency" xml:"TransactionCurrency"`
	// Posting account transaction narration
	Narration string `form:"Narration" json:"Narration" xml:"Narration"`
	// Posting leg response code
	ResponseCode *string `form:"ResponseCode,omitempty" json:"ResponseCode,omitempty" xml:"ResponseCode,omitempty"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// DestinationAccountResponseBody is used to define fields on response body
// types.
type DestinationAccountResponseBody struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber string `form:"ReferenceNumber" json:"ReferenceNumber" xml:"ReferenceNumber"`
	// Posting account number
	AccountNumber string `form:"AccountNumber" json:"AccountNumber" xml:"AccountNumber"`
	// Recipient phone number linked to a bank account in an IPSL participating bank
	MobileNumber *string `form:"MobileNumber,omitempty" json:"MobileNumber,omitempty" xml:"MobileNumber,omitempty"`
	// Recipient phone number linked to a bank account in an IPSL participating bank
	PhoneNumber *string `form:"PhoneNumber,omitempty" json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	// Posting account bank code
	BankCode *string `form:"BankCode,omitempty" json:"BankCode,omitempty" xml:"BankCode,omitempty"`
	// Transaction Amount
	Amount float64 `form:"Amount" json:"Amount" xml:"Amount"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency string `form:"TransactionCurrency" json:"TransactionCurrency" xml:"TransactionCurrency"`
	// Posting account transaction narration
	Narration string `form:"Narration" json:"Narration" xml:"Narration"`
	// Co-operative Bank's processed transaction number
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Posting leg response code
	ResponseCode *string `form:"ResponseCode,omitempty" json:"ResponseCode,omitempty" xml:"ResponseCode,omitempty"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// SourceAccountTXNRequestRequestBody is used to define fields on request body
// types.
type SourceAccountTXNRequestRequestBody struct {
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency *string `form:"TransactionCurrency,omitempty" json:"TransactionCurrency,omitempty" xml:"TransactionCurrency,omitempty"`
	// Posting account transaction narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
}

// DestinationsTXNRequestRequestBody is used to define fields on request body
// types.
type DestinationsTXNRequestRequestBody struct {
	DestinationsTXNRequest []*DestinationAccountTXNRequestRequestBody `form:"DestinationsTXNRequest,omitempty" json:"DestinationsTXNRequest,omitempty" xml:"DestinationsTXNRequest,omitempty"`
}

// DestinationAccountTXNRequestRequestBody is used to define fields on request
// body types.
type DestinationAccountTXNRequestRequestBody struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber *string `form:"ReferenceNumber,omitempty" json:"ReferenceNumber,omitempty" xml:"ReferenceNumber,omitempty"`
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency *string `form:"TransactionCurrency,omitempty" json:"TransactionCurrency,omitempty" xml:"TransactionCurrency,omitempty"`
	// Posting account transaction narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
}

// CustMemoRequestBody is used to define fields on request body types.
type CustMemoRequestBody struct {
	// CustMemo CustMemoLine1
	CustMemoLine1 *string `form:"CustMemoLine1,omitempty" json:"CustMemoLine1,omitempty" xml:"CustMemoLine1,omitempty"`
	// CustMemo CustMemoLine2
	CustMemoLine2 *string `form:"CustMemoLine2,omitempty" json:"CustMemoLine2,omitempty" xml:"CustMemoLine2,omitempty"`
	// CustMemo CustMemoLine2
	CustMemoLine3 *string `form:"CustMemoLine3,omitempty" json:"CustMemoLine3,omitempty" xml:"CustMemoLine3,omitempty"`
}

// SourceAccountTransactionRequestRequestBody is used to define fields on
// request body types.
type SourceAccountTransactionRequestRequestBody struct {
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency *string `form:"TransactionCurrency,omitempty" json:"TransactionCurrency,omitempty" xml:"TransactionCurrency,omitempty"`
	// Posting account transaction narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// DestinationsTransactionRequestRequestBody is used to define fields on
// request body types.
type DestinationsTransactionRequestRequestBody struct {
	DestinationAccountTransactionRequest []*DestinationAccountTransactionRequestRequestBody `form:"DestinationAccountTransactionRequest,omitempty" json:"DestinationAccountTransactionRequest,omitempty" xml:"DestinationAccountTransactionRequest,omitempty"`
}

// DestinationAccountTransactionRequestRequestBody is used to define fields on
// request body types.
type DestinationAccountTransactionRequestRequestBody struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber *string `form:"ReferenceNumber,omitempty" json:"ReferenceNumber,omitempty" xml:"ReferenceNumber,omitempty"`
	// Recipient phone number linked to a bank account in an IPSL participating bank
	MobileNumber *string `form:"MobileNumber,omitempty" json:"MobileNumber,omitempty" xml:"MobileNumber,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Posting account transaction narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
}

// NewAccountBalanceResponseBody builds the HTTP response body from the result
// of the "AccountBalance" endpoint of the "connect" service.
func NewAccountBalanceResponseBody(res *connectviews.AccountBalanceSuccessResponseView) *AccountBalanceResponseBody {
	body := &AccountBalanceResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
		Currency:           res.Currency,
		ProductName:        res.ProductName,
		ClearedBalance:     res.ClearedBalance,
		BookedBalance:      res.BookedBalance,
		BlockedBalance:     res.BlockedBalance,
		AvailableBalance:   res.AvailableBalance,
		ArrearsAmount:      res.ArrearsAmount,
		BranchName:         res.BranchName,
		BranchSortCode:     res.BranchSortCode,
		AverageBalance:     res.AverageBalance,
		UnclearedBalance:   res.UnclearedBalance,
		ODLimit:            res.ODLimit,
		CreditLimit:        res.CreditLimit,
	}
	return body
}

// NewAccountFullStatementResponseBody builds the HTTP response body from the
// result of the "AccountFullStatement" endpoint of the "connect" service.
func NewAccountFullStatementResponseBody(res *connectviews.AccountFullStatementSuccessResponseView) *AccountFullStatementResponseBody {
	body := &AccountFullStatementResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
	}
	if res.Transactions != nil {
		body.Transactions = make([]*AccountTransactionResponseBody, len(res.Transactions))
		for i, val := range res.Transactions {
			body.Transactions[i] = marshalConnectviewsAccountTransactionViewToAccountTransactionResponseBody(val)
		}
	}
	return body
}

// NewAccountMiniStatementResponseBody builds the HTTP response body from the
// result of the "AccountMiniStatement" endpoint of the "connect" service.
func NewAccountMiniStatementResponseBody(res *connectviews.AccountMiniStatementSuccessResponseView) *AccountMiniStatementResponseBody {
	body := &AccountMiniStatementResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
	}
	if res.Transactions != nil {
		body.Transactions = make([]*AccountTransactionResponseBody, len(res.Transactions))
		for i, val := range res.Transactions {
			body.Transactions[i] = marshalConnectviewsAccountTransactionViewToAccountTransactionResponseBody(val)
		}
	}
	return body
}

// NewAccountTransactionsResponseBody builds the HTTP response body from the
// result of the "AccountTransactions" endpoint of the "connect" service.
func NewAccountTransactionsResponseBody(res *connectviews.AccountTransactionsSuccessResponseView) *AccountTransactionsResponseBody {
	body := &AccountTransactionsResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
		AccountNumber:      res.AccountNumber,
		AccountName:        res.AccountName,
		NoOfTransactions:   res.NoOfTransactions,
		TotalCredits:       res.TotalCredits,
		TotalDebits:        res.TotalDebits,
	}
	if res.Transactions != nil {
		body.Transactions = make([]*AccountTransactionResponseBody, len(res.Transactions))
		for i, val := range res.Transactions {
			body.Transactions[i] = marshalConnectviewsAccountTransactionViewToAccountTransactionResponseBody(val)
		}
	}
	return body
}

// NewAccountValidationResponseBody builds the HTTP response body from the
// result of the "AccountValidation" endpoint of the "connect" service.
func NewAccountValidationResponseBody(res *connectviews.AccountValidationSuccessResponseView) *AccountValidationResponseBody {
	body := &AccountValidationResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
	}
	return body
}

// NewExchangeRateResponseBody builds the HTTP response body from the result of
// the "ExchangeRate" endpoint of the "connect" service.
func NewExchangeRateResponseBody(res *connectviews.ExchangeRateSuccessResponseView) *ExchangeRateResponseBody {
	body := &ExchangeRateResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
		FromCurrencyCode:   res.FromCurrencyCode,
		ToCurrencyCode:     res.ToCurrencyCode,
		RateType:           res.RateType,
		Rate:               res.Rate,
		Tolerance:          res.Tolerance,
		MultiplyDivide:     res.MultiplyDivide,
	}
	return body
}

// NewIFTAccountToAccountResponseBody builds the HTTP response body from the
// result of the "IFTAccountToAccount" endpoint of the "connect" service.
func NewIFTAccountToAccountResponseBody(res *connectviews.SuccessAcknowledgementView) *IFTAccountToAccountResponseBody {
	body := &IFTAccountToAccountResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
	}
	return body
}

// NewINSSimulationResponseBody builds the HTTP response body from the result
// of the "INSSimulation" endpoint of the "connect" service.
func NewINSSimulationResponseBody(res *connectviews.SuccessAcknowledgementView) *INSSimulationResponseBody {
	body := &INSSimulationResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToAccountResponseBody builds the HTTP response body from the
// result of the "PesaLinkSendToAccount" endpoint of the "connect" service.
func NewPesaLinkSendToAccountResponseBody(res *connectviews.SuccessAcknowledgementView) *PesaLinkSendToAccountResponseBody {
	body := &PesaLinkSendToAccountResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToPhoneResponseBody builds the HTTP response body from the
// result of the "PesaLinkSendToPhone" endpoint of the "connect" service.
func NewPesaLinkSendToPhoneResponseBody(res *connectviews.SuccessAcknowledgementView) *PesaLinkSendToPhoneResponseBody {
	body := &PesaLinkSendToPhoneResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
	}
	return body
}

// NewSendToMPesaResponseBody builds the HTTP response body from the result of
// the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaResponseBody(res *connectviews.SuccessAcknowledgementView) *SendToMPesaResponseBody {
	body := &SendToMPesaResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
	}
	return body
}

// NewTransactionStatusOKResponseBody builds the HTTP response body from the
// result of the "TransactionStatus" endpoint of the "connect" service.
func NewTransactionStatusOKResponseBody(res *connectviews.SuccessResponseView) *TransactionStatusOKResponseBody {
	body := &TransactionStatusOKResponseBody{
		MessageReference:   *res.MessageReference,
		MessageDateTime:    *res.MessageDateTime,
		MessageCode:        *res.MessageCode,
		MessageDescription: *res.MessageDescription,
	}
	if res.Source != nil {
		body.Source = marshalConnectviewsSourceAccountViewToSourceAccountResponseBody(res.Source)
	}
	if res.Destinations != nil {
		body.Destinations = make([]*DestinationAccountResponseBody, len(res.Destinations))
		for i, val := range res.Destinations {
			body.Destinations[i] = marshalConnectviewsDestinationAccountViewToDestinationAccountResponseBody(val)
		}
	}
	return body
}

// NewAccountBalanceBadRequestResponseBody builds the HTTP response body from
// the result of the "AccountBalance" endpoint of the "connect" service.
func NewAccountBalanceBadRequestResponseBody(res *connect.ErrorResponse) *AccountBalanceBadRequestResponseBody {
	body := &AccountBalanceBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewAccountBalanceUnauthorizedResponseBody builds the HTTP response body from
// the result of the "AccountBalance" endpoint of the "connect" service.
func NewAccountBalanceUnauthorizedResponseBody(res *connect.MissingCredentials) *AccountBalanceUnauthorizedResponseBody {
	body := &AccountBalanceUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewAccountBalanceNotAllowedResponseBody builds the HTTP response body from
// the result of the "AccountBalance" endpoint of the "connect" service.
func NewAccountBalanceNotAllowedResponseBody(res *goa.ServiceError) *AccountBalanceNotAllowedResponseBody {
	body := &AccountBalanceNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountBalanceTimeoutResponseBody builds the HTTP response body from the
// result of the "AccountBalance" endpoint of the "connect" service.
func NewAccountBalanceTimeoutResponseBody(res *goa.ServiceError) *AccountBalanceTimeoutResponseBody {
	body := &AccountBalanceTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountFullStatementBadRequestResponseBody builds the HTTP response body
// from the result of the "AccountFullStatement" endpoint of the "connect"
// service.
func NewAccountFullStatementBadRequestResponseBody(res *connect.ErrorResponse) *AccountFullStatementBadRequestResponseBody {
	body := &AccountFullStatementBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewAccountFullStatementUnauthorizedResponseBody builds the HTTP response
// body from the result of the "AccountFullStatement" endpoint of the "connect"
// service.
func NewAccountFullStatementUnauthorizedResponseBody(res *connect.MissingCredentials) *AccountFullStatementUnauthorizedResponseBody {
	body := &AccountFullStatementUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewAccountFullStatementNotFoundResponseBody builds the HTTP response body
// from the result of the "AccountFullStatement" endpoint of the "connect"
// service.
func NewAccountFullStatementNotFoundResponseBody(res *goa.ServiceError) *AccountFullStatementNotFoundResponseBody {
	body := &AccountFullStatementNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountFullStatementNotAllowedResponseBody builds the HTTP response body
// from the result of the "AccountFullStatement" endpoint of the "connect"
// service.
func NewAccountFullStatementNotAllowedResponseBody(res *goa.ServiceError) *AccountFullStatementNotAllowedResponseBody {
	body := &AccountFullStatementNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountFullStatementTimeoutResponseBody builds the HTTP response body
// from the result of the "AccountFullStatement" endpoint of the "connect"
// service.
func NewAccountFullStatementTimeoutResponseBody(res *goa.ServiceError) *AccountFullStatementTimeoutResponseBody {
	body := &AccountFullStatementTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountMiniStatementBadRequestResponseBody builds the HTTP response body
// from the result of the "AccountMiniStatement" endpoint of the "connect"
// service.
func NewAccountMiniStatementBadRequestResponseBody(res *connect.ErrorResponse) *AccountMiniStatementBadRequestResponseBody {
	body := &AccountMiniStatementBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewAccountMiniStatementUnauthorizedResponseBody builds the HTTP response
// body from the result of the "AccountMiniStatement" endpoint of the "connect"
// service.
func NewAccountMiniStatementUnauthorizedResponseBody(res *connect.MissingCredentials) *AccountMiniStatementUnauthorizedResponseBody {
	body := &AccountMiniStatementUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewAccountMiniStatementNotFoundResponseBody builds the HTTP response body
// from the result of the "AccountMiniStatement" endpoint of the "connect"
// service.
func NewAccountMiniStatementNotFoundResponseBody(res *goa.ServiceError) *AccountMiniStatementNotFoundResponseBody {
	body := &AccountMiniStatementNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountMiniStatementNotAllowedResponseBody builds the HTTP response body
// from the result of the "AccountMiniStatement" endpoint of the "connect"
// service.
func NewAccountMiniStatementNotAllowedResponseBody(res *goa.ServiceError) *AccountMiniStatementNotAllowedResponseBody {
	body := &AccountMiniStatementNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountMiniStatementTimeoutResponseBody builds the HTTP response body
// from the result of the "AccountMiniStatement" endpoint of the "connect"
// service.
func NewAccountMiniStatementTimeoutResponseBody(res *goa.ServiceError) *AccountMiniStatementTimeoutResponseBody {
	body := &AccountMiniStatementTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountTransactionsBadRequestResponseBody builds the HTTP response body
// from the result of the "AccountTransactions" endpoint of the "connect"
// service.
func NewAccountTransactionsBadRequestResponseBody(res *connect.ErrorResponse) *AccountTransactionsBadRequestResponseBody {
	body := &AccountTransactionsBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewAccountTransactionsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "AccountTransactions" endpoint of the "connect"
// service.
func NewAccountTransactionsUnauthorizedResponseBody(res *connect.MissingCredentials) *AccountTransactionsUnauthorizedResponseBody {
	body := &AccountTransactionsUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewAccountTransactionsNotAllowedResponseBody builds the HTTP response body
// from the result of the "AccountTransactions" endpoint of the "connect"
// service.
func NewAccountTransactionsNotAllowedResponseBody(res *goa.ServiceError) *AccountTransactionsNotAllowedResponseBody {
	body := &AccountTransactionsNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountTransactionsTimeoutResponseBody builds the HTTP response body from
// the result of the "AccountTransactions" endpoint of the "connect" service.
func NewAccountTransactionsTimeoutResponseBody(res *goa.ServiceError) *AccountTransactionsTimeoutResponseBody {
	body := &AccountTransactionsTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountValidationBadRequestResponseBody builds the HTTP response body
// from the result of the "AccountValidation" endpoint of the "connect" service.
func NewAccountValidationBadRequestResponseBody(res *connect.ErrorResponse) *AccountValidationBadRequestResponseBody {
	body := &AccountValidationBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewAccountValidationUnauthorizedResponseBody builds the HTTP response body
// from the result of the "AccountValidation" endpoint of the "connect" service.
func NewAccountValidationUnauthorizedResponseBody(res *connect.MissingCredentials) *AccountValidationUnauthorizedResponseBody {
	body := &AccountValidationUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewAccountValidationNotFoundResponseBody builds the HTTP response body from
// the result of the "AccountValidation" endpoint of the "connect" service.
func NewAccountValidationNotFoundResponseBody(res *goa.ServiceError) *AccountValidationNotFoundResponseBody {
	body := &AccountValidationNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountValidationNotAllowedResponseBody builds the HTTP response body
// from the result of the "AccountValidation" endpoint of the "connect" service.
func NewAccountValidationNotAllowedResponseBody(res *goa.ServiceError) *AccountValidationNotAllowedResponseBody {
	body := &AccountValidationNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountValidationTimeoutResponseBody builds the HTTP response body from
// the result of the "AccountValidation" endpoint of the "connect" service.
func NewAccountValidationTimeoutResponseBody(res *goa.ServiceError) *AccountValidationTimeoutResponseBody {
	body := &AccountValidationTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeRateBadRequestResponseBody builds the HTTP response body from the
// result of the "ExchangeRate" endpoint of the "connect" service.
func NewExchangeRateBadRequestResponseBody(res *connect.ErrorResponse) *ExchangeRateBadRequestResponseBody {
	body := &ExchangeRateBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewExchangeRateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "ExchangeRate" endpoint of the "connect" service.
func NewExchangeRateUnauthorizedResponseBody(res *connect.MissingCredentials) *ExchangeRateUnauthorizedResponseBody {
	body := &ExchangeRateUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewExchangeRateNotFoundResponseBody builds the HTTP response body from the
// result of the "ExchangeRate" endpoint of the "connect" service.
func NewExchangeRateNotFoundResponseBody(res *goa.ServiceError) *ExchangeRateNotFoundResponseBody {
	body := &ExchangeRateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeRateNotAllowedResponseBody builds the HTTP response body from the
// result of the "ExchangeRate" endpoint of the "connect" service.
func NewExchangeRateNotAllowedResponseBody(res *goa.ServiceError) *ExchangeRateNotAllowedResponseBody {
	body := &ExchangeRateNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeRateTimeoutResponseBody builds the HTTP response body from the
// result of the "ExchangeRate" endpoint of the "connect" service.
func NewExchangeRateTimeoutResponseBody(res *goa.ServiceError) *ExchangeRateTimeoutResponseBody {
	body := &ExchangeRateTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIFTAccountToAccountBadRequestResponseBody builds the HTTP response body
// from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountBadRequestResponseBody(res *connect.AcknowledgementError400) *IFTAccountToAccountBadRequestResponseBody {
	body := &IFTAccountToAccountBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewIFTAccountToAccountForbiddenResponseBody builds the HTTP response body
// from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountForbiddenResponseBody(res *connect.AcknowledgementError403) *IFTAccountToAccountForbiddenResponseBody {
	body := &IFTAccountToAccountForbiddenResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewIFTAccountToAccountConflictResponseBody builds the HTTP response body
// from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountConflictResponseBody(res *connect.AcknowledgementError409) *IFTAccountToAccountConflictResponseBody {
	body := &IFTAccountToAccountConflictResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewIFTAccountToAccountUnauthorizedResponseBody builds the HTTP response body
// from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountUnauthorizedResponseBody(res *connect.MissingCredentials) *IFTAccountToAccountUnauthorizedResponseBody {
	body := &IFTAccountToAccountUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewIFTAccountToAccountNotFoundResponseBody builds the HTTP response body
// from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountNotFoundResponseBody(res *goa.ServiceError) *IFTAccountToAccountNotFoundResponseBody {
	body := &IFTAccountToAccountNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIFTAccountToAccountNotAllowedResponseBody builds the HTTP response body
// from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountNotAllowedResponseBody(res *goa.ServiceError) *IFTAccountToAccountNotAllowedResponseBody {
	body := &IFTAccountToAccountNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIFTAccountToAccountTimeoutResponseBody builds the HTTP response body from
// the result of the "IFTAccountToAccount" endpoint of the "connect" service.
func NewIFTAccountToAccountTimeoutResponseBody(res *goa.ServiceError) *IFTAccountToAccountTimeoutResponseBody {
	body := &IFTAccountToAccountTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewINSSimulationUnauthorizedResponseBody builds the HTTP response body from
// the result of the "INSSimulation" endpoint of the "connect" service.
func NewINSSimulationUnauthorizedResponseBody(res *connect.ErrorAcknowledgement) *INSSimulationUnauthorizedResponseBody {
	body := &INSSimulationUnauthorizedResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewINSSimulationBadRequestResponseBody builds the HTTP response body from
// the result of the "INSSimulation" endpoint of the "connect" service.
func NewINSSimulationBadRequestResponseBody(res *goa.ServiceError) *INSSimulationBadRequestResponseBody {
	body := &INSSimulationBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewINSSimulationNotAllowedResponseBody builds the HTTP response body from
// the result of the "INSSimulation" endpoint of the "connect" service.
func NewINSSimulationNotAllowedResponseBody(res *goa.ServiceError) *INSSimulationNotAllowedResponseBody {
	body := &INSSimulationNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewINSSimulationTimeoutResponseBody builds the HTTP response body from the
// result of the "INSSimulation" endpoint of the "connect" service.
func NewINSSimulationTimeoutResponseBody(res *goa.ServiceError) *INSSimulationTimeoutResponseBody {
	body := &INSSimulationTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToAccountBadRequestResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToAccount" endpoint of the "connect"
// service.
func NewPesaLinkSendToAccountBadRequestResponseBody(res *connect.AcknowledgementError400) *PesaLinkSendToAccountBadRequestResponseBody {
	body := &PesaLinkSendToAccountBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToAccountForbiddenResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToAccount" endpoint of the "connect"
// service.
func NewPesaLinkSendToAccountForbiddenResponseBody(res *connect.AcknowledgementError403) *PesaLinkSendToAccountForbiddenResponseBody {
	body := &PesaLinkSendToAccountForbiddenResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToAccountConflictResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToAccount" endpoint of the "connect"
// service.
func NewPesaLinkSendToAccountConflictResponseBody(res *connect.AcknowledgementError409) *PesaLinkSendToAccountConflictResponseBody {
	body := &PesaLinkSendToAccountConflictResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToAccountUnauthorizedResponseBody builds the HTTP response
// body from the result of the "PesaLinkSendToAccount" endpoint of the
// "connect" service.
func NewPesaLinkSendToAccountUnauthorizedResponseBody(res *connect.MissingCredentials) *PesaLinkSendToAccountUnauthorizedResponseBody {
	body := &PesaLinkSendToAccountUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewPesaLinkSendToAccountNotFoundResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToAccount" endpoint of the "connect"
// service.
func NewPesaLinkSendToAccountNotFoundResponseBody(res *goa.ServiceError) *PesaLinkSendToAccountNotFoundResponseBody {
	body := &PesaLinkSendToAccountNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToAccountNotAllowedResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToAccount" endpoint of the "connect"
// service.
func NewPesaLinkSendToAccountNotAllowedResponseBody(res *goa.ServiceError) *PesaLinkSendToAccountNotAllowedResponseBody {
	body := &PesaLinkSendToAccountNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToAccountTimeoutResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToAccount" endpoint of the "connect"
// service.
func NewPesaLinkSendToAccountTimeoutResponseBody(res *goa.ServiceError) *PesaLinkSendToAccountTimeoutResponseBody {
	body := &PesaLinkSendToAccountTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToPhoneBadRequestResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhoneBadRequestResponseBody(res *connect.AcknowledgementError400) *PesaLinkSendToPhoneBadRequestResponseBody {
	body := &PesaLinkSendToPhoneBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToPhoneForbiddenResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhoneForbiddenResponseBody(res *connect.AcknowledgementError403) *PesaLinkSendToPhoneForbiddenResponseBody {
	body := &PesaLinkSendToPhoneForbiddenResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToPhoneConflictResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhoneConflictResponseBody(res *connect.AcknowledgementError409) *PesaLinkSendToPhoneConflictResponseBody {
	body := &PesaLinkSendToPhoneConflictResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewPesaLinkSendToPhoneUnauthorizedResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhoneUnauthorizedResponseBody(res *connect.MissingCredentials) *PesaLinkSendToPhoneUnauthorizedResponseBody {
	body := &PesaLinkSendToPhoneUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewPesaLinkSendToPhoneNotFoundResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhoneNotFoundResponseBody(res *goa.ServiceError) *PesaLinkSendToPhoneNotFoundResponseBody {
	body := &PesaLinkSendToPhoneNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToPhoneNotAllowedResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhoneNotAllowedResponseBody(res *goa.ServiceError) *PesaLinkSendToPhoneNotAllowedResponseBody {
	body := &PesaLinkSendToPhoneNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToPhoneTimeoutResponseBody builds the HTTP response body from
// the result of the "PesaLinkSendToPhone" endpoint of the "connect" service.
func NewPesaLinkSendToPhoneTimeoutResponseBody(res *goa.ServiceError) *PesaLinkSendToPhoneTimeoutResponseBody {
	body := &PesaLinkSendToPhoneTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendToMPesaBadRequestResponseBody builds the HTTP response body from the
// result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaBadRequestResponseBody(res *connect.AcknowledgementError400) *SendToMPesaBadRequestResponseBody {
	body := &SendToMPesaBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewSendToMPesaForbiddenResponseBody builds the HTTP response body from the
// result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaForbiddenResponseBody(res *connect.AcknowledgementError403) *SendToMPesaForbiddenResponseBody {
	body := &SendToMPesaForbiddenResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewSendToMPesaConflictResponseBody builds the HTTP response body from the
// result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaConflictResponseBody(res *connect.AcknowledgementError409) *SendToMPesaConflictResponseBody {
	body := &SendToMPesaConflictResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewSendToMPesaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaUnauthorizedResponseBody(res *connect.MissingCredentials) *SendToMPesaUnauthorizedResponseBody {
	body := &SendToMPesaUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewSendToMPesaNotFoundResponseBody builds the HTTP response body from the
// result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaNotFoundResponseBody(res *goa.ServiceError) *SendToMPesaNotFoundResponseBody {
	body := &SendToMPesaNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendToMPesaNotAllowedResponseBody builds the HTTP response body from the
// result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaNotAllowedResponseBody(res *goa.ServiceError) *SendToMPesaNotAllowedResponseBody {
	body := &SendToMPesaNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendToMPesaTimeoutResponseBody builds the HTTP response body from the
// result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaTimeoutResponseBody(res *goa.ServiceError) *SendToMPesaTimeoutResponseBody {
	body := &SendToMPesaTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTransactionStatusBadRequestResponseBody builds the HTTP response body
// from the result of the "TransactionStatus" endpoint of the "connect" service.
func NewTransactionStatusBadRequestResponseBody(res *connect.ErrorResponse) *TransactionStatusBadRequestResponseBody {
	body := &TransactionStatusBadRequestResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewTransactionStatusUnauthorizedResponseBody builds the HTTP response body
// from the result of the "TransactionStatus" endpoint of the "connect" service.
func NewTransactionStatusUnauthorizedResponseBody(res *connect.MissingCredentials) *TransactionStatusUnauthorizedResponseBody {
	body := &TransactionStatusUnauthorizedResponseBody{}
	if res.Fault != nil {
		body.Fault = marshalConnectMissingCredentialFaultToMissingCredentialFaultResponseBody(res.Fault)
	}
	return body
}

// NewTransactionStatusNotFoundResponseBody builds the HTTP response body from
// the result of the "TransactionStatus" endpoint of the "connect" service.
func NewTransactionStatusNotFoundResponseBody(res *connect.NotFoundErrorResponse) *TransactionStatusNotFoundResponseBody {
	body := &TransactionStatusNotFoundResponseBody{
		MessageReference:   res.MessageReference,
		MessageDateTime:    res.MessageDateTime,
		MessageCode:        res.MessageCode,
		MessageDescription: res.MessageDescription,
	}
	return body
}

// NewTransactionStatusNotAllowedResponseBody builds the HTTP response body
// from the result of the "TransactionStatus" endpoint of the "connect" service.
func NewTransactionStatusNotAllowedResponseBody(res *goa.ServiceError) *TransactionStatusNotAllowedResponseBody {
	body := &TransactionStatusNotAllowedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTransactionStatusTimeoutResponseBody builds the HTTP response body from
// the result of the "TransactionStatus" endpoint of the "connect" service.
func NewTransactionStatusTimeoutResponseBody(res *goa.ServiceError) *TransactionStatusTimeoutResponseBody {
	body := &TransactionStatusTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountBalancePayload builds a connect service AccountBalance endpoint
// payload.
func NewAccountBalancePayload(body *AccountBalanceRequestBody, accessToken string) *connect.AccountBalancePayload {
	v := &connect.AccountBalancePayload{
		MessageReference: *body.MessageReference,
		AccountNumber:    *body.AccountNumber,
	}
	v.AccessToken = &accessToken

	return v
}

// NewAccountFullStatementPayload builds a connect service AccountFullStatement
// endpoint payload.
func NewAccountFullStatementPayload(body *AccountFullStatementRequestBody, accessToken string) *connect.AccountFullStatementPayload {
	v := &connect.AccountFullStatementPayload{
		MessageReference: *body.MessageReference,
		AccountNumber:    *body.AccountNumber,
		StartDate:        *body.StartDate,
		EndDate:          *body.EndDate,
	}
	v.AccessToken = &accessToken

	return v
}

// NewAccountMiniStatementPayload builds a connect service AccountMiniStatement
// endpoint payload.
func NewAccountMiniStatementPayload(body *AccountMiniStatementRequestBody, accessToken string) *connect.AccountMiniStatementPayload {
	v := &connect.AccountMiniStatementPayload{
		MessageReference: *body.MessageReference,
		AccountNumber:    *body.AccountNumber,
	}
	v.AccessToken = &accessToken

	return v
}

// NewAccountTransactionsPayload builds a connect service AccountTransactions
// endpoint payload.
func NewAccountTransactionsPayload(body *AccountTransactionsRequestBody, accessToken string) *connect.AccountTransactionsPayload {
	v := &connect.AccountTransactionsPayload{
		MessageReference: *body.MessageReference,
		AccountNumber:    *body.AccountNumber,
		NoOfTransactions: *body.NoOfTransactions,
	}
	v.AccessToken = &accessToken

	return v
}

// NewAccountValidationPayload builds a connect service AccountValidation
// endpoint payload.
func NewAccountValidationPayload(body *AccountValidationRequestBody, accessToken string) *connect.AccountValidationPayload {
	v := &connect.AccountValidationPayload{
		MessageReference: *body.MessageReference,
		AccountNumber:    *body.AccountNumber,
	}
	v.AccessToken = &accessToken

	return v
}

// NewExchangeRatePayload builds a connect service ExchangeRate endpoint
// payload.
func NewExchangeRatePayload(body *ExchangeRateRequestBody, accessToken string) *connect.ExchangeRatePayload {
	v := &connect.ExchangeRatePayload{
		MessageReference: *body.MessageReference,
		FromCurrencyCode: *body.FromCurrencyCode,
		ToCurrencyCode:   *body.ToCurrencyCode,
	}
	v.AccessToken = &accessToken

	return v
}

// NewIFTAccountToAccountTXNRequest builds a connect service
// IFTAccountToAccount endpoint payload.
func NewIFTAccountToAccountTXNRequest(body *IFTAccountToAccountRequestBody, accessToken string) *connect.IFTAccountToAccountTXNRequest {
	v := &connect.IFTAccountToAccountTXNRequest{
		MessageReference: *body.MessageReference,
		CallBackURL:      *body.CallBackURL,
	}
	v.Source = unmarshalSourceAccountTXNRequestRequestBodyToConnectSourceAccountTXNRequest(body.Source)
	v.Destinations = unmarshalDestinationsTXNRequestRequestBodyToConnectDestinationsTXNRequest(body.Destinations)
	v.AccessToken = &accessToken

	return v
}

// NewINSSimulationINSTransactionSimulationRequest builds a connect service
// INSSimulation endpoint payload.
func NewINSSimulationINSTransactionSimulationRequest(body *INSSimulationRequestBody, accessToken string) *connect.INSTransactionSimulationRequest {
	v := &connect.INSTransactionSimulationRequest{
		MessageReference: *body.MessageReference,
		MessageDateTime:  *body.MessageDateTime,
		ServiceName:      body.ServiceName,
		NotificationCode: body.NotificationCode,
		PaymentRef:       *body.PaymentRef,
		AccountNumber:    *body.AccountNumber,
		Amount:           *body.Amount,
		TransactionDate:  *body.TransactionDate,
		EventType:        *body.EventType,
		Currency:         *body.Currency,
		ExchangeRate:     *body.ExchangeRate,
		Narration:        *body.Narration,
		ValueDate:        *body.ValueDate,
		EntryDate:        *body.EntryDate,
		TransactionID:    *body.TransactionID,
	}
	v.CustMemo = unmarshalCustMemoRequestBodyToConnectCustMemo(body.CustMemo)
	v.AccessToken = &accessToken

	return v
}

// NewPesaLinkSendToAccountTransactionRequest builds a connect service
// PesaLinkSendToAccount endpoint payload.
func NewPesaLinkSendToAccountTransactionRequest(body *PesaLinkSendToAccountRequestBody, accessToken string) *connect.PesaLinkSendToAccountTransactionRequest {
	v := &connect.PesaLinkSendToAccountTransactionRequest{
		MessageReference: *body.MessageReference,
		CallBackURL:      *body.CallBackURL,
	}
	v.Source = unmarshalSourceAccountTransactionRequestRequestBodyToConnectSourceAccountTransactionRequest(body.Source)
	v.Destinations = unmarshalDestinationsTransactionRequestRequestBodyToConnectDestinationsTransactionRequest(body.Destinations)
	v.AccessToken = &accessToken

	return v
}

// NewPesaLinkSendToPhoneTransactionRequest builds a connect service
// PesaLinkSendToPhone endpoint payload.
func NewPesaLinkSendToPhoneTransactionRequest(body *PesaLinkSendToPhoneRequestBody, accessToken string) *connect.PesaLinkSendToPhoneTransactionRequest {
	v := &connect.PesaLinkSendToPhoneTransactionRequest{
		MessageReference: *body.MessageReference,
		CallBackURL:      *body.CallBackURL,
	}
	v.Source = unmarshalSourceAccountTransactionRequestRequestBodyToConnectSourceAccountTransactionRequest(body.Source)
	v.Destinations = unmarshalDestinationsTransactionRequestRequestBodyToConnectDestinationsTransactionRequest(body.Destinations)
	v.AccessToken = &accessToken

	return v
}

// NewSendToMPesaSendToMpesaTransactionRequest builds a connect service
// SendToMPesa endpoint payload.
func NewSendToMPesaSendToMpesaTransactionRequest(body *SendToMPesaRequestBody, accessToken string) *connect.SendToMpesaTransactionRequest {
	v := &connect.SendToMpesaTransactionRequest{
		MessageReference: *body.MessageReference,
		CallBackURL:      *body.CallBackURL,
	}
	v.Source = unmarshalSourceAccountTransactionRequestRequestBodyToConnectSourceAccountTransactionRequest(body.Source)
	v.Destinations = unmarshalDestinationsTransactionRequestRequestBodyToConnectDestinationsTransactionRequest(body.Destinations)
	v.AccessToken = &accessToken

	return v
}

// NewTransactionStatusFTTransactionStatusPayload builds a connect service
// TransactionStatus endpoint payload.
func NewTransactionStatusFTTransactionStatusPayload(body *TransactionStatusRequestBody, accessToken string) *connect.FTTransactionStatusPayload {
	v := &connect.FTTransactionStatusPayload{
		MessageReference: *body.MessageReference,
	}
	v.AccessToken = &accessToken

	return v
}

// ValidateAccountBalanceRequestBody runs the validations defined on
// AccountBalanceRequestBody
func ValidateAccountBalanceRequestBody(body *AccountBalanceRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	return
}

// ValidateAccountFullStatementRequestBody runs the validations defined on
// AccountFullStatementRequestBody
func ValidateAccountFullStatementRequestBody(body *AccountFullStatementRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("StartDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("EndDate", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.StartDate", *body.StartDate, goa.FormatDate))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.EndDate", *body.EndDate, goa.FormatDate))
	}
	return
}

// ValidateAccountMiniStatementRequestBody runs the validations defined on
// AccountMiniStatementRequestBody
func ValidateAccountMiniStatementRequestBody(body *AccountMiniStatementRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	return
}

// ValidateAccountTransactionsRequestBody runs the validations defined on
// AccountTransactionsRequestBody
func ValidateAccountTransactionsRequestBody(body *AccountTransactionsRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.NoOfTransactions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("NoOfTransactions", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	return
}

// ValidateAccountValidationRequestBody runs the validations defined on
// AccountValidationRequestBody
func ValidateAccountValidationRequestBody(body *AccountValidationRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	return
}

// ValidateExchangeRateRequestBody runs the validations defined on
// ExchangeRateRequestBody
func ValidateExchangeRateRequestBody(body *ExchangeRateRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.FromCurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FromCurrencyCode", "body"))
	}
	if body.ToCurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ToCurrencyCode", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.FromCurrencyCode != nil {
		if !(*body.FromCurrencyCode == "USD" || *body.FromCurrencyCode == "KES" || *body.FromCurrencyCode == "EUR" || *body.FromCurrencyCode == "GBP" || *body.FromCurrencyCode == "AUD" || *body.FromCurrencyCode == "CHF" || *body.FromCurrencyCode == "CAD" || *body.FromCurrencyCode == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.FromCurrencyCode", *body.FromCurrencyCode, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if body.ToCurrencyCode != nil {
		if !(*body.ToCurrencyCode == "USD" || *body.ToCurrencyCode == "KES" || *body.ToCurrencyCode == "EUR" || *body.ToCurrencyCode == "GBP" || *body.ToCurrencyCode == "AUD" || *body.ToCurrencyCode == "CHF" || *body.ToCurrencyCode == "CAD" || *body.ToCurrencyCode == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.ToCurrencyCode", *body.ToCurrencyCode, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	return
}

// ValidateIFTAccountToAccountRequestBody runs the validations defined on
// IFTAccountToAccountRequestBody
func ValidateIFTAccountToAccountRequestBody(body *IFTAccountToAccountRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.CallBackURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("CallBackUrl", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountTXNRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Destinations != nil {
		if err2 := ValidateDestinationsTXNRequestRequestBody(body.Destinations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateINSSimulationRequestBody runs the validations defined on
// INSSimulationRequestBody
func ValidateINSSimulationRequestBody(body *INSSimulationRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.PaymentRef == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("PaymentRef", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.TransactionDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionDate", "body"))
	}
	if body.EventType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("EventType", "body"))
	}
	if body.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Currency", "body"))
	}
	if body.ExchangeRate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ExchangeRate", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.CustMemo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("CustMemo", "body"))
	}
	if body.ValueDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ValueDate", "body"))
	}
	if body.EntryDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("EntryDate", "body"))
	}
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionId", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	if body.TransactionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.TransactionDate", *body.TransactionDate, goa.FormatDateTime))
	}
	if body.Currency != nil {
		if !(*body.Currency == "KES" || *body.Currency == "USD" || *body.Currency == "EUR" || *body.Currency == "GBP" || *body.Currency == "AUD" || *body.Currency == "CHF" || *body.Currency == "CAD" || *body.Currency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.Currency", *body.Currency, []interface{}{"KES", "USD", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if body.ValueDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ValueDate", *body.ValueDate, goa.FormatDate))
	}
	if body.EntryDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.EntryDate", *body.EntryDate, goa.FormatDate))
	}
	return
}

// ValidatePesaLinkSendToAccountRequestBody runs the validations defined on
// PesaLinkSendToAccountRequestBody
func ValidatePesaLinkSendToAccountRequestBody(body *PesaLinkSendToAccountRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.CallBackURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("CallBackUrl", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountTransactionRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Destinations != nil {
		if err2 := ValidateDestinationsTransactionRequestRequestBody(body.Destinations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePesaLinkSendToPhoneRequestBody runs the validations defined on
// PesaLinkSendToPhoneRequestBody
func ValidatePesaLinkSendToPhoneRequestBody(body *PesaLinkSendToPhoneRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.CallBackURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("CallBackUrl", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountTransactionRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Destinations != nil {
		if err2 := ValidateDestinationsTransactionRequestRequestBody(body.Destinations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSendToMPesaRequestBody runs the validations defined on
// SendToMPesaRequestBody
func ValidateSendToMPesaRequestBody(body *SendToMPesaRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.CallBackURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("CallBackUrl", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountTransactionRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Destinations != nil {
		if err2 := ValidateDestinationsTransactionRequestRequestBody(body.Destinations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTransactionStatusRequestBody runs the validations defined on
// TransactionStatusRequestBody
func ValidateTransactionStatusRequestBody(body *TransactionStatusRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	return
}

// ValidateSourceAccountTXNRequestRequestBody runs the validations defined on
// SourceAccountTXNRequestRequestBody
func ValidateSourceAccountTXNRequestRequestBody(body *SourceAccountTXNRequestRequestBody) (err error) {
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	if body.Amount != nil {
		if *body.Amount < 0.01 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 0.01, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount > 999999.99 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 999999.99, false))
		}
	}
	if body.TransactionCurrency != nil {
		if !(*body.TransactionCurrency == "USD" || *body.TransactionCurrency == "KES" || *body.TransactionCurrency == "EUR" || *body.TransactionCurrency == "GBP" || *body.TransactionCurrency == "AUD" || *body.TransactionCurrency == "CHF" || *body.TransactionCurrency == "CAD" || *body.TransactionCurrency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", *body.TransactionCurrency, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 1, true))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) > 25 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 25, false))
		}
	}
	return
}

// ValidateDestinationsTXNRequestRequestBody runs the validations defined on
// DestinationsTXNRequestRequestBody
func ValidateDestinationsTXNRequestRequestBody(body *DestinationsTXNRequestRequestBody) (err error) {
	if len(body.DestinationsTXNRequest) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.DestinationsTXNRequest", body.DestinationsTXNRequest, len(body.DestinationsTXNRequest), 1, true))
	}
	for _, e := range body.DestinationsTXNRequest {
		if e != nil {
			if err2 := ValidateDestinationAccountTXNRequestRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDestinationAccountTXNRequestRequestBody runs the validations defined
// on DestinationAccountTXNRequestRequestBody
func ValidateDestinationAccountTXNRequestRequestBody(body *DestinationAccountTXNRequestRequestBody) (err error) {
	if body.ReferenceNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReferenceNumber", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 1, true))
		}
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 30, false))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	if body.Amount != nil {
		if *body.Amount < 0.01 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 0.01, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount > 999999.99 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 999999.99, false))
		}
	}
	if body.TransactionCurrency != nil {
		if !(*body.TransactionCurrency == "USD" || *body.TransactionCurrency == "KES" || *body.TransactionCurrency == "EUR" || *body.TransactionCurrency == "GBP" || *body.TransactionCurrency == "AUD" || *body.TransactionCurrency == "CHF" || *body.TransactionCurrency == "CAD" || *body.TransactionCurrency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", *body.TransactionCurrency, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 1, true))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) > 25 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 25, false))
		}
	}
	return
}

// ValidateSourceAccountTransactionRequestRequestBody runs the validations
// defined on SourceAccountTransactionRequestRequestBody
func ValidateSourceAccountTransactionRequestRequestBody(body *SourceAccountTransactionRequestRequestBody) (err error) {
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	if body.Amount != nil {
		if *body.Amount < 0.01 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 0.01, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount > 999999.99 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 999999.99, false))
		}
	}
	if body.TransactionCurrency != nil {
		if !(*body.TransactionCurrency == "USD" || *body.TransactionCurrency == "KES" || *body.TransactionCurrency == "EUR" || *body.TransactionCurrency == "GBP" || *body.TransactionCurrency == "AUD" || *body.TransactionCurrency == "CHF" || *body.TransactionCurrency == "CAD" || *body.TransactionCurrency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", *body.TransactionCurrency, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 1, true))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) > 25 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 25, false))
		}
	}
	return
}

// ValidateDestinationsTransactionRequestRequestBody runs the validations
// defined on DestinationsTransactionRequestRequestBody
func ValidateDestinationsTransactionRequestRequestBody(body *DestinationsTransactionRequestRequestBody) (err error) {
	if len(body.DestinationAccountTransactionRequest) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.DestinationAccountTransactionRequest", body.DestinationAccountTransactionRequest, len(body.DestinationAccountTransactionRequest), 1, true))
	}
	for _, e := range body.DestinationAccountTransactionRequest {
		if e != nil {
			if err2 := ValidateDestinationAccountTransactionRequestRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDestinationAccountTransactionRequestRequestBody runs the validations
// defined on DestinationAccountTransactionRequestRequestBody
func ValidateDestinationAccountTransactionRequestRequestBody(body *DestinationAccountTransactionRequestRequestBody) (err error) {
	if body.ReferenceNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReferenceNumber", "body"))
	}
	if body.MobileNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MobileNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 1, true))
		}
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 30, false))
		}
	}
	if body.MobileNumber != nil {
		if utf8.RuneCountInString(*body.MobileNumber) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", *body.MobileNumber, utf8.RuneCountInString(*body.MobileNumber), 10, true))
		}
	}
	if body.MobileNumber != nil {
		if utf8.RuneCountInString(*body.MobileNumber) > 13 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", *body.MobileNumber, utf8.RuneCountInString(*body.MobileNumber), 13, false))
		}
	}
	if body.Amount != nil {
		if *body.Amount < 0.01 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 0.01, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount > 999999.99 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 999999.99, false))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 1, true))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) > 25 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 25, false))
		}
	}
	return
}
