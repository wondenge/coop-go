// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP server
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	connect "github.com/wondenge/coop-go/gen/connect"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the connect service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	AccountBalance        http.Handler
	AccountFullStatement  http.Handler
	AccountMiniStatement  http.Handler
	AccountTransactions   http.Handler
	AccountValidation     http.Handler
	ExchangeRate          http.Handler
	IFTAccountToAccount   http.Handler
	INSSimulation         http.Handler
	PesaLinkSendToAccount http.Handler
	PesaLinkSendToPhone   http.Handler
	SendToMPesa           http.Handler
	TransactionStatus     http.Handler
	Token                 http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the connect service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *connect.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"AccountBalance", "POST", "/Enquiry/AccountBalance/1.0.0"},
			{"AccountFullStatement", "POST", "/Enquiry/FullStatement/Account/1.0.0"},
			{"AccountMiniStatement", "POST", "/MiniStatement/Account/1.0.0"},
			{"AccountTransactions", "POST", "/Enquiry/AccountTransactions/1.0.0"},
			{"AccountValidation", "POST", "/Enquiry/Validation/Account/1.0.0"},
			{"ExchangeRate", "POST", "/Enquiry/ExchangeRate/1.0.0"},
			{"IFTAccountToAccount", "POST", "/FundsTransfer/Internal/A2A/2.0.0"},
			{"INSSimulation", "POST", "/Notifications/INS/Simulation/1.0.0"},
			{"PesaLinkSendToAccount", "POST", "/FundsTransfer/External/A2A/PesaLink/1.0.0"},
			{"PesaLinkSendToPhone", "POST", "/FundsTransfer/External/A2M/PesaLink/1.0.0"},
			{"SendToMPesa", "POST", "/FundsTransfer/External/A2M/Mpesa/v1.0.0"},
			{"TransactionStatus", "POST", "/Enquiry/TransactionStatus/2.0.0"},
			{"Token", "POST", "/token"},
		},
		AccountBalance:        NewAccountBalanceHandler(e.AccountBalance, mux, decoder, encoder, errhandler, formatter),
		AccountFullStatement:  NewAccountFullStatementHandler(e.AccountFullStatement, mux, decoder, encoder, errhandler, formatter),
		AccountMiniStatement:  NewAccountMiniStatementHandler(e.AccountMiniStatement, mux, decoder, encoder, errhandler, formatter),
		AccountTransactions:   NewAccountTransactionsHandler(e.AccountTransactions, mux, decoder, encoder, errhandler, formatter),
		AccountValidation:     NewAccountValidationHandler(e.AccountValidation, mux, decoder, encoder, errhandler, formatter),
		ExchangeRate:          NewExchangeRateHandler(e.ExchangeRate, mux, decoder, encoder, errhandler, formatter),
		IFTAccountToAccount:   NewIFTAccountToAccountHandler(e.IFTAccountToAccount, mux, decoder, encoder, errhandler, formatter),
		INSSimulation:         NewINSSimulationHandler(e.INSSimulation, mux, decoder, encoder, errhandler, formatter),
		PesaLinkSendToAccount: NewPesaLinkSendToAccountHandler(e.PesaLinkSendToAccount, mux, decoder, encoder, errhandler, formatter),
		PesaLinkSendToPhone:   NewPesaLinkSendToPhoneHandler(e.PesaLinkSendToPhone, mux, decoder, encoder, errhandler, formatter),
		SendToMPesa:           NewSendToMPesaHandler(e.SendToMPesa, mux, decoder, encoder, errhandler, formatter),
		TransactionStatus:     NewTransactionStatusHandler(e.TransactionStatus, mux, decoder, encoder, errhandler, formatter),
		Token:                 NewTokenHandler(e.Token, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "connect" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.AccountBalance = m(s.AccountBalance)
	s.AccountFullStatement = m(s.AccountFullStatement)
	s.AccountMiniStatement = m(s.AccountMiniStatement)
	s.AccountTransactions = m(s.AccountTransactions)
	s.AccountValidation = m(s.AccountValidation)
	s.ExchangeRate = m(s.ExchangeRate)
	s.IFTAccountToAccount = m(s.IFTAccountToAccount)
	s.INSSimulation = m(s.INSSimulation)
	s.PesaLinkSendToAccount = m(s.PesaLinkSendToAccount)
	s.PesaLinkSendToPhone = m(s.PesaLinkSendToPhone)
	s.SendToMPesa = m(s.SendToMPesa)
	s.TransactionStatus = m(s.TransactionStatus)
	s.Token = m(s.Token)
}

// Mount configures the mux to serve the connect endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountAccountBalanceHandler(mux, h.AccountBalance)
	MountAccountFullStatementHandler(mux, h.AccountFullStatement)
	MountAccountMiniStatementHandler(mux, h.AccountMiniStatement)
	MountAccountTransactionsHandler(mux, h.AccountTransactions)
	MountAccountValidationHandler(mux, h.AccountValidation)
	MountExchangeRateHandler(mux, h.ExchangeRate)
	MountIFTAccountToAccountHandler(mux, h.IFTAccountToAccount)
	MountINSSimulationHandler(mux, h.INSSimulation)
	MountPesaLinkSendToAccountHandler(mux, h.PesaLinkSendToAccount)
	MountPesaLinkSendToPhoneHandler(mux, h.PesaLinkSendToPhone)
	MountSendToMPesaHandler(mux, h.SendToMPesa)
	MountTransactionStatusHandler(mux, h.TransactionStatus)
	MountTokenHandler(mux, h.Token)
}

// MountAccountBalanceHandler configures the mux to serve the "connect" service
// "AccountBalance" endpoint.
func MountAccountBalanceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/Enquiry/AccountBalance/1.0.0", f)
}

// NewAccountBalanceHandler creates a HTTP handler which loads the HTTP request
// and calls the "connect" service "AccountBalance" endpoint.
func NewAccountBalanceHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAccountBalanceRequest(mux, decoder)
		encodeResponse = EncodeAccountBalanceResponse(encoder)
		encodeError    = EncodeAccountBalanceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AccountBalance")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAccountFullStatementHandler configures the mux to serve the "connect"
// service "AccountFullStatement" endpoint.
func MountAccountFullStatementHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/Enquiry/FullStatement/Account/1.0.0", f)
}

// NewAccountFullStatementHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "AccountFullStatement" endpoint.
func NewAccountFullStatementHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAccountFullStatementRequest(mux, decoder)
		encodeResponse = EncodeAccountFullStatementResponse(encoder)
		encodeError    = EncodeAccountFullStatementError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AccountFullStatement")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAccountMiniStatementHandler configures the mux to serve the "connect"
// service "AccountMiniStatement" endpoint.
func MountAccountMiniStatementHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/MiniStatement/Account/1.0.0", f)
}

// NewAccountMiniStatementHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "AccountMiniStatement" endpoint.
func NewAccountMiniStatementHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAccountMiniStatementRequest(mux, decoder)
		encodeResponse = EncodeAccountMiniStatementResponse(encoder)
		encodeError    = EncodeAccountMiniStatementError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AccountMiniStatement")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAccountTransactionsHandler configures the mux to serve the "connect"
// service "AccountTransactions" endpoint.
func MountAccountTransactionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/Enquiry/AccountTransactions/1.0.0", f)
}

// NewAccountTransactionsHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "AccountTransactions" endpoint.
func NewAccountTransactionsHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAccountTransactionsRequest(mux, decoder)
		encodeResponse = EncodeAccountTransactionsResponse(encoder)
		encodeError    = EncodeAccountTransactionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AccountTransactions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAccountValidationHandler configures the mux to serve the "connect"
// service "AccountValidation" endpoint.
func MountAccountValidationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/Enquiry/Validation/Account/1.0.0", f)
}

// NewAccountValidationHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "AccountValidation" endpoint.
func NewAccountValidationHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAccountValidationRequest(mux, decoder)
		encodeResponse = EncodeAccountValidationResponse(encoder)
		encodeError    = EncodeAccountValidationError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AccountValidation")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountExchangeRateHandler configures the mux to serve the "connect" service
// "ExchangeRate" endpoint.
func MountExchangeRateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/Enquiry/ExchangeRate/1.0.0", f)
}

// NewExchangeRateHandler creates a HTTP handler which loads the HTTP request
// and calls the "connect" service "ExchangeRate" endpoint.
func NewExchangeRateHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeExchangeRateRequest(mux, decoder)
		encodeResponse = EncodeExchangeRateResponse(encoder)
		encodeError    = EncodeExchangeRateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ExchangeRate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIFTAccountToAccountHandler configures the mux to serve the "connect"
// service "IFTAccountToAccount" endpoint.
func MountIFTAccountToAccountHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/FundsTransfer/Internal/A2A/2.0.0", f)
}

// NewIFTAccountToAccountHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "IFTAccountToAccount" endpoint.
func NewIFTAccountToAccountHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIFTAccountToAccountRequest(mux, decoder)
		encodeResponse = EncodeIFTAccountToAccountResponse(encoder)
		encodeError    = EncodeIFTAccountToAccountError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "IFTAccountToAccount")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountINSSimulationHandler configures the mux to serve the "connect" service
// "INSSimulation" endpoint.
func MountINSSimulationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/Notifications/INS/Simulation/1.0.0", f)
}

// NewINSSimulationHandler creates a HTTP handler which loads the HTTP request
// and calls the "connect" service "INSSimulation" endpoint.
func NewINSSimulationHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeINSSimulationRequest(mux, decoder)
		encodeResponse = EncodeINSSimulationResponse(encoder)
		encodeError    = EncodeINSSimulationError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "INSSimulation")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPesaLinkSendToAccountHandler configures the mux to serve the "connect"
// service "PesaLinkSendToAccount" endpoint.
func MountPesaLinkSendToAccountHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/FundsTransfer/External/A2A/PesaLink/1.0.0", f)
}

// NewPesaLinkSendToAccountHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "PesaLinkSendToAccount" endpoint.
func NewPesaLinkSendToAccountHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePesaLinkSendToAccountRequest(mux, decoder)
		encodeResponse = EncodePesaLinkSendToAccountResponse(encoder)
		encodeError    = EncodePesaLinkSendToAccountError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "PesaLinkSendToAccount")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPesaLinkSendToPhoneHandler configures the mux to serve the "connect"
// service "PesaLinkSendToPhone" endpoint.
func MountPesaLinkSendToPhoneHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/FundsTransfer/External/A2M/PesaLink/1.0.0", f)
}

// NewPesaLinkSendToPhoneHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "PesaLinkSendToPhone" endpoint.
func NewPesaLinkSendToPhoneHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePesaLinkSendToPhoneRequest(mux, decoder)
		encodeResponse = EncodePesaLinkSendToPhoneResponse(encoder)
		encodeError    = EncodePesaLinkSendToPhoneError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "PesaLinkSendToPhone")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSendToMPesaHandler configures the mux to serve the "connect" service
// "SendToMPesa" endpoint.
func MountSendToMPesaHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/FundsTransfer/External/A2M/Mpesa/v1.0.0", f)
}

// NewSendToMPesaHandler creates a HTTP handler which loads the HTTP request
// and calls the "connect" service "SendToMPesa" endpoint.
func NewSendToMPesaHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendToMPesaRequest(mux, decoder)
		encodeResponse = EncodeSendToMPesaResponse(encoder)
		encodeError    = EncodeSendToMPesaError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SendToMPesa")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransactionStatusHandler configures the mux to serve the "connect"
// service "TransactionStatus" endpoint.
func MountTransactionStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/Enquiry/TransactionStatus/2.0.0", f)
}

// NewTransactionStatusHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "TransactionStatus" endpoint.
func NewTransactionStatusHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransactionStatusRequest(mux, decoder)
		encodeResponse = EncodeTransactionStatusResponse(encoder)
		encodeError    = EncodeTransactionStatusError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "TransactionStatus")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTokenHandler configures the mux to serve the "connect" service "token"
// endpoint.
func MountTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/token", f)
}

// NewTokenHandler creates a HTTP handler which loads the HTTP request and
// calls the "connect" service "token" endpoint.
func NewTokenHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTokenRequest(mux, decoder)
		encodeResponse = EncodeTokenResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "token")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
