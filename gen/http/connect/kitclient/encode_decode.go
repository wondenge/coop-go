// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect go-kit HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/coop-go/design

package client

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/coop-go/gen/http/connect/client"
	goahttp "goa.design/goa/v3/http"
)

// EncodeAccountBalanceRequest returns a go-kit EncodeRequestFunc suitable for
// encoding connect AccountBalance requests.
func EncodeAccountBalanceRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeAccountBalanceRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeAccountBalanceResponse returns a go-kit DecodeResponseFunc suitable
// for decoding connect AccountBalance responses.
func DecodeAccountBalanceResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeAccountBalanceResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeAccountFullStatementRequest returns a go-kit EncodeRequestFunc
// suitable for encoding connect AccountFullStatement requests.
func EncodeAccountFullStatementRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeAccountFullStatementRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeAccountFullStatementResponse returns a go-kit DecodeResponseFunc
// suitable for decoding connect AccountFullStatement responses.
func DecodeAccountFullStatementResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeAccountFullStatementResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeAccountMiniStatementRequest returns a go-kit EncodeRequestFunc
// suitable for encoding connect AccountMiniStatement requests.
func EncodeAccountMiniStatementRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeAccountMiniStatementRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeAccountMiniStatementResponse returns a go-kit DecodeResponseFunc
// suitable for decoding connect AccountMiniStatement responses.
func DecodeAccountMiniStatementResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeAccountMiniStatementResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeAccountTransactionsRequest returns a go-kit EncodeRequestFunc suitable
// for encoding connect AccountTransactions requests.
func EncodeAccountTransactionsRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeAccountTransactionsRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeAccountTransactionsResponse returns a go-kit DecodeResponseFunc
// suitable for decoding connect AccountTransactions responses.
func DecodeAccountTransactionsResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeAccountTransactionsResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeAccountValidationRequest returns a go-kit EncodeRequestFunc suitable
// for encoding connect AccountValidation requests.
func EncodeAccountValidationRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeAccountValidationRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeAccountValidationResponse returns a go-kit DecodeResponseFunc suitable
// for decoding connect AccountValidation responses.
func DecodeAccountValidationResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeAccountValidationResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeExchangeRateRequest returns a go-kit EncodeRequestFunc suitable for
// encoding connect ExchangeRate requests.
func EncodeExchangeRateRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeExchangeRateRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeExchangeRateResponse returns a go-kit DecodeResponseFunc suitable for
// decoding connect ExchangeRate responses.
func DecodeExchangeRateResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeExchangeRateResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeIFTAccountToAccountRequest returns a go-kit EncodeRequestFunc suitable
// for encoding connect IFTAccountToAccount requests.
func EncodeIFTAccountToAccountRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeIFTAccountToAccountRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeIFTAccountToAccountResponse returns a go-kit DecodeResponseFunc
// suitable for decoding connect IFTAccountToAccount responses.
func DecodeIFTAccountToAccountResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeIFTAccountToAccountResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeINSSimulationRequest returns a go-kit EncodeRequestFunc suitable for
// encoding connect INSSimulation requests.
func EncodeINSSimulationRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeINSSimulationRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeINSSimulationResponse returns a go-kit DecodeResponseFunc suitable for
// decoding connect INSSimulation responses.
func DecodeINSSimulationResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeINSSimulationResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodePesaLinkSendToAccountRequest returns a go-kit EncodeRequestFunc
// suitable for encoding connect PesaLinkSendToAccount requests.
func EncodePesaLinkSendToAccountRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodePesaLinkSendToAccountRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodePesaLinkSendToAccountResponse returns a go-kit DecodeResponseFunc
// suitable for decoding connect PesaLinkSendToAccount responses.
func DecodePesaLinkSendToAccountResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodePesaLinkSendToAccountResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodePesaLinkSendToPhoneRequest returns a go-kit EncodeRequestFunc suitable
// for encoding connect PesaLinkSendToPhone requests.
func EncodePesaLinkSendToPhoneRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodePesaLinkSendToPhoneRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodePesaLinkSendToPhoneResponse returns a go-kit DecodeResponseFunc
// suitable for decoding connect PesaLinkSendToPhone responses.
func DecodePesaLinkSendToPhoneResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodePesaLinkSendToPhoneResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeSendToMPesaRequest returns a go-kit EncodeRequestFunc suitable for
// encoding connect SendToMPesa requests.
func EncodeSendToMPesaRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeSendToMPesaRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeSendToMPesaResponse returns a go-kit DecodeResponseFunc suitable for
// decoding connect SendToMPesa responses.
func DecodeSendToMPesaResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeSendToMPesaResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeTransactionStatusRequest returns a go-kit EncodeRequestFunc suitable
// for encoding connect TransactionStatus requests.
func EncodeTransactionStatusRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeTransactionStatusRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeTransactionStatusResponse returns a go-kit DecodeResponseFunc suitable
// for decoding connect TransactionStatus responses.
func DecodeTransactionStatusResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeTransactionStatusResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeTokenRequest returns a go-kit EncodeRequestFunc suitable for encoding
// connect token requests.
func EncodeTokenRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeTokenRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeTokenResponse returns a go-kit DecodeResponseFunc suitable for
// decoding connect token responses.
func DecodeTokenResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeTokenResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}
